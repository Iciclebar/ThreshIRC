<?xml version="1.0" encoding="utf-8"?>
<ndoc>
  <assembly name="IRC">
    <module name="IRC.dll">
      <namespace name="Sharkbite.Irc">
        <class name="CtcpListener" id="T:Sharkbite.Irc.CtcpListener" access="Public">
          <documentation>
            <summary>
             This class is used to send CTCP specific events. Once registered with this object 
             the client can receive notification of all CTCP requests, pings, and replies. Instances 
             of this class are not created directly but are retrieved as a property from a 
             <see cref="T:Sharkbite.Irc.Connection" /> object.
             </summary>
            <remarks>All CTCP messages come in Request/Reply pairs. Each event
             signals either the Request or the Response. All CTCP queries (with the exception of
             CTCP Ping) are very similiar so they are all handled by the same set of events.</remarks>
            <example>
              <code>
             //Create a Connection object which will support CTCP (second bool param).
             Connection connection = new Connection( args, true, false );	
             //Register a delegate on this CtcpListener.
             connection.CtcpListener.OnCtcpRequest += new CtcpRequestEventHandler( MyOnCtcpRequest );
             //If the Connection was created without CTCP support then this property will return null.
             //However, CTCP can be turned on and off dynamically. To enable it at a later time call:
             connection.EnableCtcp = true;
             //Now you can register listeners as above.
             //Setting EnableCtcp to false will delete the instance of CtcpListener and no more
             //CTCP events will be raised.
            </code>
            </example>
          </documentation>
          <method name="Finalize" id="M:Sharkbite.Irc.CtcpListener.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.CtcpListener.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.CtcpListener.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.CtcpListener.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="IsCtcpMessage" id="M:Sharkbite.Irc.CtcpListener.IsCtcpMessage(System.String)" access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>
            Test if the message contains CTCP commands.
            </summary>
              <param name="message">The raw message from the IRC server</param>
              <returns>True if this is a Ctcp request or reply.</returns>
            </documentation>
            <parameter name="message" type="System.String" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.CtcpListener.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.CtcpListener.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="OnCtcpReply" id="E:Sharkbite.Irc.CtcpListener.OnCtcpReply" access="Public" contract="Normal" type="Sharkbite.Irc.CtcpReplyEventHandler" multicast="true">
            <documentation>
              <summary>
            Listens for replies to CTCP queries sent by this client.
            </summary>
            </documentation>
          </event>
          <event name="OnCtcpRequest" id="E:Sharkbite.Irc.CtcpListener.OnCtcpRequest" access="Public" contract="Normal" type="Sharkbite.Irc.CtcpRequestEventHandler" multicast="true">
            <documentation>
              <summary>
            Listens for CTCP requests.
            </summary>
            </documentation>
          </event>
          <event name="OnCtcpPingReply" id="E:Sharkbite.Irc.CtcpListener.OnCtcpPingReply" access="Public" contract="Normal" type="Sharkbite.Irc.CtcpPingReplyEventHandler" multicast="true">
            <documentation>
              <summary>
            Listens for a reply to CTCP Ping query sent by this client.
            </summary>
            </documentation>
          </event>
          <event name="OnCtcpPingRequest" id="E:Sharkbite.Irc.CtcpListener.OnCtcpPingRequest" access="Public" contract="Normal" type="Sharkbite.Irc.CtcpPingRequestEventHandler" multicast="true">
            <documentation>
              <summary>
            Listens for CTCP Ping requests.
            </summary>
            </documentation>
          </event>
        </class>
        <class name="CtcpResponder" id="T:Sharkbite.Irc.CtcpResponder" access="Public" sealed="true">
          <documentation>
            <summary>
            A class which automatically responds to CTCP queries. The
            replies it sends are configurable by the client.
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:Sharkbite.Irc.CtcpResponder.#ctor(Sharkbite.Irc.Connection)" access="Public">
            <documentation>
              <summary>
            Create an instance and register handlers for
            CTCP events. The Connection's CtcpEnable property must
            be set to true or the connection will not send CTCP events
            to this responder.
            </summary>
              <param name="connection">The containing connection.</param>
            </documentation>
            <parameter name="connection" type="Sharkbite.Irc.Connection" />
          </constructor>
          <property name="ResponseDelay" id="P:Sharkbite.Irc.CtcpResponder.ResponseDelay" access="Public" type="System.Double" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            How long the responder should wait before
            replying to a query. Queries coming before this
            time has passed will be droppped.
            </summary>
              <value>The delay in milliseconds. The default is 2000 (2 seconds).</value>
            </documentation>
          </property>
          <property name="FingerResponse" id="P:Sharkbite.Irc.CtcpResponder.FingerResponse" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            Finger responses normally consist of a message
            and the idle time.
            </summary>
              <value>The Idle time will be automatically appended
            to the finger response. This default to the UserInfo message.</value>
            </documentation>
          </property>
          <property name="UserInfoResponse" id="P:Sharkbite.Irc.CtcpResponder.UserInfoResponse" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            A message about the user.
            </summary>
              <value>Any string which does not exceed the IRC max length.
            This defaults to "Thresher Auto-Responder".</value>
            </documentation>
          </property>
          <property name="VersionResponse" id="P:Sharkbite.Irc.CtcpResponder.VersionResponse" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            The version of the client software.
            </summary>
              <value>This defaults to "Thresher IRC library 1.0".</value>
            </documentation>
          </property>
          <property name="ClientInfoResponse" id="P:Sharkbite.Irc.CtcpResponder.ClientInfoResponse" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            Tell others what CTCP commands this client supports.
            </summary>
              <value>By default it sends a list of all the CTCP commands.</value>
            </documentation>
          </property>
          <property name="SourceResponse" id="P:Sharkbite.Irc.CtcpResponder.SourceResponse" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            Where to get this client.
            </summary>
              <value>This can be a complex set of FTP instructions or just a
            URL to the client's homepage.</value>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.CtcpResponder.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.CtcpResponder.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.CtcpResponder.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.CtcpResponder.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.CtcpResponder.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.CtcpResponder.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="CommandBuilder" id="T:Sharkbite.Irc.CommandBuilder" access="Public" abstract="true">
          <documentation>
            <summary>
            CommandBuilder provides the support methods needed
            by its subclasses to build correctly formatted messages for
            the IRC server. It is never itself instantiated.
            </summary>
          </documentation>
          <method name="Finalize" id="M:Sharkbite.Irc.CommandBuilder.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.CommandBuilder.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.CommandBuilder.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.CommandBuilder.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.CommandBuilder.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.CommandBuilder.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="CtcpSender" id="T:Sharkbite.Irc.CtcpSender" access="Public" sealed="true" baseType="CommandBuilder">
          <documentation>
            <summary>
            This class allows the client to send CTCP commands. There is no limit
            on what commands can actually be sent, however, the accepted CTCP 
            commands are: UserInfo, Finger, Version, Source, ClientInfo, ErrMsg, and Time.
            
            <remarks>Action, though it is also a CTCP command, is so common that it is handled 
            by the normal sender class. </remarks></summary>
          </documentation>
          <base name="CommandBuilder" id="T:Sharkbite.Irc.CommandBuilder" type="Sharkbite.Irc.CommandBuilder" />
          <method name="Finalize" id="M:Sharkbite.Irc.CtcpSender.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.CtcpSender.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.CtcpSender.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.CtcpSender.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="CtcpReply" id="M:Sharkbite.Irc.CtcpSender.CtcpReply(System.String,System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send a reply in response to a CTCP request. Replies that exceed
            the IRC max length will be truncated.
            </summary>
              <param name="nick">The target's nick name.</param>
              <param name="command">The CTCP command. Should be a string constant
            from <see cref="T:Sharkbite.Irc.CtcpUtil" />.</param>
              <param name="reply">The text of the response.</param>
              <exception cref="T:System.ArgumentException">If the nick is invalid, the command 
            is empty, or the reply is empty.</exception>
              <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpReply" />
            </documentation>
            <parameter name="command" type="System.String" />
            <parameter name="nick" type="System.String" />
            <parameter name="reply" type="System.String" />
          </method>
          <method name="CtcpRequest" id="M:Sharkbite.Irc.CtcpSender.CtcpRequest(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send a CTCP query to another user.
            </summary>
              <remarks>The target may also respond with an error
            or nothing at all if it cannot or does not want to answer.
            </remarks>
              <param name="nick">The target's nick name.</param>
              <param name="command">The CTCP command. Should be a string constant
            from <see cref="T:Sharkbite.Irc.CtcpUtil" />.</param>
              <exception cref="T:System.ArgumentException">If the nick is invalid or the command is empty.</exception>
              <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpRequest" />
            </documentation>
            <parameter name="command" type="System.String" />
            <parameter name="nick" type="System.String" />
          </method>
          <method name="CtcpPingReply" id="M:Sharkbite.Irc.CtcpSender.CtcpPingReply(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send back a timestamp so the requester can calculate his
            ping to this client.
            </summary>
              <param name="nick">The target's nick name.</param>
              <param name="timestamp">The timestamp sent by the requester.</param>
              <exception cref="T:System.ArgumentException">If the nick is invalid or the timestamp is empty.</exception>
              <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpPingReply" />
            </documentation>
            <parameter name="nick" type="System.String" />
            <parameter name="timestamp" type="System.String" />
          </method>
          <method name="CtcpPingRequest" id="M:Sharkbite.Irc.CtcpSender.CtcpPingRequest(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send a CTCP Ping request to another user.
            </summary>
              <remarks>The target may also respond with an error
            or nothing at all if it cannot or does not want to answer.
            </remarks>
              <param name="nick">The target's nick name.</param>
              <param name="timestamp">The timestamp to send to the target user. These
            can be generated by Thresher (<see cref="M:Sharkbite.Irc.CtcpUtil.CreateTimestamp" />) or
            by the client application.</param>
              <exception cref="T:System.ArgumentException">If the nick is invalid.</exception>
              <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpPingRequest" />
            </documentation>
            <parameter name="nick" type="System.String" />
            <parameter name="timestamp" type="System.String" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.CtcpSender.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.CtcpSender.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="CtcpUtil" id="T:Sharkbite.Irc.CtcpUtil" access="Public" sealed="true">
          <documentation>
            <summary>
            Constants and utility methods to support CTCP.
            </summary>
            <remarks>The CTCP constants should be used to test incoming
            CTCP queries for their type and as the CTCP command
            for outgoing ones.</remarks>
          </documentation>
          <field name="Finger" id="F:Sharkbite.Irc.CtcpUtil.Finger" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>CTCP Finger.</summary>
            </documentation>
          </field>
          <field name="UserInfo" id="F:Sharkbite.Irc.CtcpUtil.UserInfo" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>CTCP USERINFO.</summary>
            </documentation>
          </field>
          <field name="Version" id="F:Sharkbite.Irc.CtcpUtil.Version" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>CTCP VERSION.</summary>
            </documentation>
          </field>
          <field name="Source" id="F:Sharkbite.Irc.CtcpUtil.Source" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>CTCP SOURCE.</summary>
            </documentation>
          </field>
          <field name="ClientInfo" id="F:Sharkbite.Irc.CtcpUtil.ClientInfo" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>CTCP CLIENTINFO.</summary>
            </documentation>
          </field>
          <field name="ErrorMessage" id="F:Sharkbite.Irc.CtcpUtil.ErrorMessage" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>CTCP ERRMSG.</summary>
            </documentation>
          </field>
          <field name="Ping" id="F:Sharkbite.Irc.CtcpUtil.Ping" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>CTCP PING.</summary>
            </documentation>
          </field>
          <field name="Time" id="F:Sharkbite.Irc.CtcpUtil.Time" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>CTCP TIME.</summary>
            </documentation>
          </field>
          <method name="Finalize" id="M:Sharkbite.Irc.CtcpUtil.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.CtcpUtil.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.CtcpUtil.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.CtcpUtil.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="CreateTimestamp" id="M:Sharkbite.Irc.CtcpUtil.CreateTimestamp" access="Public" contract="Static" returnType="System.String">
            <documentation>
              <summary>
            Generate a timestamp string suitable for the CTCP Ping command.
            </summary>
              <returns>The current time as a string.</returns>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.CtcpUtil.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.CtcpUtil.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="DccChatSession" id="T:Sharkbite.Irc.DccChatSession" access="Public" sealed="true">
          <documentation>
            <summary>
            Establish a DCC Chat connection with a remote user. 
            </summary>
          </documentation>
          <property name="Connected" id="P:Sharkbite.Irc.DccChatSession.Connected" access="Public" type="System.Boolean" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            A read-only property indicating whether this session
            is currently connected to another user.
            </summary>
              <value>True if the client is connected.</value>
            </documentation>
          </property>
          <property name="ClientInfo" id="P:Sharkbite.Irc.DccChatSession.ClientInfo" access="Public" type="Sharkbite.Irc.DccUserInfo" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            Iinformation about the remote user.
            </summary>
              <value>A read-only instance of DccUserInfo.</value>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.DccChatSession.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.DccChatSession.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.DccChatSession.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.DccChatSession.ToString" access="Public" contract="Override" returnType="System.String">
            <documentation>
              <summary>
            Summary information about this session.
            </summary>
              <returns>Simple information about this session in human readable format.</returns>
            </documentation>
          </method>
          <method name="SendMessage" id="M:Sharkbite.Irc.DccChatSession.SendMessage(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send a line of text to the remote user. There is no fixed
            limit to message size but they should not be too long.
            </summary>
              <param name="text">The text. It need not have a 
            newline at the end since one will automatically appended..</param>
            </documentation>
            <parameter name="text" type="System.String" />
          </method>
          <method name="Close" id="M:Sharkbite.Irc.DccChatSession.Close" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Close the chat session.
            </summary>
            </documentation>
          </method>
          <method name="Accept" id="M:Sharkbite.Irc.DccChatSession.Accept(Sharkbite.Irc.DccUserInfo)" access="Public" contract="Static" returnType="Sharkbite.Irc.DccChatSession">
            <documentation>
              <summary>
            When another a remote user has sent a chat request, this
            method is called to accept the request and
            start a chat session with that user.
            </summary>
              <remarks>
            This method should be called from within a try/catch block 
            because there are many things that could prevent this
            connection attempt from succeeding.
            </remarks>
              <param name="dccUserInfo">A collection of information about the remote user.</param>
              <returns>The DccChatSession instance for this session.</returns>
            </documentation>
            <parameter name="dccUserInfo" type="Sharkbite.Irc.DccUserInfo" />
          </method>
          <method name="Request" id="M:Sharkbite.Irc.DccChatSession.Request(Sharkbite.Irc.DccUserInfo,System.String,System.Int32)" access="Public" contract="Static" overload="1" returnType="Sharkbite.Irc.DccChatSession">
            <documentation>
              <summary>
            Send a DCC Chat request to a remote user and use the default
            timeout period of 30 seconds.
            </summary>
              <remarks>
                <para>If the user does not respond within the timeout period the DccChatSession 
            will stop listening for a connection. The sesssion instance created then becomes
            invalid. This methods must be called again and a new instance created in order to
            initiate a try again.
            </para>
                <para>
            This method should be called from within a try/catch block 
            in case there are socket errors.
            </para>
              </remarks>
              <param name="dccUserInfo">A collection of information about the remote user.</param>
              <param name="listenIPAddress">The IP address of the local machine in dot 
            quad format (e.g. 192.168.0.25). This is the address that will be sent to the 
            remote user. The IP address of the NAT machine must be used if the
            client is behind a a NAT/Firewall system. </param>
              <param name="listenPort">The TCP/IP port to listen on</param>
            </documentation>
            <parameter name="dccUserInfo" type="Sharkbite.Irc.DccUserInfo" />
            <parameter name="listenIPAddress" type="System.String" />
            <parameter name="listenPort" type="System.Int32" />
          </method>
          <method name="Request" id="M:Sharkbite.Irc.DccChatSession.Request(Sharkbite.Irc.DccUserInfo,System.String,System.Int32,System.Int64)" access="Public" contract="Static" overload="2" returnType="Sharkbite.Irc.DccChatSession">
            <documentation>
              <summary>
            Send a DCC Chat request to a remote user and wait for a connection
            using timeout period specified.
            </summary>
              <remarks>
                <para>If the user does not respond within the timeout period the DccChatSession 
            will stop listening for a connection. The sesssion instance created then becomes
            invalid. This methods must be called again and a new instance created in order to
            initiate a try again.
            </para>
                <para>
            This method should be called from within a try/catch block 
            in case there are socket errors.
            </para>
              </remarks>
              <param name="dccUserInfo">A collection of information about the remote user.</param>
              <param name="listenIPAddress">The IP address that will be sent to the remote user. It must
            be in dotted quad format (i.e. 192.168.0.2). If the client is behind a NAT system then
            this should be the address of that system and not the local host.</param>
              <param name="listenPort">The TCP/IP port to listen on</param>
              <param name="timeout">How long to wait for a response in milliseconds.
            A value of zero will disable the timeout.</param>
            </documentation>
            <parameter name="dccUserInfo" type="Sharkbite.Irc.DccUserInfo" />
            <parameter name="listenIPAddress" type="System.String" />
            <parameter name="listenPort" type="System.Int32" />
            <parameter name="timeout" type="System.Int64" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.DccChatSession.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.DccChatSession.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="OnChatRequestTimeout" id="E:Sharkbite.Irc.DccChatSession.OnChatRequestTimeout" access="Public" contract="Normal" type="Sharkbite.Irc.ChatRequestTimeoutEventHandler" multicast="true">
            <documentation>
              <summary>
            The remote user did not respond to a Chat request
            within the timeout period.
            </summary>
            </documentation>
          </event>
          <event name="OnChatSessionOpened" id="E:Sharkbite.Irc.DccChatSession.OnChatSessionOpened" access="Public" contract="Normal" type="Sharkbite.Irc.ChatSessionOpenedEventHandler" multicast="true">
            <documentation>
              <summary>
            A chat session has been opened. This is called when a session
            has been opened regardless of who initiated the session.
            </summary>
            </documentation>
          </event>
          <event name="OnChatSessionClosed" id="E:Sharkbite.Irc.DccChatSession.OnChatSessionClosed" access="Public" contract="Normal" type="Sharkbite.Irc.ChatSessionClosedEventHandler" multicast="true">
            <documentation>
              <summary>
            The chat session has been closed by either participant.
            </summary>
            </documentation>
          </event>
          <event name="OnChatMessageReceived" id="E:Sharkbite.Irc.DccChatSession.OnChatMessageReceived" access="Public" contract="Normal" type="Sharkbite.Irc.ChatMessageReceivedEventHandler" multicast="true">
            <documentation>
              <summary>
            Text from the remote user was received
            </summary>
            </documentation>
          </event>
        </class>
        <class name="DccFileInfo" id="T:Sharkbite.Irc.DccFileInfo" access="Public" sealed="true">
          <documentation>
            <summary>
            Manages the information about the file being
            transfered. 
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:Sharkbite.Irc.DccFileInfo.#ctor(System.IO.FileInfo,System.Int64)" access="Public" overload="1">
            <documentation>
              <summary>
            Create a new instance using information sent from the remote user
            in his DCC Send message.
            </summary>
              <param name="fileInfo">The file being received</param>
              <param name="completeFileSize">The size of the file being received as specified in the DCC Send
            request.</param>
            </documentation>
            <parameter name="fileInfo" type="System.IO.FileInfo" />
            <parameter name="completeFileSize" type="System.Int64" />
          </constructor>
          <constructor name=".ctor" id="M:Sharkbite.Irc.DccFileInfo.#ctor(System.IO.FileInfo)" access="Public" overload="2">
            <documentation>
              <summary>
            Create a new instance using the file information from a local file
            to be sent to a remote user.
            </summary>
              <param name="fileInfo">The local file being sent</param>
              <exception cref="T:System.ArgumentException">If the file does not already exist.</exception>
            </documentation>
            <parameter name="fileInfo" type="System.IO.FileInfo" />
          </constructor>
          <constructor name=".ctor" id="M:Sharkbite.Irc.DccFileInfo.#ctor(System.String)" access="Public" overload="3">
            <documentation>
              <summary>
            Create a new instance using the file information from a local file
            to be sent to a remote user.
            </summary>
              <param name="fileName">The full pathname of local file being sent</param>
              <exception cref="T:System.ArgumentException">If the file does not already exist.</exception>
            </documentation>
            <parameter name="fileName" type="System.String" />
          </constructor>
          <property name="FileStartingPosition" id="P:Sharkbite.Irc.DccFileInfo.FileStartingPosition" access="Public" type="System.Int64" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            Where to start reading or writing a file. Used during DCC Resume actions.
            </summary>
              <value>A read-only long indicating the location within the file.</value>
            </documentation>
          </property>
          <property name="BytesTransfered" id="P:Sharkbite.Irc.DccFileInfo.BytesTransfered" access="Public" type="System.Int64" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The number of bytes sent or received so far. This Property
            is thread safe.
            </summary>
              <value>A read-only long.</value>
            </documentation>
          </property>
          <property name="CompleteFileSize" id="P:Sharkbite.Irc.DccFileInfo.CompleteFileSize" access="Public" type="System.Int64" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The length of the file. This number is either the actual size
            of a file being sent or the number sent in the DCC SEND request.
            </summary>
              <value>A read-only long.</value>
            </documentation>
          </property>
          <property name="DccFileName" id="P:Sharkbite.Irc.DccFileInfo.DccFileName" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The file's name with all spaces converted to underscores and
            without the path.
            </summary>
              <value>A read-only string.</value>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.DccFileInfo.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.DccFileInfo.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.DccFileInfo.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.DccFileInfo.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.DccFileInfo.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.DccFileInfo.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="DccFileSession" id="T:Sharkbite.Irc.DccFileSession" access="Public" sealed="true">
          <documentation>
            <summary>
            Allows the user to send and receive files
            from other IRC users.
            </summary>
          </documentation>
          <property name="ID" id="P:Sharkbite.Irc.DccFileSession.ID" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            A unique identifier for this session.
            </summary>
              <value>Uses the TCP/IP port prefixed by an 'S' if this
            session is serving the file or a 'C' if this session is receiving the
            file.</value>
            </documentation>
          </property>
          <property name="User" id="P:Sharkbite.Irc.DccFileSession.User" access="Public" type="Sharkbite.Irc.DccUserInfo" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The DccUserInfo object associated with this DccFileSession.
            </summary>
            </documentation>
          </property>
          <property name="File" id="P:Sharkbite.Irc.DccFileSession.File" access="Public" type="Sharkbite.Irc.DccFileInfo" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The DccFileInfo object associated with this DccFileSession.
            </summary>
            </documentation>
          </property>
          <property name="ClientInfo" id="P:Sharkbite.Irc.DccFileSession.ClientInfo" access="Public" type="Sharkbite.Irc.DccUserInfo" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The information about the remote user.
            </summary>
              <value>A read only instance of DccUserInfo.</value>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.DccFileSession.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.DccFileSession.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.DccFileSession.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.DccFileSession.ToString" access="Public" contract="Override" returnType="System.String">
            <documentation>
              <summary>
            Summary information about this session.
            </summary>
              <returns>Simple information about this session in human readable format.</returns>
            </documentation>
          </method>
          <method name="Stop" id="M:Sharkbite.Irc.DccFileSession.Stop" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Stop the file transfer.
            </summary>
            </documentation>
          </method>
          <method name="Get" id="M:Sharkbite.Irc.DccFileSession.Get(Sharkbite.Irc.Connection,System.String,System.String,System.Boolean)" access="Public" contract="Static" returnType="System.Void">
            <documentation>
              <summary>
            Ask a remote user to send a file. The remote user may or may not respond
            and there is no fixed time within which he must respond. A response will
            come in the form of a DCC Send request.
            </summary>
              <param name="connection">The connection the remotes user is on.</param>
              <param name="nick">Who to send the request to.</param>
              <param name="fileName">The name of the file to have sent. This should
            not contain any spaces.</param>
              <param name="turbo">True to use send-ahead mode for transfers.</param>
            </documentation>
            <parameter name="connection" type="Sharkbite.Irc.Connection" />
            <parameter name="nick" type="System.String" />
            <parameter name="fileName" type="System.String" />
            <parameter name="turbo" type="System.Boolean" />
          </method>
          <method name="Send" id="M:Sharkbite.Irc.DccFileSession.Send(Sharkbite.Irc.DccUserInfo,System.String,System.Int32,Sharkbite.Irc.DccFileInfo,System.Int32,System.Boolean)" access="Public" contract="Static" returnType="Sharkbite.Irc.DccFileSession">
            <documentation>
              <summary>
            Attempt to send a file to a remote user. Start listening
            on the given port and address. If the remote user does not accept
            the offer within the timeout period the the session
            will be closed.
            </summary>
              <remarks>
            This method should be called from within a try/catch block 
            in case there are socket errors. This methods will also automatically 
            handle a Resume if the remote client requests it.
            </remarks>
              <param name="dccUserInfo">The information about the remote user.</param>
              <param name="listenIPAddress">The IP address of the local machine in dot 
            quad format (e.g. 192.168.0.25). This is the address that will be sent to the 
            remote user. The IP address of the NAT machine must be used if the
            client is behind a NAT/Firewall system. </param>
              <param name="listenPort">The port that the session will listen on.</param>
              <param name="dccFileInfo">The file to be sent. If the file name has spaces in it
            they will be replaced with underscores when the name is sent.</param>
              <param name="bufferSize">The size of the send buffer. Generally should
            be between 4k and 32k.</param>
              <param name="turbo">True to use send-ahead mode for transfers.</param>
              <returns>A unique session instance for this file and remote user.</returns>
              <exception cref="T:System.ArgumentException">If the listen port is already in use.</exception>
            </documentation>
            <parameter name="dccUserInfo" type="Sharkbite.Irc.DccUserInfo" />
            <parameter name="listenIPAddress" type="System.String" />
            <parameter name="listenPort" type="System.Int32" />
            <parameter name="dccFileInfo" type="Sharkbite.Irc.DccFileInfo" />
            <parameter name="bufferSize" type="System.Int32" />
            <parameter name="turbo" type="System.Boolean" />
          </method>
          <method name="Receive" id="M:Sharkbite.Irc.DccFileSession.Receive(Sharkbite.Irc.DccUserInfo,Sharkbite.Irc.DccFileInfo,System.Boolean)" access="Public" contract="Static" returnType="Sharkbite.Irc.DccFileSession">
            <documentation>
              <summary>
            Another user has offered to send a file. This method should be called
            to accept the offer and save the file to the give location. The parameters
            needed to call this method are provided by the <c>OnDccFileTransferRequest()</c>
            event.
            </summary>
              <remarks>
            This method should be called from within a try/catch block 
            in case it is unable to connect or there are other socket
            errors.
            </remarks>
              <param name="dccUserInfo">Information on the remote user.</param>
              <param name="dccFileInfo">The local file that will hold the data being sent. If the file 
            is the result of a previous incomplete download the the attempt will be made
            to resume where the previous left off.</param>
              <param name="turbo">Will the send ahead protocol be used.</param>
              <returns>A unique session instance for this file and remote user.</returns>
              <exception cref="T:System.ArgumentException">If the listen port is already in use.</exception>
            </documentation>
            <parameter name="dccUserInfo" type="Sharkbite.Irc.DccUserInfo" />
            <parameter name="dccFileInfo" type="Sharkbite.Irc.DccFileInfo" />
            <parameter name="turbo" type="System.Boolean" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.DccFileSession.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.DccFileSession.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="OnFileTransferTimeout" id="E:Sharkbite.Irc.DccFileSession.OnFileTransferTimeout" access="Public" contract="Normal" type="Sharkbite.Irc.FileTransferTimeoutEventHandler" multicast="true">
            <documentation>
              <summary>
            The remote user did not accept the file within the timeout period.
            </summary>
            </documentation>
          </event>
          <event name="OnFileTransferStarted" id="E:Sharkbite.Irc.DccFileSession.OnFileTransferStarted" access="Public" contract="Normal" type="Sharkbite.Irc.FileTransferStartedEventHandler" multicast="true">
            <documentation>
              <summary>
            The file transfer connection is open and data will be sent or
            received.
            </summary>
            </documentation>
          </event>
          <event name="OnFileTransferInterrupted" id="E:Sharkbite.Irc.DccFileSession.OnFileTransferInterrupted" access="Public" contract="Normal" type="Sharkbite.Irc.FileTransferInterruptedEventHandler" multicast="true">
            <documentation>
              <summary>
            The file transfer was interrupted and did not complete.
            </summary>
            </documentation>
          </event>
          <event name="OnFileTransferCompleted" id="E:Sharkbite.Irc.DccFileSession.OnFileTransferCompleted" access="Public" contract="Normal" type="Sharkbite.Irc.FileTransferCompletedEventHandler" multicast="true">
            <documentation>
              <summary>
            The file transfer was successful.
            </summary>
            </documentation>
          </event>
          <event name="OnFileTransferProgress" id="E:Sharkbite.Irc.DccFileSession.OnFileTransferProgress" access="Public" contract="Normal" type="Sharkbite.Irc.FileTransferProgressEventHandler" multicast="true">
            <documentation>
              <summary>
            How much of the file has been sent or received so far.
            </summary>
            </documentation>
          </event>
        </class>
        <class name="DccFileSessionManager" id="T:Sharkbite.Irc.DccFileSessionManager" access="Public" sealed="true">
          <documentation>
            <summary>
            This class checks each file session to see if it has not 
            had any activity within the timeout period so that
            inactive sessions can be closed.
            </summary>
          </documentation>
          <property name="DefaultInstance" id="P:Sharkbite.Irc.DccFileSessionManager.DefaultInstance" access="Public" type="Sharkbite.Irc.DccFileSessionManager" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            Returns the singleton instance.
            </summary>
            </documentation>
          </property>
          <property name="TimeoutPeriod" id="P:Sharkbite.Irc.DccFileSessionManager.TimeoutPeriod" access="Public" type="System.Int64" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            Timeout period in milliseconds
            </summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.DccFileSessionManager.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.DccFileSessionManager.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.DccFileSessionManager.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.DccFileSessionManager.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.DccFileSessionManager.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.DccFileSessionManager.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="DccListener" id="T:Sharkbite.Irc.DccListener" access="Public" sealed="true">
          <documentation>
            <summary>
            DccListener listens for incoming DCC requests on any Connection in which
            DCC is enabled. This class follows the singleton pattern and there so there
            is only a single instance which listens to all connections.
            </summary>
          </documentation>
          <property name="DefaultInstance" id="P:Sharkbite.Irc.DccListener.DefaultInstance" access="Public" type="Sharkbite.Irc.DccListener" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            Gets the singleton instance.
            </summary>
              <returns>The instance of DccListener</returns>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.DccListener.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.DccListener.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.DccListener.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.DccListener.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="IsDccRequest" id="M:Sharkbite.Irc.DccListener.IsDccRequest(System.String)" access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>
            Test if the message contains a DCC request.
            </summary>
              <param name="message">The raw message from the IRC server</param>
              <returns>True if this is a DCC request.</returns>
            </documentation>
            <parameter name="message" type="System.String" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.DccListener.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.DccListener.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="OnDccChatRequest" id="E:Sharkbite.Irc.DccListener.OnDccChatRequest" access="Public" contract="Normal" type="Sharkbite.Irc.DccChatRequestEventHandler" multicast="true">
            <documentation>
              <summary>
            A user from any Connection has sent a request to open a DCC
            chat session.
            </summary>
            </documentation>
          </event>
          <event name="OnDccSendRequest" id="E:Sharkbite.Irc.DccListener.OnDccSendRequest" access="Public" contract="Normal" type="Sharkbite.Irc.DccSendRequestEventHandler" multicast="true">
            <documentation>
              <summary>
            A remote user has sent a request to send a file.
            </summary>
            </documentation>
          </event>
          <event name="OnDccGetRequest" id="E:Sharkbite.Irc.DccListener.OnDccGetRequest" access="Public" contract="Normal" type="Sharkbite.Irc.DccGetRequestEventHandler" multicast="true">
            <documentation>
              <summary>
            A remote user requests that he be sent a file.
            </summary>
            </documentation>
          </event>
        </class>
        <class name="UserInfo" id="T:Sharkbite.Irc.UserInfo" access="Public">
          <documentation>
            <summary>
            A convenient holder of user information. Instances of this class
            are created internally.
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:Sharkbite.Irc.UserInfo.#ctor(System.String,System.String,System.String)" access="Public" overload="1">
            <documentation>
              <summary>
            Create a new UserInfo and set all its values.
            </summary>
            </documentation>
            <parameter name="nick" type="System.String" />
            <parameter name="name" type="System.String" />
            <parameter name="host" type="System.String" />
          </constructor>
          <property name="Nick" id="P:Sharkbite.Irc.UserInfo.Nick" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            An IRC user's nick name.
            </summary>
            </documentation>
          </property>
          <property name="User" id="P:Sharkbite.Irc.UserInfo.User" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            An IRC user's system username.
            </summary>
            </documentation>
          </property>
          <property name="Hostname" id="P:Sharkbite.Irc.UserInfo.Hostname" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The hostname of the IRC user's machine.
            </summary>
            </documentation>
          </property>
          <property name="Empty" id="P:Sharkbite.Irc.UserInfo.Empty" access="Public" type="Sharkbite.Irc.UserInfo" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            A singleton blank instance of UserInfo used when an instance is required
            by a method signature but no infomation is available, e.g. the last reply
            from a Who request.
            </summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.UserInfo.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.UserInfo.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.UserInfo.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.UserInfo.ToString" access="Public" contract="Override" returnType="System.String">
            <documentation>
              <summary>
            A string representation of this object which
            shows all its values.
            </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.UserInfo.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.UserInfo.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="DccUserInfo" id="T:Sharkbite.Irc.DccUserInfo" access="Public" sealed="true" baseType="UserInfo">
          <documentation>
            <summary>
            This class encapsulates all the information known
            about a remote user in the context of a DCC session.
            </summary>
          </documentation>
          <base name="UserInfo" id="T:Sharkbite.Irc.UserInfo" type="Sharkbite.Irc.UserInfo" />
          <constructor name=".ctor" id="M:Sharkbite.Irc.DccUserInfo.#ctor(Sharkbite.Irc.Connection,System.String)" access="Public" overload="1">
            <documentation>
              <summary>
            Create an instance with minimal information.
            </summary>
              <param name="connection">The IRC server connection which the remote user
            is one.</param>
              <param name="nick">The remote user's nick.</param>
            </documentation>
            <parameter name="connection" type="Sharkbite.Irc.Connection" />
            <parameter name="nick" type="System.String" />
          </constructor>
          <property name="RemoteAddress" id="P:Sharkbite.Irc.DccUserInfo.RemoteAddress" access="Public" type="System.Net.IPAddress" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            Read only property that returns the
            IP address of the remote user.
            </summary>
              <value>An instance of IPAddress or null if the session
            has not been opened.</value>
            </documentation>
          </property>
          <property name="Port" id="P:Sharkbite.Irc.DccUserInfo.Port" access="Public" type="System.Int32" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            Read only property that returns the port
            of the connection to the remote user. 
            </summary>
              <remarks>
            This will be a listen port if the remote user was
            the initiator of the session or else it is simply a client port.
            </remarks>
              <value>The port as an integer. Will return -1 if the session 
            has not yet been opened.</value>
            </documentation>
          </property>
          <property name="RemoteEndPoint" id="P:Sharkbite.Irc.DccUserInfo.RemoteEndPoint" access="Public" type="System.Net.IPEndPoint" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The remote users TCP/IP information.
            </summary>
              <value>A read-only instance of IPEndPoint</value>
            </documentation>
          </property>
          <property name="Connection" id="P:Sharkbite.Irc.DccUserInfo.Connection" access="Public" type="Sharkbite.Irc.Connection" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The connection representing on which IRC server
            the remote user can be found.
            </summary>
              <value>A read-only instance of Connection</value>
            </documentation>
          </property>
          <property name="Nick" id="P:Sharkbite.Irc.DccUserInfo.Nick" access="Public" declaringType="Sharkbite.Irc.UserInfo" type="System.String" contract="Normal" get="true" set="false" />
          <property name="User" id="P:Sharkbite.Irc.DccUserInfo.User" access="Public" declaringType="Sharkbite.Irc.UserInfo" type="System.String" contract="Normal" get="true" set="false" />
          <property name="Hostname" id="P:Sharkbite.Irc.DccUserInfo.Hostname" access="Public" declaringType="Sharkbite.Irc.UserInfo" type="System.String" contract="Normal" get="true" set="false" />
          <method name="Finalize" id="M:Sharkbite.Irc.DccUserInfo.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.DccUserInfo.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.DccUserInfo.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.DccUserInfo.ToString" access="Public" contract="Override" returnType="System.String">
            <documentation>
              <summary>
            A friendly representation of this object.
            </summary>
              <returns>The remote's user nick and his IP address, e.g. Nick@192.168.0.23</returns>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.DccUserInfo.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.DccUserInfo.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="DccUtil" id="T:Sharkbite.Irc.DccUtil" access="Public" sealed="true">
          <documentation>
            <summary>
            Utility methods needed to handle DCC requests.
            </summary>
          </documentation>
          <method name="Finalize" id="M:Sharkbite.Irc.DccUtil.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.DccUtil.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.DccUtil.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.DccUtil.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="LocalHost" id="M:Sharkbite.Irc.DccUtil.LocalHost" access="Public" contract="Static" returnType="System.Net.IPAddress">
            <documentation>
              <summary>
            Get the IPAddress object for the local machine.
            </summary>
              <returns>An instance of IPAddress.</returns>
            </documentation>
          </method>
          <method name="DccBytesReceivedFormat" id="M:Sharkbite.Irc.DccUtil.DccBytesReceivedFormat(System.Int64)" access="Public" contract="Static" returnType="System.Byte[]">
            <documentation>
              <summary>
            Convert a signed long into an unsigned int in
            network byte order.
            </summary>
              <param name="bytesReceived">The number of bytes received as a long.</param>
              <returns>An unsigned int as a 4 byte array.</returns>
            </documentation>
            <parameter name="bytesReceived" type="System.Int64" />
          </method>
          <method name="DccBytesToLong" id="M:Sharkbite.Irc.DccUtil.DccBytesToLong(System.Byte[])" access="Public" contract="Static" returnType="System.Int64">
            <documentation>
              <summary>
            Convert the 4 byte current DCC position
            into a host order long.
            </summary>
              <param name="received">The 4 byte unsigned integer.</param>
              <returns>A long</returns>
            </documentation>
            <parameter name="received" type="System.Byte[]" />
          </method>
          <method name="IpAddressToLong" id="M:Sharkbite.Irc.DccUtil.IpAddressToLong(System.Net.IPAddress)" access="Public" contract="Static" returnType="System.String">
            <documentation>
              <summary>
            Convert an IP address into the network order
            long required by the DCC protocol.
            </summary>
              <param name="ipAddress">A valid IP address</param>
              <returns>The long in string form</returns>
            </documentation>
            <parameter name="ipAddress" type="System.Net.IPAddress" />
          </method>
          <method name="LongToIpAddress" id="M:Sharkbite.Irc.DccUtil.LongToIpAddress(System.String)" access="Public" contract="Static" returnType="System.Net.IPAddress">
            <documentation>
              <summary>
            Convert the network order address received from a DCC
            request into an IP address.
            </summary>
              <param name="networkOrder">The address long in string form.</param>
              <returns>An IpAddress object</returns>
            </documentation>
            <parameter name="networkOrder" type="System.String" />
          </method>
          <method name="SpacesToUnderscores" id="M:Sharkbite.Irc.DccUtil.SpacesToUnderscores(System.String)" access="Public" contract="Static" returnType="System.String">
            <documentation>
              <summary>
            Convert the spaces in a file name to underscores.
            </summary>
              <param name="fileName">The file name.</param>
              <returns>Underscored string.</returns>
            </documentation>
            <parameter name="fileName" type="System.String" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.DccUtil.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.DccUtil.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Connection" id="T:Sharkbite.Irc.Connection" access="Public" sealed="true">
          <documentation>
            <summary>
            This class manages the connection to the IRC server and provides
            access to all the objects needed to send and receive messages.
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:Sharkbite.Irc.Connection.#ctor(Sharkbite.Irc.ConnectionArgs,System.Boolean,System.Boolean)" access="Public" overload="1">
            <documentation>
              <summary>
            Prepare a connection to an IRC server but do not open it.
            </summary>
              <param name="args">The set of information need to connect to an IRC server</param>
              <param name="enableCtcp">True if this Connection should support CTCP.</param>
              <param name="enableDcc">True if this Connection should support DCC.</param>
            </documentation>
            <parameter name="args" type="Sharkbite.Irc.ConnectionArgs" />
            <parameter name="enableCtcp" type="System.Boolean" />
            <parameter name="enableDcc" type="System.Boolean" />
          </constructor>
          <property name="Registered" id="P:Sharkbite.Irc.Connection.Registered" access="Public" type="System.Boolean" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            A read-only property indicating whether the connection 
            has been opened with the IRC server and the 
            client has been successfully registered.
            </summary>
              <value>True if the client is connected and registered.</value>
            </documentation>
          </property>
          <property name="Connected" id="P:Sharkbite.Irc.Connection.Connected" access="Public" type="System.Boolean" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            A read-only property indicating whether a connection 
            has been opened with the IRC server (but not whether 
            registration has succeeded).
            </summary>
              <value>True if the client is connected.</value>
            </documentation>
          </property>
          <property name="HandleNickTaken" id="P:Sharkbite.Irc.Connection.HandleNickTaken" access="Public" type="System.Boolean" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            By default the connection itself will handle the case
            where, while attempting to register the client's nick
            is already in use. It does this by simply appending
            2 random numbers to the end of the nick. 
            </summary>
              <remarks>
            The NickError event is shows that the nick collision has happened
            and it is fixed by calling Sender's Register() method passing
            in the replacement nickname.
            </remarks>
              <value>True if the connection should handle this case and
            false if the client will handle it itself.</value>
            </documentation>
          </property>
          <property name="Name" id="P:Sharkbite.Irc.Connection.Name" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            A user friendly name of this Connection in the form 'nick@host'
            </summary>
              <value>Read only string</value>
            </documentation>
          </property>
          <property name="EnableCtcp" id="P:Sharkbite.Irc.Connection.EnableCtcp" access="Public" type="System.Boolean" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            Whether Ctcp commands should be processed and if
            Ctcp events will be raised.
            </summary>
              <value>True will enable the CTCP sender and listener and
            false will cause their property calls to return null.</value>
            </documentation>
          </property>
          <property name="EnableDcc" id="P:Sharkbite.Irc.Connection.EnableDcc" access="Public" type="System.Boolean" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            Whether DCC requests should be processed or ignored 
            by this Connection. Since the DccListener is a singleton and
            shared by all Connections, listeners to DccListener events should
            be manually removed when no longer needed.
            </summary>
              <value>True to process DCC requests.</value>
            </documentation>
          </property>
          <property name="CtcpResponder" id="P:Sharkbite.Irc.Connection.CtcpResponder" access="Public" type="Sharkbite.Irc.CtcpResponder" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            Sets an automatic responder to Ctcp queries.
            </summary>
              <value>Once this is set it can be removed by setting it to null.</value>
            </documentation>
          </property>
          <property name="IdleTime" id="P:Sharkbite.Irc.Connection.IdleTime" access="Public" type="System.TimeSpan" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The amount of time that has passed since the client
            sent a command to the IRC server.
            </summary>
              <value>Read only TimeSpan</value>
            </documentation>
          </property>
          <property name="Sender" id="P:Sharkbite.Irc.Connection.Sender" access="Public" type="Sharkbite.Irc.Sender" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The object used to send commands to the IRC server.
            </summary>
              <value>Read-only Sender.</value>
            </documentation>
          </property>
          <property name="Listener" id="P:Sharkbite.Irc.Connection.Listener" access="Public" type="Sharkbite.Irc.Listener" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The object that parses messages and notifies the appropriate delegate.
            </summary>
              <value>Read only Listener.</value>
            </documentation>
          </property>
          <property name="CtcpSender" id="P:Sharkbite.Irc.Connection.CtcpSender" access="Public" type="Sharkbite.Irc.CtcpSender" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The object used to send CTCP commands to the IRC server.
            </summary>
              <value>Read only CtcpSender. Null if CtcpEnabled is false.</value>
            </documentation>
          </property>
          <property name="CtcpListener" id="P:Sharkbite.Irc.Connection.CtcpListener" access="Public" type="Sharkbite.Irc.CtcpListener" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The object that parses CTCP messages and notifies the appropriate delegate.
            </summary>
              <value>Read only CtcpListener. Null if CtcpEnabled is false.</value>
            </documentation>
          </property>
          <property name="ConnectionData" id="P:Sharkbite.Irc.Connection.ConnectionData" access="Public" type="Sharkbite.Irc.ConnectionArgs" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The collection of data used to establish this connection.
            </summary>
              <value>Read only ConnectionArgs.</value>
            </documentation>
          </property>
          <property name="MaxNickLength" id="P:Sharkbite.Irc.Connection.MaxNickLength" access="Public" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            The maximum number of characters a nick may contain
            for this particular connection/server. This value defaults
            to the RFC2812 set length of 9 but it is automatically adjusted
            when the user registers with the connection.
            </summary>
              <value>The number of characters as an int.</value>
            </documentation>
          </property>
          <property name="ServerProperties" id="P:Sharkbite.Irc.Connection.ServerProperties" access="Public" type="Sharkbite.Irc.ServerProperties" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            A read-only collection of string key/value pairs
            representing IRC server proprties.
            </summary>
              <value>This connection's ServerProperties obejct or null if it 
            has not been created.</value>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.Connection.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.Connection.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.Connection.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.Connection.ToString" access="Public" contract="Override" returnType="System.String">
            <documentation>
              <summary>
            A friendly name for this connection.
            </summary>
              <returns>The Name property</returns>
            </documentation>
          </method>
          <method name="Connect" id="M:Sharkbite.Irc.Connection.Connect" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Connect to the IRC server and start listening for messages
            on a new thread.
            </summary>
              <exception cref="T:System.Net.Sockets.SocketException">If a connection cannot be established with the IRC server</exception>
            </documentation>
          </method>
          <method name="Disconnect" id="M:Sharkbite.Irc.Connection.Disconnect(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Sends a 'Quit' message to the server, closes the connection,
            and stops the listening thread. 
            </summary>
              <remarks>The state of the connection will remain the same even after a disconnect,
            so the connection can be reopened. All the event handlers will remain registered.</remarks>
              <param name="reason">A message displayed to IRC users upon disconnect.</param>
            </documentation>
            <parameter name="reason" type="System.String" />
          </method>
          <method name="AddParser" id="M:Sharkbite.Irc.Connection.AddParser(Sharkbite.Irc.IParser)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Adds a parser class to a list of custom parsers. 
            Any number can be added. The custom parsers
            will be tested using <c>CanParse()</c> before
            the default parsers. The last parser to be added
            will be the first to process a message.
            </summary>
              <param name="parser">Any class that implements IParser.</param>
            </documentation>
            <parameter name="parser" type="Sharkbite.Irc.IParser" />
          </method>
          <method name="RemoveParser" id="M:Sharkbite.Irc.Connection.RemoveParser(Sharkbite.Irc.IParser)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Remove a custom parser class.
            </summary>
              <param name="parser">Any class that implements IParser.</param>
            </documentation>
            <parameter name="parser" type="Sharkbite.Irc.IParser" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.Connection.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.Connection.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="OnRawMessageReceived" id="E:Sharkbite.Irc.Connection.OnRawMessageReceived" access="Public" contract="Normal" type="Sharkbite.Irc.RawMessageReceivedEventHandler" multicast="true">
            <documentation>
              <summary>
            Receive all the messages, unparsed, sent by the IRC server. This is not
            normally needed but provided for those who are interested.
            </summary>
            </documentation>
          </event>
          <event name="OnRawMessageSent" id="E:Sharkbite.Irc.Connection.OnRawMessageSent" access="Public" contract="Normal" type="Sharkbite.Irc.RawMessageSentEventHandler" multicast="true">
            <documentation>
              <summary>
            Receive all the raw messages sent to the IRC from this connection
            </summary>
            </documentation>
          </event>
        </class>
        <class name="Identd" id="T:Sharkbite.Irc.Identd" access="Public" sealed="true">
          <documentation>
            <summary>
            An Ident daemon is still used by some IRC networks for 
            authentication. It is a simple service which when queried
            by a remote system returns a username. The server is controlled via static
            methods all of which are Thread safe.
            </summary>
          </documentation>
          <method name="Finalize" id="M:Sharkbite.Irc.Identd.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.Identd.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.Identd.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.Identd.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Start" id="M:Sharkbite.Irc.Identd.Start(System.String)" access="Public" contract="Static" returnType="System.Void">
            <documentation>
              <summary>
            The Identd server will start listening for queries
            in its own thread. It can be stopped by calling
            <see cref="M:Sharkbite.Irc.Identd.Stop" />.
            </summary>
              <param name="userName">Should be the same username as the one used
            in the ConnectionArgs object when establishing a connection.</param>
              <exception cref="T:System.Exception">If the server has already been started.</exception>
            </documentation>
            <parameter name="userName" type="System.String" />
          </method>
          <method name="IsRunning" id="M:Sharkbite.Irc.Identd.IsRunning" access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>
            Check if the Identd server is running
            </summary>
              <returns>True if it is running</returns>
            </documentation>
          </method>
          <method name="Stop" id="M:Sharkbite.Irc.Identd.Stop" access="Public" contract="Static" returnType="System.Void">
            <documentation>
              <summary>
            Stop the Identd server and close the thread.
            </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.Identd.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.Identd.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Listener" id="T:Sharkbite.Irc.Listener" access="Public" sealed="true">
          <documentation>
            <summary>
            This class parses messages received from the IRC server and
            raises the appropriate event. 
            </summary>
          </documentation>
          <constructor name=".ctor" id="M:Sharkbite.Irc.Listener.#ctor" access="Public">
            <documentation>
              <summary>
            Create an instance ready to parse
            incoming messages.
            </summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:Sharkbite.Irc.Listener.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.Listener.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.Listener.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.Listener.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.Listener.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.Listener.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <event name="OnReply" id="E:Sharkbite.Irc.Listener.OnReply" access="Public" contract="Normal" type="Sharkbite.Irc.ReplyEventHandler" multicast="true">
            <documentation>
              <summary>
            Messages that are not handled by other events and are not errors.
            </summary>
            </documentation>
          </event>
          <event name="OnError" id="E:Sharkbite.Irc.Listener.OnError" access="Public" contract="Normal" type="Sharkbite.Irc.ErrorMessageEventHandler" multicast="true">
            <documentation>
              <summary>
            Error messages from the IRC server.
            </summary>
            </documentation>
          </event>
          <event name="OnAway" id="E:Sharkbite.Irc.Listener.OnAway" access="Public" contract="Normal" type="Sharkbite.Irc.AwayEventHandler" multicast="true">
            <documentation>
              <summary>
            A <see cref="M:Sharkbite.Irc.Sender.PrivateNotice(System.String,System.String)" /> or <see cref="M:Sharkbite.Irc.Sender.PrivateMessage(System.String,System.String)" /> message was sent to someone who is away.
             </summary>
            </documentation>
          </event>
          <event name="OnInviteSent" id="E:Sharkbite.Irc.Listener.OnInviteSent" access="Public" contract="Normal" type="Sharkbite.Irc.InviteSentEventHandler" multicast="true">
            <documentation>
              <summary>
            An <see cref="M:Sharkbite.Irc.Sender.Invite(System.String,System.String)" /> message was successfully sent to another user. 
            </summary>
            </documentation>
          </event>
          <event name="OnNickError" id="E:Sharkbite.Irc.Listener.OnNickError" access="Public" contract="Normal" type="Sharkbite.Irc.NickErrorEventHandler" multicast="true">
            <documentation>
              <summary>
            The user tried to change his nick but it failed.
            </summary>
            </documentation>
          </event>
          <event name="OnPing" id="E:Sharkbite.Irc.Listener.OnPing" access="Public" contract="Normal" type="Sharkbite.Irc.PingEventHandler" multicast="true">
            <documentation>
              <summary>
            A server keep-alive message.
            </summary>
            </documentation>
          </event>
          <event name="OnRegistered" id="E:Sharkbite.Irc.Listener.OnRegistered" access="Public" contract="Normal" type="Sharkbite.Irc.RegisteredEventHandler" multicast="true">
            <documentation>
              <summary>
            Connection with the IRC server is open and registered.
            </summary>
            </documentation>
          </event>
          <event name="OnDisconnecting" id="E:Sharkbite.Irc.Listener.OnDisconnecting" access="Public" contract="Normal" type="Sharkbite.Irc.DisconnectingEventHandler" multicast="true">
            <documentation>
              <summary>
            This connection is about to be closed. 
            </summary>
            </documentation>
          </event>
          <event name="OnDisconnected" id="E:Sharkbite.Irc.Listener.OnDisconnected" access="Public" contract="Normal" type="Sharkbite.Irc.DisconnectedEventHandler" multicast="true">
            <documentation>
              <summary>
            This connection has been closed. 
            </summary>
            </documentation>
          </event>
          <event name="OnPublicNotice" id="E:Sharkbite.Irc.Listener.OnPublicNotice" access="Public" contract="Normal" type="Sharkbite.Irc.PublicNoticeEventHandler" multicast="true">
            <documentation>
              <summary>
            A Notice type message was sent to a channel.
            </summary>
            </documentation>
          </event>
          <event name="OnPrivateNotice" id="E:Sharkbite.Irc.Listener.OnPrivateNotice" access="Public" contract="Normal" type="Sharkbite.Irc.PrivateNoticeEventHandler" multicast="true">
            <documentation>
              <summary>
            A private Notice type message was sent to the user.
            </summary>
            </documentation>
          </event>
          <event name="OnJoin" id="E:Sharkbite.Irc.Listener.OnJoin" access="Public" contract="Normal" type="Sharkbite.Irc.JoinEventHandler" multicast="true">
            <documentation>
              <summary>
            Someone has joined a channel.
            </summary>
            </documentation>
          </event>
          <event name="OnPublic" id="E:Sharkbite.Irc.Listener.OnPublic" access="Public" contract="Normal" type="Sharkbite.Irc.PublicMessageEventHandler" multicast="true">
            <documentation>
              <summary>
            A public message was sent to a channel.
            </summary>
            </documentation>
          </event>
          <event name="OnAction" id="E:Sharkbite.Irc.Listener.OnAction" access="Public" contract="Normal" type="Sharkbite.Irc.ActionEventHandler" multicast="true">
            <documentation>
              <summary>
            An action message was sent to a channel.
            </summary>
            </documentation>
          </event>
          <event name="OnPrivateAction" id="E:Sharkbite.Irc.Listener.OnPrivateAction" access="Public" contract="Normal" type="Sharkbite.Irc.PrivateActionEventHandler" multicast="true">
            <documentation>
              <summary>
            A private action message was sent to the user.
            </summary>
            </documentation>
          </event>
          <event name="OnNick" id="E:Sharkbite.Irc.Listener.OnNick" access="Public" contract="Normal" type="Sharkbite.Irc.NickEventHandler" multicast="true">
            <documentation>
              <summary>
            A user changed his nickname.
            </summary>
            </documentation>
          </event>
          <event name="OnPrivate" id="E:Sharkbite.Irc.Listener.OnPrivate" access="Public" contract="Normal" type="Sharkbite.Irc.PrivateMessageEventHandler" multicast="true">
            <documentation>
              <summary>
            A private message was sent to the user.
            </summary>
            </documentation>
          </event>
          <event name="OnTopicChanged" id="E:Sharkbite.Irc.Listener.OnTopicChanged" access="Public" contract="Normal" type="Sharkbite.Irc.TopicEventHandler" multicast="true">
            <documentation>
              <summary>
            A channel's topic has changed.
            </summary>
            </documentation>
          </event>
          <event name="OnTopicRequest" id="E:Sharkbite.Irc.Listener.OnTopicRequest" access="Public" contract="Normal" type="Sharkbite.Irc.TopicRequestEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestTopic(System.String)" /> command.
            </summary>
            </documentation>
          </event>
          <event name="OnPart" id="E:Sharkbite.Irc.Listener.OnPart" access="Public" contract="Normal" type="Sharkbite.Irc.PartEventHandler" multicast="true">
            <documentation>
              <summary>
            Someone has left a channel. 
            </summary>
            </documentation>
          </event>
          <event name="OnQuit" id="E:Sharkbite.Irc.Listener.OnQuit" access="Public" contract="Normal" type="Sharkbite.Irc.QuitEventHandler" multicast="true">
            <documentation>
              <summary>
            Someone has quit IRC.
            </summary>
            </documentation>
          </event>
          <event name="OnInvite" id="E:Sharkbite.Irc.Listener.OnInvite" access="Public" contract="Normal" type="Sharkbite.Irc.InviteEventHandler" multicast="true">
            <documentation>
              <summary>
            The user has been invited to a channel.
            </summary>
            </documentation>
          </event>
          <event name="OnKick" id="E:Sharkbite.Irc.Listener.OnKick" access="Public" contract="Normal" type="Sharkbite.Irc.KickEventHandler" multicast="true">
            <documentation>
              <summary>
            Someone has been kicked from a channel. 
            </summary>
            </documentation>
          </event>
          <event name="OnNames" id="E:Sharkbite.Irc.Listener.OnNames" access="Public" contract="Normal" type="Sharkbite.Irc.NamesEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Names(System.String[])" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnList" id="E:Sharkbite.Irc.Listener.OnList" access="Public" contract="Normal" type="Sharkbite.Irc.ListEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.List(System.String[])" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnIson" id="E:Sharkbite.Irc.Listener.OnIson" access="Public" contract="Normal" type="Sharkbite.Irc.IsonEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Ison(System.String)" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnWho" id="E:Sharkbite.Irc.Listener.OnWho" access="Public" contract="Normal" type="Sharkbite.Irc.WhoEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Who(System.String,System.Boolean)" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnWhois" id="E:Sharkbite.Irc.Listener.OnWhois" access="Public" contract="Normal" type="Sharkbite.Irc.WhoisEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Whois(System.String)" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnWhowas" id="E:Sharkbite.Irc.Listener.OnWhowas" access="Public" contract="Normal" type="Sharkbite.Irc.WhowasEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Whowas(System.String)" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnUserModeChange" id="E:Sharkbite.Irc.Listener.OnUserModeChange" access="Public" contract="Normal" type="Sharkbite.Irc.UserModeChangeEventHandler" multicast="true">
            <documentation>
              <summary>
            Someone's user mode has changed.
            </summary>
            </documentation>
          </event>
          <event name="OnUserModeRequest" id="E:Sharkbite.Irc.Listener.OnUserModeRequest" access="Public" contract="Normal" type="Sharkbite.Irc.UserModeRequestEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestUserModes" /> command for this user.
            </summary>
            </documentation>
          </event>
          <event name="OnChannelModeRequest" id="E:Sharkbite.Irc.Listener.OnChannelModeRequest" access="Public" contract="Normal" type="Sharkbite.Irc.ChannelModeRequestEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestChannelModes(System.String)" /> command.
            </summary>
            </documentation>
          </event>
          <event name="OnChannelModeChange" id="E:Sharkbite.Irc.Listener.OnChannelModeChange" access="Public" contract="Normal" type="Sharkbite.Irc.ChannelModeChangeEventHandler" multicast="true">
            <documentation>
              <summary>
            A channel's mode has changed.
            </summary>
            </documentation>
          </event>
          <event name="OnChannelList" id="E:Sharkbite.Irc.Listener.OnChannelList" access="Public" contract="Normal" type="Sharkbite.Irc.ChannelListEventHandler" multicast="true">
            <documentation>
              <summary>
            Response to a <see cref="M:Sharkbite.Irc.Sender.RequestChannelList(System.String,Sharkbite.Irc.ChannelMode)" /> command.
            </summary>
            </documentation>
          </event>
          <event name="OnVersion" id="E:Sharkbite.Irc.Listener.OnVersion" access="Public" contract="Normal" type="Sharkbite.Irc.VersionEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Version" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnMotd" id="E:Sharkbite.Irc.Listener.OnMotd" access="Public" contract="Normal" type="Sharkbite.Irc.MotdEventHandler" multicast="true">
            <documentation>
              <summary>
            A server's 'Message of the Day'
            </summary>
            </documentation>
          </event>
          <event name="OnTime" id="E:Sharkbite.Irc.Listener.OnTime" access="Public" contract="Normal" type="Sharkbite.Irc.TimeEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Time" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnInfo" id="E:Sharkbite.Irc.Listener.OnInfo" access="Public" contract="Normal" type="Sharkbite.Irc.InfoEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to an <see cref="M:Sharkbite.Irc.Sender.Info" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnAdmin" id="E:Sharkbite.Irc.Listener.OnAdmin" access="Public" contract="Normal" type="Sharkbite.Irc.AdminEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to an <see cref="M:Sharkbite.Irc.Sender.Admin" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnLusers" id="E:Sharkbite.Irc.Listener.OnLusers" access="Public" contract="Normal" type="Sharkbite.Irc.LusersEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Lusers" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnLinks" id="E:Sharkbite.Irc.Listener.OnLinks" access="Public" contract="Normal" type="Sharkbite.Irc.LinksEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Links" /> request.
            </summary>
            </documentation>
          </event>
          <event name="OnStats" id="E:Sharkbite.Irc.Listener.OnStats" access="Public" contract="Normal" type="Sharkbite.Irc.StatsEventHandler" multicast="true">
            <documentation>
              <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Stats(Sharkbite.Irc.StatsQuery)" /> request.
            </summary>
            </documentation>
          </event>
        </class>
        <class name="NameGenerator" id="T:Sharkbite.Irc.NameGenerator" access="Public" sealed="true">
          <documentation>
            <summary>
            Generates random, made-up names. The names appear to be language neutral (sort of).
            </summary>
            <remarks>This is a port of the orginal Javascript written by John Ahlschwede, ahlschwede@hotmail.com</remarks>
          </documentation>
          <constructor name=".ctor" id="M:Sharkbite.Irc.NameGenerator.#ctor" access="Public">
            <documentation>
              <summary>
            Create an instance.
            </summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:Sharkbite.Irc.NameGenerator.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.NameGenerator.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.NameGenerator.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.NameGenerator.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="MakeName" id="M:Sharkbite.Irc.NameGenerator.MakeName" access="Public" contract="Normal" returnType="System.String">
            <documentation>
              <summary>
            Generates a name randomly using certain construction rules. The name
            will be different each time it is called.
            </summary>
              <returns>A name string.</returns>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.NameGenerator.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.NameGenerator.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Rfc2812Util" id="T:Sharkbite.Irc.Rfc2812Util" access="Public">
          <documentation>
            <summary>
            RFC 2812 Utility methods.
            </summary>
          </documentation>
          <method name="Finalize" id="M:Sharkbite.Irc.Rfc2812Util.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.Rfc2812Util.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.Rfc2812Util.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.Rfc2812Util.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="UserInfoFromString" id="M:Sharkbite.Irc.Rfc2812Util.UserInfoFromString(System.String)" access="Public" contract="Static" returnType="Sharkbite.Irc.UserInfo">
            <documentation>
              <summary>
            Converts the user string sent by the IRC server
            into a UserInfo object.
            </summary>
              <param name="fullUserName">The user in nick!user@host form.</param>
              <returns>A UserInfo object.</returns>
            </documentation>
            <parameter name="fullUserName" type="System.String" />
          </method>
          <method name="ParseUserInfoLine" id="M:Sharkbite.Irc.Rfc2812Util.ParseUserInfoLine(System.String)" access="Public" contract="Static" returnType="System.String[]">
            <documentation>
              <summary>
            Break up an IRC user string into its component
            parts. 
            </summary>
              <param name="fullUserName">The user in nick!user@host form</param>
              <returns>A string array with the first item being nick, then user, and then host.</returns>
            </documentation>
            <parameter name="fullUserName" type="System.String" />
          </method>
          <method name="IsValidChannelList" id="M:Sharkbite.Irc.Rfc2812Util.IsValidChannelList(System.String[])" access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>
            Using the rules set forth in RFC 2812 determine if
            an array of channel names is valid.
            </summary>
              <returns>True if the channel names are all valid.</returns>
            </documentation>
            <parameter name="channels" type="System.String[]" />
          </method>
          <method name="IsValidChannelName" id="M:Sharkbite.Irc.Rfc2812Util.IsValidChannelName(System.String)" access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>
            Using the rules set forth in RFC 2812 determine if
            the channel name is valid.
            </summary>
              <returns>True if the channel name is valid.</returns>
            </documentation>
            <parameter name="channel" type="System.String" />
          </method>
          <method name="IsValidNick" id="M:Sharkbite.Irc.Rfc2812Util.IsValidNick(Sharkbite.Irc.Connection,System.String)" access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>
            Using the rules set forth in RFC 2812 determine if
            the nickname is valid.
            </summary>
              <returns>True is the nickname is valid</returns>
            </documentation>
            <parameter name="connection" type="Sharkbite.Irc.Connection" />
            <parameter name="nick" type="System.String" />
          </method>
          <method name="IsValidNicklList" id="M:Sharkbite.Irc.Rfc2812Util.IsValidNicklList(Sharkbite.Irc.Connection,System.String[])" access="Public" contract="Static" returnType="System.Boolean">
            <documentation>
              <summary>
            Using the rules set forth in RFC 2812 determine if
            an array of nicknames names is valid.
            </summary>
              <returns>True if the channel names are all valid.</returns>
            </documentation>
            <parameter name="connection" type="Sharkbite.Irc.Connection" />
            <parameter name="nicks" type="System.String[]" />
          </method>
          <method name="ModeActionToChar" id="M:Sharkbite.Irc.Rfc2812Util.ModeActionToChar(Sharkbite.Irc.ModeAction)" access="Public" contract="Static" returnType="System.Char">
            <documentation>
              <summary>
            Convert a ModeAction into its RFC2812 character.
            </summary>
              <param name="action">The action enum.</param>
              <returns>Either '+' or '-'.</returns>
            </documentation>
            <parameter name="action" type="Sharkbite.Irc.ModeAction" />
          </method>
          <method name="CharToModeAction" id="M:Sharkbite.Irc.Rfc2812Util.CharToModeAction(System.Char)" access="Public" contract="Static" returnType="Sharkbite.Irc.ModeAction">
            <documentation>
              <summary>
            Converts the char received from the IRC server into
            its enum equivalent.
            </summary>
              <param name="action">Either '+' or '-'.</param>
              <returns>An action enum.</returns>
            </documentation>
            <parameter name="action" type="System.Char" />
          </method>
          <method name="UserModeToChar" id="M:Sharkbite.Irc.Rfc2812Util.UserModeToChar(Sharkbite.Irc.UserMode)" access="Public" contract="Static" returnType="System.Char">
            <documentation>
              <summary>
            Converts a UserMode into its RFC2812 character.
            </summary>
              <param name="mode">The mode enum.</param>
              <returns>The corresponding char.</returns>
            </documentation>
            <parameter name="mode" type="Sharkbite.Irc.UserMode" />
          </method>
          <method name="CharToUserMode" id="M:Sharkbite.Irc.Rfc2812Util.CharToUserMode(System.Char)" access="Public" contract="Static" returnType="Sharkbite.Irc.UserMode">
            <documentation>
              <summary>
            Converts the char recived from the IRC server into
            its enum equivalent.
            </summary>
              <param name="mode">One of the IRC mode characters, e.g. 'a','i', etc...</param>
              <returns>An mode enum.</returns>
            </documentation>
            <parameter name="mode" type="System.Char" />
          </method>
          <method name="ChannelModeToChar" id="M:Sharkbite.Irc.Rfc2812Util.ChannelModeToChar(Sharkbite.Irc.ChannelMode)" access="Public" contract="Static" returnType="System.Char">
            <documentation>
              <summary>
            Converts a ChannelMode into its RFC2812 character.
            </summary>
              <param name="mode">The mode enum.</param>
              <returns>The corresponding char.</returns>
            </documentation>
            <parameter name="mode" type="Sharkbite.Irc.ChannelMode" />
          </method>
          <method name="CharToChannelMode" id="M:Sharkbite.Irc.Rfc2812Util.CharToChannelMode(System.Char)" access="Public" contract="Static" returnType="Sharkbite.Irc.ChannelMode">
            <documentation>
              <summary>
            Converts the char recived from the IRC server into
            its enum equivalent.
            </summary>
              <param name="mode">One of the IRC mode characters, e.g. 'O','i', etc...</param>
              <returns>An mode enum.</returns>
            </documentation>
            <parameter name="mode" type="System.Char" />
          </method>
          <method name="StatsQueryToChar" id="M:Sharkbite.Irc.Rfc2812Util.StatsQueryToChar(Sharkbite.Irc.StatsQuery)" access="Public" contract="Static" returnType="System.Char">
            <documentation>
              <summary>
            Converts a StatQuery enum value to its RFC2812 character.
            </summary>
              <param name="query">The query enum.</param>
              <returns>The corresponding char.</returns>
            </documentation>
            <parameter name="query" type="Sharkbite.Irc.StatsQuery" />
          </method>
          <method name="CharToStatsQuery" id="M:Sharkbite.Irc.Rfc2812Util.CharToStatsQuery(System.Char)" access="Public" contract="Static" returnType="Sharkbite.Irc.StatsQuery">
            <documentation>
              <summary>
            Converts the char recived from the IRC server into
            its enum equivalent.
            </summary>
              <param name="queryType">One of the IRC stats query characters, e.g. 'u','l', etc...</param>
              <returns>An StatsQuery enum.</returns>
            </documentation>
            <parameter name="queryType" type="System.Char" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.Rfc2812Util.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.Rfc2812Util.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="SafeReader" id="T:Sharkbite.Irc.SafeReader" access="Public" baseType="StreamReader">
          <documentation>
            <summary>
            A StreamReader designed to filter out unwanted and possibly hostile data
            and to prevent buffer overflows.
            </summary>
          </documentation>
          <base name="StreamReader" id="T:System.IO.StreamReader" type="System.IO.StreamReader">
            <base name="TextReader" id="T:System.IO.TextReader" type="System.IO.TextReader">
              <base name="MarshalByRefObject" id="T:System.MarshalByRefObject" type="System.MarshalByRefObject" />
            </base>
          </base>
          <implements inherited="true">IDisposable</implements>
          <constructor name=".ctor" id="M:Sharkbite.Irc.SafeReader.#ctor(System.String,System.Boolean,System.IO.Stream)" access="Public">
            <documentation>
              <summary>
            Create a reader based on the given stream.
            </summary>
              <param name="name">A unique name for this reader.</param>
              <param name="allowNonVisible">Allow or disallow nonprintable characters.
            For chat this is set to false and for a normal IRC connection it is set
            to true.</param>
              <param name="stream">The TCP/IP stream.</param>
            </documentation>
            <parameter name="name" type="System.String" />
            <parameter name="allowNonVisible" type="System.Boolean" />
            <parameter name="stream" type="System.IO.Stream" />
          </constructor>
          <property name="CurrentEncoding" id="P:Sharkbite.Irc.SafeReader.CurrentEncoding" access="Public" declaringType="System.IO.StreamReader" type="System.Text.Encoding" contract="Virtual" get="true" set="false">
            <documentation>
              <summary>
                <para>Gets the current character encoding that the current
   <see langword="StreamReader" /> is
      using.</para>
              </summary>
            </documentation>
          </property>
          <property name="BaseStream" id="P:Sharkbite.Irc.SafeReader.BaseStream" access="Public" declaringType="System.IO.StreamReader" type="System.IO.Stream" contract="Virtual" get="true" set="false">
            <documentation>
              <summary>
                <para>Returns the underlying stream.</para>
              </summary>
            </documentation>
          </property>
          <method name="ReadLine" id="M:Sharkbite.Irc.SafeReader.ReadLine" access="Public" declaringType="System.IO.StreamReader" contract="Override" returnType="System.String">
            <documentation>
              <summary>
                <para>Reads a line of characters from the current stream and returns
      the data as a string.</para>
              </summary>
            </documentation>
          </method>
          <method name="ReadBlock" id="M:Sharkbite.Irc.SafeReader.ReadBlock(System.Char[],System.Int32,System.Int32)" access="Public" declaringType="System.IO.TextReader" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Reads a maximum of count characters
      from the current stream and writes the data to buffer,
      beginning at index.</para>
              </summary>
            </documentation>
            <parameter name="buffer" type="System.Char[]" />
            <parameter name="index" type="System.Int32" />
            <parameter name="count" type="System.Int32" />
          </method>
          <method name="ReadToEnd" id="M:Sharkbite.Irc.SafeReader.ReadToEnd" access="Public" declaringType="System.IO.StreamReader" contract="Override" returnType="System.String">
            <documentation>
              <summary>
                <para>Reads the stream from the current position to the
      end of the stream.</para>
              </summary>
            </documentation>
          </method>
          <method name="Read" id="M:Sharkbite.Irc.SafeReader.Read(System.Char[],System.Int32,System.Int32)" access="Public" declaringType="System.IO.StreamReader" contract="Override" overload="1" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Reads a maximum of <paramref name="count " />
characters from the current stream into <paramref name="buffer" />,
beginning at <paramref name="index" />.</para>
              </summary>
            </documentation>
            <parameter name="buffer" type="System.Char[]" />
            <parameter name="index" type="System.Int32" />
            <parameter name="count" type="System.Int32" />
          </method>
          <method name="Read" id="M:Sharkbite.Irc.SafeReader.Read" access="Public" declaringType="System.IO.StreamReader" contract="Override" overload="2" returnType="System.Int32">
            <documentation>
              <summary>
                <para> Reads the next
      character from the input stream
      and advances the character position by one character.</para>
              </summary>
            </documentation>
          </method>
          <method name="Peek" id="M:Sharkbite.Irc.SafeReader.Peek" access="Public" declaringType="System.IO.StreamReader" contract="Override" returnType="System.Int32">
            <documentation>
              <summary>
                <para> Returns the next available character but
      does not consume it.</para>
              </summary>
            </documentation>
          </method>
          <method name="Dispose" id="M:Sharkbite.Irc.SafeReader.Dispose(System.Boolean)" access="Family" declaringType="System.IO.StreamReader" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Releases the unmanaged resources used by the <see cref="T:System.IO.StreamReader" /> and optionally
   releases the managed resources.</para>
              </summary>
            </documentation>
            <parameter name="disposing" type="System.Boolean" />
          </method>
          <method name="IDisposable.Dispose" id="M:Sharkbite.Irc.SafeReader.System#IDisposable#Dispose" access="Private" interface="System.IDisposable" declaringType="System.IO.TextReader" contract="Final" returnType="System.Void">
            <implements name="Dispose" interface="IDisposable" interfaceId="T:System.IDisposable" declaringType="System.IDisposable" />
          </method>
          <method name="Close" id="M:Sharkbite.Irc.SafeReader.Close" access="Public" declaringType="System.IO.StreamReader" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Closes the <see cref="T:System.IO.StreamReader" />
and releases any system resources associated with the reader.</para>
              </summary>
            </documentation>
          </method>
          <method name="CreateObjRef" id="M:Sharkbite.Irc.SafeReader.CreateObjRef(System.Type)" access="Public" declaringType="System.MarshalByRefObject" contract="Virtual" returnType="System.Runtime.Remoting.ObjRef">
            <documentation>
              <summary>
                <para>Creates an object that contains all the relevant
      information required to generate a proxy used to communicate with a remote object.</para>
              </summary>
            </documentation>
            <parameter name="requestedType" type="System.Type" />
          </method>
          <method name="InitializeLifetimeService" id="M:Sharkbite.Irc.SafeReader.InitializeLifetimeService" access="Public" declaringType="System.MarshalByRefObject" contract="Virtual" returnType="System.Object">
            <documentation>
              <summary>
                <para> Obtains a lifetime service object to control the lifetime policy for this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetLifetimeService" id="M:Sharkbite.Irc.SafeReader.GetLifetimeService" access="Public" declaringType="System.MarshalByRefObject" contract="Final" returnType="System.Object">
            <documentation>
              <summary>
                <para>Retrieves the current lifetime service object that controls the
      lifetime policy for this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="Finalize" id="M:Sharkbite.Irc.SafeReader.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.SafeReader.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.SafeReader.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.SafeReader.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="SafeReadLine" id="M:Sharkbite.Irc.SafeReader.SafeReadLine" access="Public" contract="Normal" returnType="System.String">
            <documentation>
              <summary>
            Reads a line of text from a remote connection and returns
            it when it receives the max numbers of characters (512) or
            a linefeed.
            </summary>
              <returns>A string without linefeeds and that has been Trimed()'ed or String.Empty
            if the stream has closed. </returns>
            </documentation>
          </method>
          <method name="DiscardBufferedData" id="M:Sharkbite.Irc.SafeReader.DiscardBufferedData" access="Public" declaringType="System.IO.StreamReader" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows a <see langword="StreamReader" />
to discard its current data.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.SafeReader.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.SafeReader.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="Sender" id="T:Sharkbite.Irc.Sender" access="Public" baseType="CommandBuilder">
          <documentation>
            <summary>
            This class is used to send all the IRC commands except for CTCP and DCC
            messages. Instances of this class are retrieved as properties of the Connection
            object. All methods in this class are thread safe.
            </summary>
            <remarks>
              <para>Due to the asynchronous nature of IRC, none of these commands 
            have a return value. To get that value (or possibly an error) the client must
            handle the corresponding event. For example, to check if a user is online
            the client would send <see cref="M:Sharkbite.Irc.Sender.Ison(System.String)" /> then check the value of the 
            <see cref="F:Sharkbite.Irc.Listener.OnIson" /> event to receive the answer.</para>
              <para>When a command can return an error, the possible error replies
            are listed. An error message will be sent via the <see cref="F:Sharkbite.Irc.Listener.OnError" /> event
            with one of the listed error codes as a parameter. When checking for these 
            errors use the constants from <see cref="T:Sharkbite.Irc.ReplyCode" />.
            </para>
              <para>The maximum length of any command string sent to the 
            server is 512 characters.</para>
            </remarks>
            <example>
              <code>
            //Create a Connection object which will automatically create its own Sender
            Connection connection = new Connection( args, false, false );	
            //Send commands using the Connection object and its Sender instance.
            //No need to keep a separate reference to the Sender object
            connection.Sender.PublicMessage("#thresher", "hello");
            </code>
            </example>
          </documentation>
          <base name="CommandBuilder" id="T:Sharkbite.Irc.CommandBuilder" type="Sharkbite.Irc.CommandBuilder" />
          <method name="Finalize" id="M:Sharkbite.Irc.Sender.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.Sender.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.Sender.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.Sender.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="Join" id="M:Sharkbite.Irc.Sender.Join(System.String)" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Join the specified channel. 
            </summary>
              <remarks>
                <para>Once a user has joined a channel, he receives information about
            all commands his server receives affecting the channel. This
            includes JOIN, MODE, KICK, PART, QUIT and of course PRIVMSG/NOTICE.
            This allows channel members to keep track of the other channel
            members, as well as channel modes.</para>
                <para>If a JOIN is successful, the user receives a JOIN message as
            confirmation and is then sent the channel's topic ( <see cref="F:Sharkbite.Irc.Listener.OnTopicRequest" /> and
            the list of users who are on the channel ( <see cref="F:Sharkbite.Irc.Listener.OnNames" /> ), which
            MUST include the user joining.</para>
            
            Possible Errors
            <list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item><item><description>ERR_BANNEDFROMCHAN</description></item><item><description>ERR_INVITEONLYCHAN</description></item><item><description>ERR_BADCHANNELKEY</description></item><item><description>ERR_CHANNELISFULL</description></item><item><description>ERR_BADCHANMASK</description></item><item><description>ERR_NOSUCHCHANNEL</description></item><item><description>ERR_TOOMANYCHANNELS</description></item><item><description>ERR_TOOMANYTARGETS</description></item><item><description>ERR_UNAVAILRESOURCE</description></item></list></remarks>
              <param name="channel">The channel to join. Channel names must begin with '&amp;', '#', '+' or '!'.</param>
              <example>
                <code>
            //Most channels you will see begin with the '#'. The others are reserved
            //for special channels and may not even be available on a particular server.
            connection.Sender.Join("#thresher");
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the channel name is not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnJoin" />
            </documentation>
            <parameter name="channel" type="System.String" />
          </method>
          <method name="Join" id="M:Sharkbite.Irc.Sender.Join(System.String,System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Join a passworded channel.
            </summary>
              <param name="channel">Channel to join</param>
              <param name="password">The channel's pasword. Cannot be null or empty.</param>
              <exception cref="T:System.ArgumentException">If the channel name is not valid or the password is null.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnJoin" />
            </documentation>
            <parameter name="channel" type="System.String" />
            <parameter name="password" type="System.String" />
          </method>
          <method name="Nick" id="M:Sharkbite.Irc.Sender.Nick(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Change the user's nickname.
            </summary>
              <remarks>
            Possible Errors
            	<list type="bullet"><item><description>ERR_NONICKNAMEGIVEN</description></item><item><description>ERR_ERRONEUSNICKNAME</description></item><item><description>ERR_NICKNAMEINUSE</description></item><item><description>ERR_NICKCOLLISION</description></item><item><description>ERR_UNAVAILRESOURCE</description></item><item><description>ERR_RESTRICTED</description></item></list></remarks>
              <param name="newNick"> The new nickname</param>
              <example>
                <code>
            //Make sure and verify that the nick is valid and of the right length
            string nick = GetUserInput();
            if( Rfc2812Util.IsValidNick( connection, nick) ) { 
            connection.Sender.Nick( nick );
            }
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the nickname is not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnNick" />
            </documentation>
            <parameter name="newNick" type="System.String" />
          </method>
          <method name="Names" id="M:Sharkbite.Irc.Sender.Names(System.String[])" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary> 
            Request a list of all nicknames on a given channel.
            </summary>
              <remarks>
            Possible Errors
            <list type="bullet"><item><description>ERR_TOOMANYMATCHES</description></item></list></remarks>
              <param name="channels">One or more channel names.</param>
              <example>
                <code>
            //Make the request for a single channel
            connection.Sender.Names( "#test" );
            //Make the request for several channels at once
            connection.Sender.Names( "#test","#alpha","#bravo" );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If any of the channels are not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnNames" />
            </documentation>
            <parameter name="channels" type="System.String[]" isParamArray="true" />
          </method>
          <method name="AllNames" id="M:Sharkbite.Irc.Sender.AllNames" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request a list of all visible channels along with their users. If the server allows this
            kind of request then expect a rather large reply. 
            </summary>
              <remarks>
            Possible Errors
            	<list type="bullet"><item><description>ERR_TOOMANYMATCHES</description></item></list></remarks>
              <seealso cref="F:Sharkbite.Irc.Listener.OnNames" />
            </documentation>
          </method>
          <method name="List" id="M:Sharkbite.Irc.Sender.List(System.String[])" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Request basic information about a channel, i.e. number
            of visible users and topic.</summary>
              <remarks>
            Possible Errors
            	<list type="bullet"><item><description>ERR_TOOMANYMATCHES</description></item></list></remarks>
              <param name="channels">One or more channel names.</param>
              <example>
                <code>
            //Make the request for a single channel
            connection.Sender.List( "#test" );
            //Make the request for several channels at once
            connection.Sender.List( "#test","#alpha",#"bravo" );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If any of the channels are not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnList" />
            </documentation>
            <parameter name="channels" type="System.String[]" isParamArray="true" />
          </method>
          <method name="AllList" id="M:Sharkbite.Irc.Sender.AllList" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request basic information for all the channels on the current
            network.
            </summary>
              <remarks>
            Possible Errors
            	<list type="bullet"><item><description>ERR_TOOMANYMATCHES</description></item></list></remarks>
              <seealso cref="F:Sharkbite.Irc.Listener.OnList" />
            </documentation>
          </method>
          <method name="ChangeTopic" id="M:Sharkbite.Irc.Sender.ChangeTopic(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Change the topic of the given channel.</summary>
              <remarks>
            Possible Errors
            <list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item><item><description>ERR_NOTONCHANNEL</description></item><item><description>ERR_CHANOPRIVSNEEDED</description></item><item><description>ERR_NOCHANMODES</description></item></list></remarks>
              <param name="channel">The target channel.</param>
              <param name="newTopic">The new topic.</param>
              <example>
                <code>
            connection.Sender.ChangeTopic( "#thresher","Beta 27 Released" );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the channel name is not valid or the topic is null.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnTopicChanged" />
            </documentation>
            <parameter name="channel" type="System.String" />
            <parameter name="newTopic" type="System.String" />
          </method>
          <method name="ClearTopic" id="M:Sharkbite.Irc.Sender.ClearTopic(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Clear the channel's topic.</summary>
              <remarks>
            Possible Errors
            <list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item><item><description>ERR_NOTONCHANNEL</description></item><item><description>ERR_CHANOPRIVSNEEDED</description></item><item><description>ERR_NOCHANMODES</description></item></list></remarks>
              <param name="channel">The target channel.</param>
              <exception cref="T:System.ArgumentException">If the channel name is not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnTopicChanged" />
            </documentation>
            <parameter name="channel" type="System.String" />
          </method>
          <method name="RequestTopic" id="M:Sharkbite.Irc.Sender.RequestTopic(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Request the topic for the given channel.</summary>
              <remarks>
                <para>
            The reply will be sent via the <see cref="F:Sharkbite.Irc.Listener.OnTopicRequest" /> event. If there is no topic
            then <see cref="F:Sharkbite.Irc.Listener.OnError" /> will be called with a code of <see cref="F:Sharkbite.Irc.ReplyCode.RPL_NOTOPIC" />.
            </para>
            Possible Errors
            <list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item><item><description>ERR_NOTONCHANNEL</description></item><item><description>ERR_CHANOPRIVSNEEDED</description></item><item><description>ERR_NOCHANMODES</description></item></list></remarks>
              <param name="channel">The target channel.</param>
              <exception cref="T:System.ArgumentException">If the channel name is not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnTopicRequest" />
            </documentation>
            <parameter name="channel" type="System.String" />
          </method>
          <method name="Part" id="M:Sharkbite.Irc.Sender.Part(System.String,System.String[])" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Leave the given channel.
            </summary>
              <remarks>
            Possible Errors
            <list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item><item><description>ERR_NOSUCHCHANNEL</description></item><item><description>ERR_NOTONCHANNEL</description></item></list></remarks>
              <param name="reason">A goodbye message.</param>
              <param name="channels">One or more channels to leave.</param>
              <example>
                <code>
            //Leave a single channel
            connection.Sender.Part("Goodbye", "#test" );
            //Leave several at once
            connection.Sender.Part( "Goodbye", "#test","#alpha",#"bravo" );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the channel name is not valid or the reason is null.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnPart" />
            </documentation>
            <parameter name="reason" type="System.String" />
            <parameter name="channels" type="System.String[]" isParamArray="true" />
          </method>
          <method name="Part" id="M:Sharkbite.Irc.Sender.Part(System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Leave a channel without giving a reason.
            </summary>
              <param name="channel">The channel to leave.</param>
              <exception cref="T:System.ArgumentException">If the channel name is not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnPart" />
            </documentation>
            <parameter name="channel" type="System.String" />
          </method>
          <method name="PublicNotice" id="M:Sharkbite.Irc.Sender.PublicNotice(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Send a notice to a channel.</summary>
              <remarks>
                <para>The difference between a notice and a normal message is that 
            automatic replies must never be sent in response to a notice. This rule 
            applies to servers too - they must not send any error reply back to the 
            client on receipt of a notice. The object of this rule is to avoid loops
            between clients automatically sending something in response to
            something it received. See <see cref="M:Sharkbite.Irc.Sender.PublicMessage(System.String,System.String)" /> for possible errors.</para>
              </remarks>
              <param name="channel">The target channel.</param>
              <param name="message">Text message. If the text is too large to be sent in one
            piece it will be broken up into smaller strings which will then
            be sent individually.</param>
              <exception cref="T:System.ArgumentException">If the channel name is not valid or the message is empty or null.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnPublicNotice" />
            </documentation>
            <parameter name="channel" type="System.String" />
            <parameter name="message" type="System.String" />
          </method>
          <method name="PrivateNotice" id="M:Sharkbite.Irc.Sender.PrivateNotice(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Send a notice to a user.</summary>
              <remarks>
                <para>The difference between a notice and a normal message is that 
            automatic replies must never be sent in response to a notice. This rule 
            applies to servers too - they must not send any error reply back to the 
            client on receipt of a notice. The object of this rule is to avoid loops
            between clients automatically sending something in response to
            something it received. See <see cref="M:Sharkbite.Irc.Sender.PrivateMessage(System.String,System.String)" /> for possible errors.</para>
              </remarks>
              <param name="nick">The target nickname.</param>
              <param name="message">Text message. If the text is too large to be sent in one
            piece it will be broken up into smaller strings which will then
            be sent individually.</param>
              <exception cref="T:System.ArgumentException">If the nick is not valid or the message is empty or null.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnPrivateNotice" />
            </documentation>
            <parameter name="nick" type="System.String" />
            <parameter name="message" type="System.String" />
          </method>
          <method name="PublicMessage" id="M:Sharkbite.Irc.Sender.PublicMessage(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send a message to all the users in a channel.</summary>
              <remarks>
            Possible Errors
            <list type="bullet"><item><description>ERR_CANNOTSENDTOCHAN</description></item><item><description>ERR_NOTEXTTOSEND</description></item></list></remarks>
              <param name="channel">The target channel.</param>
              <param name="message">A message. If the message is too long it will be broken
            up into smaller piecese which will be sent sequentially.</param>
              <exception cref="T:System.ArgumentException">If the channel name is not valid or if the message is null.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnPublic" />
            </documentation>
            <parameter name="channel" type="System.String" />
            <parameter name="message" type="System.String" />
          </method>
          <method name="PrivateMessage" id="M:Sharkbite.Irc.Sender.PrivateMessage(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send a message to a user.</summary>
              <remarks>
                <para>If the target user status is away, the <see cref="F:Sharkbite.Irc.Listener.OnAway" /> event will be
            called along with the away message if any.
            </para>
            Possible Errors
            <list type="bullet"><item><description>ERR_NORECIPIENT</description></item><item><description>ERR_NOTEXTTOSEND</description></item><item><description>ERR_NOSUCHNICK</description></item></list></remarks>
              <param name="nick">The target user.</param>
              <param name="message">A message. If the message is too long it will be broken
            up into smaller piecese which will be sent sequentially.</param>
              <exception cref="T:System.ArgumentException">If the nickname is not valid or if the message is null or empty.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnPrivate" />
            </documentation>
            <parameter name="nick" type="System.String" />
            <parameter name="message" type="System.String" />
          </method>
          <method name="Invite" id="M:Sharkbite.Irc.Sender.Invite(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Invite a user to a channel.</summary>
              <remarks>
                <para>The parameter nickname is the nickname of the person to be invited to
            the target channel channel. There is no requirement that the
            channel the target user is being invited to must exist or be a valid
            channel. However, if the channel exists, only members of the channel
            are allowed to invite other users. When the channel has invite-only
            flag set, only channel operators may an invite.</para>
                <para>Only the user inviting and the user being invited will receive
            notification of the invitation. Other channel members are not
            notified. (This is unlike the mode changes, and is occasionally the
            source of trouble for users.)</para>
                <para>After the invite is sent the IRC server will signal that it 
            was correctly received by calling <see cref="F:Sharkbite.Irc.Listener.OnInviteSent" />.
            </para>
            
            Possible Errors
            <list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item><item><description>ERR_NOSUCHNICK</description></item><item><description>ERR_NOTONCHANNEL</description></item><item><description>ERR_USERONCHANNEL</description></item><item><description>ERR_CHANOPRIVSNEEDED</description></item></list></remarks>
              <param name="who">The nick of the person to invite</param>
              <param name="channel">The channel they are invited to join.</param>
              <exception cref="T:System.ArgumentException">If the nickname or channel is not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnInviteSent" />
              <seealso cref="F:Sharkbite.Irc.Listener.OnInvite" />
            </documentation>
            <parameter name="who" type="System.String" />
            <parameter name="channel" type="System.String" />
          </method>
          <method name="Kick" id="M:Sharkbite.Irc.Sender.Kick(System.String,System.String,System.String[])" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Kick a user off a channel.</summary>
              <remarks>
            Possible Replies
            <list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item><item><description>ERR_NOSUCHCHANNEL</description></item><item><description>ERR_BADCHANMASK</description></item><item><description>ERR_CHANOPRIVSNEEDED</description></item><item><description>ERR_USERNOTINCHANNEL</description></item><item><description>ERR_NOTONCHANNEL</description></item></list></remarks>
              <param name="nicks">One or more users to kick.</param>
              <param name="channel">Which channel to kick the user from.</param>
              <param name="reason">Why.</param>
              <example>
                <code>
            //Kick a single user
            connection.Sender.Kick("#thresher","No Perl please","lwall" );
            //Kicks several users at once
            connection.Sender.Kick( "#thresher", "Bye", "John","Dick","Harry" );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the nickname or channel is not valid or the reason is null.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnKick" />
            </documentation>
            <parameter name="channel" type="System.String" />
            <parameter name="reason" type="System.String" />
            <parameter name="nicks" type="System.String[]" isParamArray="true" />
          </method>
          <method name="Ison" id="M:Sharkbite.Irc.Sender.Ison(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request to know if a user is currenlty on IRC.</summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item></list></remarks>
              <param name="nick">Target user.</param>
              <example>
                <code>
            //Query for a nick
            connection.Sender.Ison( "joe" );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the nickname is not valid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnIson" />
            </documentation>
            <parameter name="nick" type="System.String" />
          </method>
          <method name="Who" id="M:Sharkbite.Irc.Sender.Who(System.String,System.Boolean)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request a list of users who match a given query.</summary>
              <remarks>
            Possible Errors
            <list type="bullet"><item><description>ERR_TOOMANYLINES</description></item></list></remarks>
              <param name="mask">The mask passed to Who is matched against a users' host, 
            real name or nickname. It uses the wildcard system of matching
            where the '*' can stand for any number of characters and '?' stands for any single
            character. The query will only match against one component so it is not possible
            to match against both nick and host for example.
            </param>
              <param name="operatorsOnly"> True if the query should only try to match the mask
            to users designated operators.</param>
              <example>
                <code>
            //Find all users from Russia, i.e. who have .ru in their hostnames
            connection.Sender.Who("*.ru", false );
            //Find all users from clan [DX], i.e. have '[DX]' in their nick
            connection.Sender.Who("[DX]*", false );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the mask is null,empty, or too long.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnWho" />
            </documentation>
            <parameter name="mask" type="System.String" />
            <parameter name="operatorsOnly" type="System.Boolean" />
          </method>
          <method name="AllWho" id="M:Sharkbite.Irc.Sender.AllWho" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request a list all visible users (whose mode is not +i) and those 
            who don't have a common channel with the requesting 
            client are listed. 
            </summary>
              <seealso cref="F:Sharkbite.Irc.Listener.OnWho" />
            </documentation>
          </method>
          <method name="Whois" id="M:Sharkbite.Irc.Sender.Whois(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request detailed information about a given user.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHNICK</description></item></list></remarks>
              <param name="nick">The nick of the query subject.</param>
              <exception cref="T:System.ArgumentException">If the nick is invalid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnWhois" />
              <seealso cref="T:Sharkbite.Irc.WhoisInfo" />
            </documentation>
            <parameter name="nick" type="System.String" />
          </method>
          <method name="Away" id="M:Sharkbite.Irc.Sender.Away(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Set the user status to away and set an automatic reply 
            to any private message.
            </summary>
              <remarks>
            This functions as a kind of IRC answering machine. It is normally used
            to indicate that the user is away from IRC.
            </remarks>
              <param name="message">The message that will be sent back to others when you
            are away. Overly long message will be truncated.</param>
              <exception cref="T:System.ArgumentException">If the message is null or empty.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnAway" />
            </documentation>
            <parameter name="message" type="System.String" />
          </method>
          <method name="UnAway" id="M:Sharkbite.Irc.Sender.UnAway" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Turns off the away status and the accompanying message.
            </summary>
            </documentation>
          </method>
          <method name="Whowas" id="M:Sharkbite.Irc.Sender.Whowas(System.String)" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request information about a user who is no longer on IRC.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NONICKNAMEGIVEN</description></item><item><description>ERR_WASNOSUCHNICK</description></item></list></remarks>
              <param name="nick">Target nick</param>
              <exception cref="T:System.ArgumentException">If the nick is invalid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnWhowas" />
            </documentation>
            <parameter name="nick" type="System.String" />
          </method>
          <method name="Whowas" id="M:Sharkbite.Irc.Sender.Whowas(System.String,System.Int32)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Request information about a user who is no longer on IRC
            but with a maximum number of responses.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NONICKNAMEGIVEN</description></item><item><description>ERR_WASNOSUCHNICK</description></item></list></remarks>
              <param name="count">The maximum number of replies the IRC server
            should send back.</param>
              <param name="nick">Target nick</param>
              <exception cref="T:System.ArgumentException">If the nick is invalid or if count is less 
            than or equal to zero.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnWhowas" />
            </documentation>
            <parameter name="nick" type="System.String" />
            <parameter name="count" type="System.Int32" />
          </method>
          <method name="RequestUserModes" id="M:Sharkbite.Irc.Sender.RequestUserModes" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request the modes set for this user.
            </summary>
              <seealso cref="F:Sharkbite.Irc.Listener.OnUserModeRequest" />
              <seealso cref="T:Sharkbite.Irc.UserMode" />
            </documentation>
          </method>
          <method name="ChangeUserMode" id="M:Sharkbite.Irc.Sender.ChangeUserMode(Sharkbite.Irc.ModeAction,Sharkbite.Irc.UserMode)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Change the client's mode.</summary>
              <remarks>
            Away cannot be set here but should be set using <see cref="M:Sharkbite.Irc.Sender.Away(System.String)" /> 
            or removed using <see cref="M:Sharkbite.Irc.Sender.UnAway" />.
            </remarks>
              <param name="action">Add or remove a mode.</param>
              <param name="mode">The mode to be changed.</param>
              <example>
                <code>
            //Turn off invisibility
            connection.Sender.ChangeUserMode( ModeAction.Remove, UserMode.Invisible );
            //Turn on wallops (and get a lot of IRC garbage)
            connection.Sender.ChangeUserMode( ModeAction.Add, UserMode.Wallops );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the UserMode parameter is Away.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnUserModeChange" />
            </documentation>
            <parameter name="action" type="Sharkbite.Irc.ModeAction" />
            <parameter name="mode" type="Sharkbite.Irc.UserMode" />
          </method>
          <method name="ChangeChannelMode" id="M:Sharkbite.Irc.Sender.ChangeChannelMode(System.String,Sharkbite.Irc.ModeAction,Sharkbite.Irc.ChannelMode,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Change a channel's mode.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NEEDMOREPARAMS</description></item><item><description>ERR_KEYSET</description></item><item><description>ERR_NOCHANMODES</description></item><item><description>ERR_CHANOPRIVSNEEDED</description></item><item><description>ERR_USERNOTINCHANNEL</description></item><item><description>ERR_UNKNOWNMODE</description></item></list></remarks>
              <param name="channel">The target channel.</param>
              <param name="action">Add or remove.</param>
              <param name="mode">The target mode.</param>
              <param name="param">An optional parameter for certain modes. If the mode 
            does not require one this should be null.</param>
              <example>
                <code>
            //Give 'nick' the ability to talk on a moderated channel, i.e. add Voice
            connection.Sender.ChangeChannelMode("#thresher", ModeAction.Add, ChannelMode.Voice,"nick" );
            //Make a channel private
            connection.Sender.ChangeChannelMode( "#thresher", ModeAction.Add, ChannelMode.Private, null );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the channel name is invalid.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnChannelModeChange" />
            </documentation>
            <parameter name="channel" type="System.String" />
            <parameter name="action" type="Sharkbite.Irc.ModeAction" />
            <parameter name="mode" type="Sharkbite.Irc.ChannelMode" />
            <parameter name="param" type="System.String" />
          </method>
          <method name="RequestChannelList" id="M:Sharkbite.Irc.Sender.RequestChannelList(System.String,Sharkbite.Irc.ChannelMode)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request the list of users that a channel keeps for the given mode.. 
            </summary>
              <remarks>
            Each channel maintains a list of those banned, those excepted from a ban,
            those on automatic invite, and the channel creator. Use this method to retreieve one
            of those lists.
            </remarks>
              <param name="channel">The taregt channel.</param>
              <param name="mode">Must be one of:
            Ban, Exception, Invitation, or ChannelCreator.
            </param>
              <example>
                <code>
            //Request the channel's banned list
            connection.Sender.RequestChannelList("#thresher", ChannelMode.Ban );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the channel is invalid or the ChannelMode is
            not one of the 4 allowed types.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnChannelList" />
            </documentation>
            <parameter name="channel" type="System.String" />
            <parameter name="mode" type="Sharkbite.Irc.ChannelMode" />
          </method>
          <method name="RequestChannelModes" id="M:Sharkbite.Irc.Sender.RequestChannelModes(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Request the modes of a channel.
            </summary>
              <param name="channel">The target channel.</param>
              <exception cref="T:System.ArgumentException">If the channel is invalid, null, or empty.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnChannelModeRequest" />
            </documentation>
            <parameter name="channel" type="System.String" />
          </method>
          <method name="Action" id="M:Sharkbite.Irc.Sender.Action(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send an action message to a channel.
            </summary>
              <remarks>
            This is actually a CTCP command but it is so widely used
            that it is included here. These are the '\me Laughs' type messages. 
            </remarks>
              <param name="channel">The target channel.</param>
              <param name="description">A description of the action. If this is too long it will
            be truncated.</param>
              <example>
                <code>
            //Express an emotion...
            connection.Sender.Action("#thresher", "Kicks down the door" );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the channel name is not valid. Will
            also be thrown if the description is null or empty.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnAction" />
            </documentation>
            <parameter name="channel" type="System.String" />
            <parameter name="description" type="System.String" />
          </method>
          <method name="PrivateAction" id="M:Sharkbite.Irc.Sender.PrivateAction(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send an action message to a user instead of a channel.
            </summary>
              <param name="nick">The target user.</param>
              <param name="description">A description of the action. If this is too long it will
            be truncated.</param>
              <exception cref="T:System.ArgumentException">If the nickname is not valid. Will
            also be thrown if the description is null or empty.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnPrivateAction" />
            </documentation>
            <parameter name="nick" type="System.String" />
            <parameter name="description" type="System.String" />
          </method>
          <method name="Register" id="M:Sharkbite.Irc.Sender.Register(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>Register this connection with the IRC server.</summary>
              <remarks>
            This method should be called when the initial attempt
            to register with the IRC server fails because the nick is already
            taken. To be informed when this fails you must be subscribed
            to <see cref="F:Sharkbite.Irc.Listener.OnNickError" />. If <see cref="P:Sharkbite.Irc.Connection.HandleNickTaken" />
            is set to true (which is its default value) then Thresher will automatically
            create an alternate nick and use that. The new nick can be retrieved
            by calling <see cref="P:Sharkbite.Irc.Connection.ConnectionData" />.
            </remarks>
              <param name="newNick">The changed nick name.</param>
              <seealso cref="T:Sharkbite.Irc.NameGenerator" />
            </documentation>
            <parameter name="newNick" type="System.String" />
          </method>
          <method name="Raw" id="M:Sharkbite.Irc.Sender.Raw(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send an arbitrary text message to the IRC server.
            </summary>
              <remarks>
            Messages that are too long will be truncated. There is no corresponding 
            events so it will be necessary to check for standard reply codes and possibly
            errors.
            </remarks>
              <param name="message">A text message.</param>
              <exception cref="T:System.ArgumentException">If the message is null or empty.</exception>
            </documentation>
            <parameter name="message" type="System.String" />
          </method>
          <method name="Version" id="M:Sharkbite.Irc.Sender.Version" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request the version of the IRC server program.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <seealso cref="F:Sharkbite.Irc.Listener.OnVersion" />
            </documentation>
          </method>
          <method name="Version" id="M:Sharkbite.Irc.Sender.Version(System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Used to query the version of the IRC server program.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <param name="targetServer">The FQDN of the IRC server to query. Wildcards are allowed.
            Must be a server part of the same IRC network this connection is connected to.</param>
              <seealso cref="F:Sharkbite.Irc.Listener.OnVersion" />
            </documentation>
            <parameter name="targetServer" type="System.String" />
          </method>
          <method name="Motd" id="M:Sharkbite.Irc.Sender.Motd" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request the "Message Of The Day" from the current server.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOMOTD</description></item></list></remarks>
              <seealso cref="F:Sharkbite.Irc.Listener.OnMotd" />
            </documentation>
          </method>
          <method name="Motd" id="M:Sharkbite.Irc.Sender.Motd(System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Request the "Message Of The Day" from the given server.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOMOTD</description></item></list></remarks>
              <param name="targetServer">The FQDN of the IRC server to query. Wildcards are allowed.
            Must be a server part of the same IRC network this connection is connected to.</param>
              <seealso cref="F:Sharkbite.Irc.Listener.OnMotd" />
            </documentation>
            <parameter name="targetServer" type="System.String" />
          </method>
          <method name="Time" id="M:Sharkbite.Irc.Sender.Time" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request the local time from the current server.
            </summary>
              <seealso cref="F:Sharkbite.Irc.Listener.OnTime" />
            </documentation>
          </method>
          <method name="Time" id="M:Sharkbite.Irc.Sender.Time(System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Request the local time from the given server.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <param name="targetServer">The FQDN of the IRC server to query. Wildcards are allowed.
            Must be a server part of the same IRC network this connection is connected to.</param>
              <seealso cref="F:Sharkbite.Irc.Listener.OnTime" />
            </documentation>
            <parameter name="targetServer" type="System.String" />
          </method>
          <method name="Wallops" id="M:Sharkbite.Irc.Sender.Wallops(System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Send a message to all users who have the 'w' user mode set.</summary>
              <remarks>
            This will likely be forbidden to all but IRC
            OPS.
            </remarks>
              <param name="message">Any text message.</param>
              <exception cref="T:System.ArgumentException">If the message is empty or null.</exception>
            </documentation>
            <parameter name="message" type="System.String" />
          </method>
          <method name="Info" id="M:Sharkbite.Irc.Sender.Info" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request information about the software
            of the current IRC server.
            </summary>
              <remarks>
            This returns information describing the
            server: its version, when it was compiled, the patchlevel, when it
            was started, and any other miscellaneous information which may be
            	considered relevant.
            </remarks>
              <seealso cref="F:Sharkbite.Irc.Listener.OnInfo" />
            </documentation>
          </method>
          <method name="Info" id="M:Sharkbite.Irc.Sender.Info(System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Request information about the software
            of the target IRC server.
            </summary>
              <remarks>
                <para>This returns information describing the
            server: its version, when it was compiled, the patchlevel, when it
            was started, and any other miscellaneous information which may be
            	considered relevant.</para>
            	
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <param name="target">Either a user nickname or a specific IRC server connected
            to the current network. If it is a nickname then return the information about
            the server to which 'nick' is connected. Can include wildcards.</param>
              <example>
                <code>
            //Query a specific server
            connection.Sender.Info( "sunray.sharkbite.org" );
            //Query the server Bob is connected to
            connection.Sender.Info("Bob");
            </code>
              </example>
              <seealso cref="F:Sharkbite.Irc.Listener.OnInfo" />
            </documentation>
            <parameter name="target" type="System.String" />
          </method>
          <method name="Admin" id="M:Sharkbite.Irc.Sender.Admin" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request information about the administrator
            of the current IRC server.
            </summary>
              <remarks>
            This returns information such as the administrator's
            email address, geographical location and whatever else
            the IRC is configured to send as a response.
            </remarks>
              <seealso cref="F:Sharkbite.Irc.Listener.OnAdmin" />
            </documentation>
          </method>
          <method name="Admin" id="M:Sharkbite.Irc.Sender.Admin(System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Request information about the administrator
            of the target IRC server.
            </summary>
              <remarks>
                <para> This returns information such as the administrator's
            email address, geographical location and whatever else
            the IRC is configured to send as a response.
            </para>
            	
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <param name="target">Either a user nickname or a specific IRC server connected
            to the current network. If it is a nickname then return the information about
            the server to which 'nick' is connected. Can include wildcards.</param>
              <example>
                <code>
            //Request info about the administrator of the specified server
            connection.Sender.Admin( "sunray.sharkbite.org" );
            //Request info about the administrator of the server Bob is connected to
            connection.Sender.Admin("Bob");
            </code>
              </example>
              <seealso cref="F:Sharkbite.Irc.Listener.OnAdmin" />
            </documentation>
            <parameter name="target" type="System.String" />
          </method>
          <method name="Lusers" id="M:Sharkbite.Irc.Sender.Lusers" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request statistics about the size of the IRC network.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <seealso cref="F:Sharkbite.Irc.Listener.OnLusers" />
            </documentation>
          </method>
          <method name="Lusers" id="M:Sharkbite.Irc.Sender.Lusers(System.String,System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Request statistics about the size of the IRC network.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <param name="hostMask">Limits the kinds of servers included in the response by
            specifiying a hostname string. Can include wildcards.</param>
              <param name="targetServer">Specifies the server that should process the request. Can be null
            to indicate that the current server should handle the request. Can include wildcards.</param>
              <example>
                <code>
            //Request stats from the current server
            connection.Sender.Lusers();
            //Request stats about all servers ending in '.net' from the current server
            connection.Sender.Lusers("*.net", null );
            //Request stats about all servers ending in '.net' from 'west.gamesnet.net'
            connection.Sender.Lusers("*.net", "west.gamesnet.net");
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the host mask and server names are too long.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnLusers" />
            </documentation>
            <parameter name="hostMask" type="System.String" />
            <parameter name="targetServer" type="System.String" />
          </method>
          <method name="Links" id="M:Sharkbite.Irc.Sender.Links" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request all server names which are known by the current server.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <seealso cref="F:Sharkbite.Irc.Listener.OnLinks" />
            </documentation>
          </method>
          <method name="Links" id="M:Sharkbite.Irc.Sender.Links(System.String[])" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Request all server names which are known by the target server
            and which match a given host mask.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <param name="masks">Either a single string which acts as a host
            mask filter for the query. Or two strings with the first as host mask
            and the second a target server. Any other arguments will be ignored.</param>
              <example>
                <code>
            //Request names from the current server
            connection.Sender.Links();
            //Request names of all servers ending in '.net' from the current server
            connection.Sender.Links("*.edu" );
            //Request names of all servers ending in '.edu' from '*.gnome.org' servers
            connection.Sender.Links("*.edu", "*.gnome.org");
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the masks are too long.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnLinks" />
            </documentation>
            <parameter name="masks" type="System.String[]" isParamArray="true" />
          </method>
          <method name="Stats" id="M:Sharkbite.Irc.Sender.Stats(Sharkbite.Irc.StatsQuery)" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
            Request certain kinds of statistics about the current server.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <param name="query">The type of query to send. See <see cref="T:Sharkbite.Irc.StatsQuery" /> for choice.</param>
              <example>
                <code>
            //Request server link stats
            connection.Sender.Stats( StatsQuery.Connections );
            </code>
              </example>
              <seealso cref="F:Sharkbite.Irc.Listener.OnStats" />
            </documentation>
            <parameter name="query" type="Sharkbite.Irc.StatsQuery" />
          </method>
          <method name="Stats" id="M:Sharkbite.Irc.Sender.Stats(Sharkbite.Irc.StatsQuery,System.String)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Request certain kinds of statistics about the current server.
            </summary>
              <remarks>
            Possible Errors
            		<list type="bullet"><item><description>ERR_NOSUCHSERVER</description></item></list></remarks>
              <param name="query">The type of query to send. See <see cref="T:Sharkbite.Irc.StatsQuery" /> for choice.</param>
              <param name="targetServer">Specifies the server that should process the request. Can include wildcards.</param>
              <example>
                <code>
            //Request list of Operators from the server 'irc.gnome.org'
            connection.Sender.Stats( StatsQuery.Operators, "irc.gnome.org" );
            </code>
              </example>
              <exception cref="T:System.ArgumentException">If the target server name is too long.</exception>
              <seealso cref="F:Sharkbite.Irc.Listener.OnStats" />
            </documentation>
            <parameter name="query" type="Sharkbite.Irc.StatsQuery" />
            <parameter name="targetServer" type="System.String" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.Sender.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.Sender.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="ServerProperties" id="T:Sharkbite.Irc.ServerProperties" access="Public" sealed="true">
          <documentation>
            <summary>
            Encapsulates the collection of properties sent by the IRC server
            after registration.
            </summary>
            <remarks>See the server_properties.pdf file for a list of comon properties.</remarks>
            <example>
              <code>
            //This will only be non null if the connection has already received
            //a '005' reply and that such a reply is actually sent by the server.
            //This will happen right after registration.
            //Instances are only retrieved from a Connection and not instantiated directly.
            ServerProperties properties = connection.ServerProperties;
            //It should always be tested for null
            if( properties != null ) {
            Console.Writeline("NICKLEN is" + properties["NICKLEN"] );
            }
            //Only a handful of properties will ever be available.
            </code>
            </example>
          </documentation>
          <property name="Item" id="P:Sharkbite.Irc.ServerProperties.Item(System.String)" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            Read-only indexer for the various server
            property strings.
            </summary>
              <returns>The string sent by the server or <see cref="F:System.String.Empty" /> if not present..</returns>
            </documentation>
            <parameter name="key" type="System.String" />
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.ServerProperties.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.ServerProperties.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.ServerProperties.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.ServerProperties.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetEnumerator" id="M:Sharkbite.Irc.ServerProperties.GetEnumerator" access="Public" contract="Normal" returnType="System.Collections.IDictionaryEnumerator">
            <documentation>
              <summary>
            Get a read-only enumeration of all the elements
            in this object.
            </summary>
              <returns>An IDictionaryEnumerator type enumeration.</returns>
              <example>
                <code>
            //To loop over all the values	
            foreach( DictionaryEntry entry in connection.ServerProperties ) 
            {
            Console.WriteLine("Key:" + entry.Key + " Value:" + entry.Value );
            }
            </code>
              </example>
            </documentation>
          </method>
          <method name="ContainsKey" id="M:Sharkbite.Irc.ServerProperties.ContainsKey(System.String)" access="Public" contract="Normal" returnType="System.Boolean">
            <documentation>
              <summary>
            Test if this instance contains a given key.
            </summary>
              <param name="key">The server properties key to test.</param>
              <returns>True if it is present.</returns>
            </documentation>
            <parameter name="key" type="System.String" />
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.ServerProperties.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.ServerProperties.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <class name="WhoisInfo" id="T:Sharkbite.Irc.WhoisInfo" access="Public" sealed="true">
          <documentation>
            <summary>
            The collection of information about a user 
            returned by a Whois query. Instances of this class
            are created internally.
            </summary>
          </documentation>
          <property name="User" id="P:Sharkbite.Irc.WhoisInfo.User" access="Public" type="Sharkbite.Irc.UserInfo" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            A user's nick, logon, and hostname.
            </summary>
              <value>A UserInfo instance.</value>
            </documentation>
          </property>
          <property name="RealName" id="P:Sharkbite.Irc.WhoisInfo.RealName" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            A user's real name.
            </summary>
              <value>A string</value>
            </documentation>
          </property>
          <property name="Server" id="P:Sharkbite.Irc.WhoisInfo.Server" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            The name of IRC server.
            </summary>
              <value>The IRC server FQDN hostname string.</value>
            </documentation>
          </property>
          <property name="ServerDescription" id="P:Sharkbite.Irc.WhoisInfo.ServerDescription" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            Text describing the IRC server.
            </summary>
              <value>A string describing the IRC network this server is a member of.</value>
            </documentation>
          </property>
          <property name="IdleTime" id="P:Sharkbite.Irc.WhoisInfo.IdleTime" access="Public" type="System.Int64" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            User's idle time in seconds.
            </summary>
              <value>Seconds as a long.</value>
            </documentation>
          </property>
          <property name="Operator" id="P:Sharkbite.Irc.WhoisInfo.Operator" access="Public" type="System.Boolean" contract="Normal" get="true" set="false">
            <documentation>
              <summary>
            Whether the user is an operator or not.
            </summary>
              <value>True if the user is an IRC operator.</value>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.WhoisInfo.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.WhoisInfo.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Serves as a hash function for a particular type, suitable
      for use in hashing algorithms and data structures like a hash table.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.WhoisInfo.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.WhoisInfo.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetChannels" id="M:Sharkbite.Irc.WhoisInfo.GetChannels" access="Public" contract="Normal" returnType="System.String[]">
            <documentation>
              <summary>
            An array of channel names. Names may have =,@, or + prefixed to them.
            </summary>
              <returns>A string array.</returns>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.WhoisInfo.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.WhoisInfo.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </class>
        <interface name="IParser" id="T:Sharkbite.Irc.IParser" access="Public">
          <documentation>
            <summary>
            Classes should implement this Interface in order to act as custom
            parsers for the raw messages received from IRC servers.
            </summary>
          </documentation>
          <method name="Parse" id="M:Sharkbite.Irc.IParser.Parse(System.String)" access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary>
            Send the raw IRC message to this custom parser. <i>This
            consumes the message and it will not be processed by the default
            or any other custom parsers after this one.</i></summary>
              <param name="message">The raw message from the IRC server.</param>
            </documentation>
            <parameter name="message" type="System.String" />
          </method>
          <method name="CanParse" id="M:Sharkbite.Irc.IParser.CanParse(System.String)" access="Public" contract="Abstract" returnType="System.Boolean">
            <documentation>
              <summary>
            Before a message is passed to the custom parser
            the Connection will check if the IRC message is the right kind.
            </summary>
              <param name="line">The raw message from the IRC server.</param>
              <returns>True if this parser can process the message.</returns>
            </documentation>
            <parameter name="line" type="System.String" />
          </method>
        </interface>
        <structure name="ConnectionArgs" id="T:Sharkbite.Irc.ConnectionArgs" access="Public">
          <documentation>
            <summary>
            A collection of parameters necessary to establish
            an IRC connection.
            </summary>
          </documentation>
          <base name="ValueType" id="T:System.ValueType" type="System.ValueType" />
          <constructor name=".ctor" id="M:Sharkbite.Irc.ConnectionArgs.#ctor(System.String,System.String)" access="Public">
            <documentation>
              <summary>
            Create a new instance initialized with the default values:
            TCP/IP port 6667, no server password, and user mode
            invisible.
            </summary>
              <param name="name">The nick, user name, and real name are 
            all set to this value.</param>
              <param name="hostname">The hostname of the IRC server.</param>
            </documentation>
            <parameter name="name" type="System.String" />
            <parameter name="hostname" type="System.String" />
          </constructor>
          <property name="Hostname" id="P:Sharkbite.Irc.ConnectionArgs.Hostname" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            The IRC server hostname
            </summary>
              <value>The full hostname such as irc.gamesnet.net</value>
            </documentation>
          </property>
          <property name="ModeMask" id="P:Sharkbite.Irc.ConnectionArgs.ModeMask" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            Set's the user's initial IRC mode mask. Set to 0 to recieve wallops
            and be invisible. Set to 4 to be invisible and not receive wallops.
            </summary>
              <value>A number mask such as 0 or 4.</value>
            </documentation>
          </property>
          <property name="Nick" id="P:Sharkbite.Irc.ConnectionArgs.Nick" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            The user's nick name.
            </summary>
              <value>A string which conforms to the IRC nick standard.</value>
            </documentation>
          </property>
          <property name="Port" id="P:Sharkbite.Irc.ConnectionArgs.Port" access="Public" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            The TCP/IP port the IRC listens server listens on.
            </summary>
              <value> Normally should be set to 6667. </value>
            </documentation>
          </property>
          <property name="RealName" id="P:Sharkbite.Irc.ConnectionArgs.RealName" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            The user's 'real' name.
            </summary>
              <value>A short string with any legal characters.</value>
            </documentation>
          </property>
          <property name="UserName" id="P:Sharkbite.Irc.ConnectionArgs.UserName" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            The user's machine logon name.
            </summary>
              <value>A short string with any legal characters.</value>
            </documentation>
          </property>
          <property name="ServerPassword" id="P:Sharkbite.Irc.ConnectionArgs.ServerPassword" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary>
            The password for this server. These are seldomly used. Set to '*' 
            </summary>
              <value>A short string with any legal characters.</value>
            </documentation>
          </property>
          <method name="Finalize" id="M:Sharkbite.Irc.ConnectionArgs.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void">
            <documentation>
              <summary>
                <para>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before
   the <see cref="T:System.Object" /> is reclaimed by garbage collection.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetHashCode" id="M:Sharkbite.Irc.ConnectionArgs.GetHashCode" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.Int32">
            <documentation>
              <summary>
                <para>Returns the hash code for this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="Equals" id="M:Sharkbite.Irc.ConnectionArgs.Equals(System.Object)" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.Boolean">
            <documentation>
              <summary>
                <para>Indicates whether this instance and a specified object are equal.</para>
              </summary>
            </documentation>
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Sharkbite.Irc.ConnectionArgs.ToString" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.String">
            <documentation>
              <summary>
                <para>Returns the fully qualified type name of this instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="GetType" id="M:Sharkbite.Irc.ConnectionArgs.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type">
            <documentation>
              <summary>
                <para>Gets the <see cref="T:System.Type" /> of the current instance.</para>
              </summary>
            </documentation>
          </method>
          <method name="MemberwiseClone" id="M:Sharkbite.Irc.ConnectionArgs.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object">
            <documentation>
              <summary>
                <para>Creates a shallow copy of the current <see cref="T:System.Object" />.</para>
              </summary>
            </documentation>
          </method>
        </structure>
        <delegate name="ReplyEventHandler" id="T:Sharkbite.Irc.ReplyEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Messages that are not handled by other events and are not errors.
            </summary>
            <param name="code">The RFC 2812 numeric code.</param>
            <param name="message">The unparsed message text.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnReply" />
          </documentation>
          <parameter name="code" type="Sharkbite.Irc.ReplyCode" />
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="ErrorMessageEventHandler" id="T:Sharkbite.Irc.ErrorMessageEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Error messages from the IRC server.
            </summary>
            <param name="code">The RFC 2812 or custom numeric code.</param>
            <param name="message">The error message text.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnError" />
          </documentation>
          <parameter name="code" type="Sharkbite.Irc.ReplyCode" />
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="AwayEventHandler" id="T:Sharkbite.Irc.AwayEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A Notice or Private message was sent to someone
            whose status is away.
            </summary>
            <param name="nick">The nick of the user who is away.</param>
            <param name="awayMessage">An away message, if any, set by the user. </param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnAway" />
          </documentation>
          <parameter name="nick" type="System.String" />
          <parameter name="awayMessage" type="System.String" />
        </delegate>
        <delegate name="InviteSentEventHandler" id="T:Sharkbite.Irc.InviteSentEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            An Invite message was successfully sent to another user. 
            </summary>
            <param name="nick">The nick of the user who was invited</param>
            <param name="channel">The name of the channel the user was invited to join</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnInviteSent" />
          </documentation>
          <parameter name="nick" type="System.String" />
          <parameter name="channel" type="System.String" />
        </delegate>
        <delegate name="NickErrorEventHandler" id="T:Sharkbite.Irc.NickErrorEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Called when a nick change fails.
            </summary>
            <remarks>
              <para>This method can be called under 2 conditions:
            It can arise when the user is already 
            registered with the IRC server and is trying change his nick.
            Or when the user is trying to register for the first time with 
            the IRC server and it fails.</para>
              <para>Note that if the later arises then you will have to manually
            complete the regsitration process.</para>
            </remarks>
            <param name="badNick">The nick which caused the problem</param>
            <param name="reason">A message explaining the error</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnNickError" />
          </documentation>
          <parameter name="badNick" type="System.String" />
          <parameter name="reason" type="System.String" />
        </delegate>
        <delegate name="PingEventHandler" id="T:Sharkbite.Irc.PingEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Called when a server sends a keep-alive Ping.
            </summary>
            <param name="message">The message that the IRC server wants echoed back to it.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPing" />
          </documentation>
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="RegisteredEventHandler" id="T:Sharkbite.Irc.RegisteredEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Connection with IRC server is open and registered.
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnRegistered" />
          </documentation>
        </delegate>
        <delegate name="DisconnectingEventHandler" id="T:Sharkbite.Irc.DisconnectingEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            This connection is about to be closed 
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnDisconnecting" />
          </documentation>
        </delegate>
        <delegate name="DisconnectedEventHandler" id="T:Sharkbite.Irc.DisconnectedEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            This connection has been closed 
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnDisconnected" />
          </documentation>
        </delegate>
        <delegate name="PublicNoticeEventHandler" id="T:Sharkbite.Irc.PublicNoticeEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A Notice type message was sent to a channel.
            </summary>
            <param name="user">The user who sent the message.</param>
            <param name="channel">The target channel.</param>
            <param name="notice">A message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPublicNotice" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
          <parameter name="notice" type="System.String" />
        </delegate>
        <delegate name="PrivateNoticeEventHandler" id="T:Sharkbite.Irc.PrivateNoticeEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A private Notice type message was sent to the user.
            </summary>
            <param name="user">The user who sent the message.</param>
            <param name="notice">A message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivateNotice" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="notice" type="System.String" />
        </delegate>
        <delegate name="JoinEventHandler" id="T:Sharkbite.Irc.JoinEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has joined a channel.
            </summary>
            <param name="user">Who joined.</param>
            <param name="channel">The channel name.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnJoin" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
        </delegate>
        <delegate name="ActionEventHandler" id="T:Sharkbite.Irc.ActionEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            An action message was sent to a channel.
            </summary>
            <param name="user">The user who expresses the action.</param>
            <param name="channel">The target channel.</param>
            <param name="description">An action.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnAction" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
          <parameter name="description" type="System.String" />
        </delegate>
        <delegate name="PrivateActionEventHandler" id="T:Sharkbite.Irc.PrivateActionEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A private action message was sent to the user.
            </summary>
            <param name="user">The user who expresses the action.</param>
            <param name="description">An action.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivateAction" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="description" type="System.String" />
        </delegate>
        <delegate name="PublicMessageEventHandler" id="T:Sharkbite.Irc.PublicMessageEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A public message was sent to a channel.
            </summary>
            <param name="user">The user who sent the message.</param>
            <param name="channel">The taregt channel.</param>
            <param name="message">A message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPublic" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="NickEventHandler" id="T:Sharkbite.Irc.NickEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A user changed his nickname.
            </summary>
            <param name="user">The user who is changing his nick.</param>
            <param name="newNick">The new nickname.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnNick" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="newNick" type="System.String" />
        </delegate>
        <delegate name="PrivateMessageEventHandler" id="T:Sharkbite.Irc.PrivateMessageEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A private message was sent to the user.
            </summary>
            <param name="user">Who sent the message.</param>
            <param name="message">The message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivate" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="TopicEventHandler" id="T:Sharkbite.Irc.TopicEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A channel's topic has changed.
            </summary>
            <param name="user">Who changed the topic.</param>
            <param name="channel">Which channel had its topic changed.</param>
            <param name="newTopic">The new topic.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnTopicChanged" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
          <parameter name="newTopic" type="System.String" />
        </delegate>
        <delegate name="TopicRequestEventHandler" id="T:Sharkbite.Irc.TopicRequestEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestTopic(System.String)" /> command.
            </summary>
            <param name="channel">The channel who topic was requested.</param>
            <param name="topic">The topic.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnTopicRequest" />
          </documentation>
          <parameter name="channel" type="System.String" />
          <parameter name="topic" type="System.String" />
        </delegate>
        <delegate name="PartEventHandler" id="T:Sharkbite.Irc.PartEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has left a channel. 
            </summary>
            <param name="user">The user who left.</param>
            <param name="channel">The channel he left.</param>
            <param name="reason">The reason for leaving.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPart" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
          <parameter name="reason" type="System.String" />
        </delegate>
        <delegate name="QuitEventHandler" id="T:Sharkbite.Irc.QuitEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has quit IRC.
            </summary>
            <param name="user">The user who quit.</param>
            <param name="reason">A goodbye message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnQuit" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="reason" type="System.String" />
        </delegate>
        <delegate name="InviteEventHandler" id="T:Sharkbite.Irc.InviteEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The user has been invited to a channel.
            </summary>
            <param name="user">Who sent the invite.</param>
            <param name="channel">The target channel.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnInvite" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
        </delegate>
        <delegate name="KickEventHandler" id="T:Sharkbite.Irc.KickEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has been kicked from a channel. 
            </summary>
            <param name="user">Who did the kicking.</param>
            <param name="channel">The channel that the person was kicked from.</param>
            <param name="kickee">Who was kicked.</param>
            <param name="reason">Why the person was kicked.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnKick" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
          <parameter name="kickee" type="System.String" />
          <parameter name="reason" type="System.String" />
        </delegate>
        <delegate name="NamesEventHandler" id="T:Sharkbite.Irc.NamesEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Names(System.String[])" /> request.
            </summary>
            <param name="channel">The channel the user is on. "@" is used for secret channels, "*" for private
            channels, and "=" for public channels.</param>
            <param name="nicks">A list of nicks on the channel. If this is the last reply
            then it wuill be empty. Nicks prefixed with a '@' are channel
            operators. Nicks prefixed with a '+' have voice privileges on
            a moderated channel, i.e. they are allowed to send public messages.</param>
            <param name="last">True if this is the last names reply.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnNames" />
          </documentation>
          <parameter name="channel" type="System.String" />
          <parameter name="nicks" type="System.String[]" />
          <parameter name="last" type="System.Boolean" />
        </delegate>
        <delegate name="ListEventHandler" id="T:Sharkbite.Irc.ListEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.List(System.String[])" /> request.
            </summary>
            <param name="channel">The channel name.</param>
            <param name="visibleNickCount">The number of visible users on that channel.</param>
            <param name="topic">The channel's topic.</param>
            <param name="last">True if this is the last reply.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnList" />
          </documentation>
          <parameter name="channel" type="System.String" />
          <parameter name="visibleNickCount" type="System.Int32" />
          <parameter name="topic" type="System.String" />
          <parameter name="last" type="System.Boolean" />
        </delegate>
        <delegate name="IsonEventHandler" id="T:Sharkbite.Irc.IsonEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Ison(System.String)" /> request.
            </summary>
            <param name="nicks">If someone with this nick is on the same IRC network their nick
            will be returned here. Otherwise nick will be an empty string.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnIson" />
          </documentation>
          <parameter name="nicks" type="System.String" />
        </delegate>
        <delegate name="WhoEventHandler" id="T:Sharkbite.Irc.WhoEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Who(System.String,System.Boolean)" /> request.
            </summary>
            <param name="user">The subject of the query</param>
            <param name="channel">The channel the user is on</param>
            <param name="ircServer">The name of the user's IRC server</param>
            <param name="mask">The user's mode mask</param>
            <param name="hopCount">Number of network hops to the user</param>
            <param name="realName">The user's real name</param>
            <param name="last">True if this is the last response</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnWho" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
          <parameter name="ircServer" type="System.String" />
          <parameter name="mask" type="System.String" />
          <parameter name="hopCount" type="System.Int32" />
          <parameter name="realName" type="System.String" />
          <parameter name="last" type="System.Boolean" />
        </delegate>
        <delegate name="WhoisEventHandler" id="T:Sharkbite.Irc.WhoisEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Whois(System.String)" /> request.
            </summary>
            <param name="whoisInfo">The data associated with the nick queried.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnWho" />
          </documentation>
          <parameter name="whoisInfo" type="Sharkbite.Irc.WhoisInfo" />
        </delegate>
        <delegate name="WhowasEventHandler" id="T:Sharkbite.Irc.WhowasEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Whowas(System.String)" /> request.
            </summary>
            <param name="user">Information on the user.</param>
            <param name="realName">The user's real name.</param>
            <param name="last">True if this is the final reply.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnWhowas" />
          </documentation>
          <parameter name="user" type="Sharkbite.Irc.UserInfo" />
          <parameter name="realName" type="System.String" />
          <parameter name="last" type="System.Boolean" />
        </delegate>
        <delegate name="UserModeChangeEventHandler" id="T:Sharkbite.Irc.UserModeChangeEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone's user mode has changed.
            </summary>
            <param name="action">Whether a mode was added or removed.</param>
            <param name="mode">The mode that was changed.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnUserModeChange" />
          </documentation>
          <parameter name="action" type="Sharkbite.Irc.ModeAction" />
          <parameter name="mode" type="Sharkbite.Irc.UserMode" />
        </delegate>
        <delegate name="UserModeRequestEventHandler" id="T:Sharkbite.Irc.UserModeRequestEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestUserModes" /> command for this user.
            </summary>
            <param name="modes">The complete list of user modes as an array.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnUserModeRequest" />
          </documentation>
          <parameter name="modes" type="Sharkbite.Irc.UserMode[]" />
        </delegate>
        <delegate name="ChannelModeRequestEventHandler" id="T:Sharkbite.Irc.ChannelModeRequestEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestChannelModes(System.String)" /> command.
            </summary>
            <param name="channel">The name of the channel.</param>
            <param name="modes">The complete list of channel modes as an array.</param>
            <param name="param">Any extra information such as the max number 
            of users (if there is a limit). May be empty.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelModeRequest" />
          </documentation>
          <parameter name="channel" type="System.String" />
          <parameter name="modes" type="Sharkbite.Irc.ChannelMode[]" />
          <parameter name="param" type="System.String" />
        </delegate>
        <delegate name="ChannelModeChangeEventHandler" id="T:Sharkbite.Irc.ChannelModeChangeEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A channel's mode has changed.
            </summary>
            <param name="who">Who changed the mode.</param>
            <param name="channel">The name of the channel.</param>
            <param name="action">Added or removed.</param>
            <param name="modes">The complete list of channel modes as an array.</param>
            <param name="param">Any extra information such as the number of users if
            there is a limit. May be empty.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelModeChange" />
          </documentation>
          <parameter name="who" type="Sharkbite.Irc.UserInfo" />
          <parameter name="channel" type="System.String" />
          <parameter name="action" type="Sharkbite.Irc.ModeAction" />
          <parameter name="modes" type="Sharkbite.Irc.ChannelMode[]" />
          <parameter name="param" type="System.String" />
        </delegate>
        <delegate name="ChannelListEventHandler" id="T:Sharkbite.Irc.ChannelListEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Response to a <see cref="M:Sharkbite.Irc.Sender.RequestChannelList(System.String,Sharkbite.Irc.ChannelMode)" /> command.
            </summary>
            <param name="channel">The channel name.</param>
            <param name="mode">What type is this a list? For example bans, invitation masks, etc..</param>
            <param name="item">A mask or nick (in the case of ChannelCreator).</param>
            <param name="last">Is this the last item. If its the last then the item paramter
            will be empty unless the mode is ChannelCreator.</param>
            <param name="who">Who set the mask (not for ChannelCreator).</param>
            <param name="whenSet">When was it set (not for ChannelCreator).</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelList" />
          </documentation>
          <parameter name="channel" type="System.String" />
          <parameter name="mode" type="Sharkbite.Irc.ChannelMode" />
          <parameter name="item" type="System.String" />
          <parameter name="who" type="Sharkbite.Irc.UserInfo" />
          <parameter name="whenSet" type="System.Int64" />
          <parameter name="last" type="System.Boolean" />
        </delegate>
        <delegate name="CtcpReplyEventHandler" id="T:Sharkbite.Irc.CtcpReplyEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has replied to a Ctcp request sent by this client.
            </summary>
            <param name="who">Who sent the reply.</param>
            <param name="command">The Ctcp command this replies to."</param>
            <param name="reply">The text of the reply.</param>
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpReply" />
          </documentation>
          <parameter name="command" type="System.String" />
          <parameter name="who" type="Sharkbite.Irc.UserInfo" />
          <parameter name="reply" type="System.String" />
        </delegate>
        <delegate name="CtcpRequestEventHandler" id="T:Sharkbite.Irc.CtcpRequestEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has sent a Ctcp request.
            </summary>
            <param name="who">Who sent the request.</param>
            <param name="command">The Ctcp command to send to IRC."</param>
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpRequest" />
          </documentation>
          <parameter name="command" type="System.String" />
          <parameter name="who" type="Sharkbite.Irc.UserInfo" />
        </delegate>
        <delegate name="CtcpPingReplyEventHandler" id="T:Sharkbite.Irc.CtcpPingReplyEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has replied to a Ctcp ping request sent by this client.
            </summary>
            <param name="who">Who sent the reply.</param>
            <param name="timestamp">The timestamp originally sent in the request."</param>
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpPingReply" />
          </documentation>
          <parameter name="who" type="Sharkbite.Irc.UserInfo" />
          <parameter name="timestamp" type="System.String" />
        </delegate>
        <delegate name="CtcpPingRequestEventHandler" id="T:Sharkbite.Irc.CtcpPingRequestEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has sent a Ctcp Ping request.
            </summary>
            <param name="who">Who sent the request.</param>
            <param name="timestamp">The timestamp which should be sent 
            back."</param>
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpPingRequest" />
          </documentation>
          <parameter name="who" type="Sharkbite.Irc.UserInfo" />
          <parameter name="timestamp" type="System.String" />
        </delegate>
        <delegate name="DccChatRequestEventHandler" id="T:Sharkbite.Irc.DccChatRequestEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Someone has requested a DCC chat session.
            </summary>
            <param name="dccUserInfo">The collection of information about the remote user.</param>
            <see cref="F:Sharkbite.Irc.DccListener.OnDccChatRequest" />
          </documentation>
          <parameter name="dccUserInfo" type="Sharkbite.Irc.DccUserInfo" />
        </delegate>
        <delegate name="ChatSessionOpenedEventHandler" id="T:Sharkbite.Irc.ChatSessionOpenedEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A DCC chat session has been opened with a remote user.
            </summary>
            <param name="session">Which session is the source of the event.</param>
            <see cref="F:Sharkbite.Irc.DccChatSession.OnChatSessionOpened" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccChatSession" />
        </delegate>
        <delegate name="ChatSessionClosedEventHandler" id="T:Sharkbite.Irc.ChatSessionClosedEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A DCC chat session has been closed.
            </summary>
            <param name="session">Which session is the source of the event.</param>
            <see cref="F:Sharkbite.Irc.DccChatSession.OnChatSessionClosed" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccChatSession" />
        </delegate>
        <delegate name="ChatMessageReceivedEventHandler" id="T:Sharkbite.Irc.ChatMessageReceivedEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A DCC chat message was received from the remote user.
            </summary>
            <param name="session">Which session is the source of the event.</param>
            <param name="message">A string message.</param>
            <see cref="F:Sharkbite.Irc.DccChatSession.OnChatMessageReceived" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccChatSession" />
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="ChatRequestTimeoutEventHandler" id="T:Sharkbite.Irc.ChatRequestTimeoutEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            When trying to initiate a DCC chat request the remote user
            did not respond within the alotted time.
            </summary>
            <param name="session">Which session is the source of the event.</param>
            <see cref="F:Sharkbite.Irc.DccChatSession.OnChatRequestTimeout" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccChatSession" />
        </delegate>
        <delegate name="DccSendRequestEventHandler" id="T:Sharkbite.Irc.DccSendRequestEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Another user has offered to send a file.
            </summary>
            <param name="dccUserInfo">The collection of information about the remote user.</param>
            <param name="fileName">The name of the file to be sent.</param>
            <param name="size">The size in bytes of the offered file.</param>
            <param name="turbo">True if the sender will use send-ahead mode.</param>
            <see cref="F:Sharkbite.Irc.DccListener.OnDccSendRequest" />
          </documentation>
          <parameter name="dccUserInfo" type="Sharkbite.Irc.DccUserInfo" />
          <parameter name="fileName" type="System.String" />
          <parameter name="size" type="System.Int32" />
          <parameter name="turbo" type="System.Boolean" />
        </delegate>
        <delegate name="FileTransferTimeoutEventHandler" id="T:Sharkbite.Irc.FileTransferTimeoutEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            There has been no activity in this session for the timeout period. The 
            session is automatically closed and this event is raised. 
            </summary>
            <param name="session">The session in which the timeout occurred.</param>
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferTimeout" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccFileSession" />
        </delegate>
        <delegate name="FileTransferStartedEventHandler" id="T:Sharkbite.Irc.FileTransferStartedEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The file transfer connection has been successfully opened and the data
            transfer has begun.
            </summary>
            <param name="session">The session in which the transfer has started.</param>
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferStarted" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccFileSession" />
        </delegate>
        <delegate name="FileTransferInterruptedEventHandler" id="T:Sharkbite.Irc.FileTransferInterruptedEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Something happened to stop the transfer before it was completed. Normally
            this will be due to one of the sides canceling the transfer.
            </summary>
            <param name="session">The session in which the transfer was interrupted.</param>
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferInterrupted" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccFileSession" />
        </delegate>
        <delegate name="FileTransferCompletedEventHandler" id="T:Sharkbite.Irc.FileTransferCompletedEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A file was succefully transfered.
            </summary>
            <param name="session">The session in which the transfer was successfully completed.</param>
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferCompleted" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccFileSession" />
        </delegate>
        <delegate name="FileTransferProgressEventHandler" id="T:Sharkbite.Irc.FileTransferProgressEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Called for each successful data block transfer. This allows the developer
            to show a transfer progress display of some kind.
            </summary>
            <param name="session">The session in which data was transfered.</param>
            <param name="bytesSent">The number of bytes sent in this block. The DccFileSession
            contains the cumulative number of bytes sent/received and the total number
            the will be processed.</param>
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferProgress" />
          </documentation>
          <parameter name="session" type="Sharkbite.Irc.DccFileSession" />
          <parameter name="bytesSent" type="System.Int32" />
        </delegate>
        <delegate name="DccGetRequestEventHandler" id="T:Sharkbite.Irc.DccGetRequestEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            A remote user has requested a file. To respond
            use <see cref="M:Sharkbite.Irc.DccFileSession.Send(Sharkbite.Irc.DccUserInfo,System.String,System.Int32,Sharkbite.Irc.DccFileInfo,System.Int32,System.Boolean)" /> with the relevant information.
            </summary>
            <param name="dccUserInfo">The requestor's information.</param>
            <param name="fileName">The name of the requested file.</param>
            <param name="turbo">True to use send-ahead mode for transfers.</param>
            <see cref="F:Sharkbite.Irc.DccListener.OnDccGetRequest" />
          </documentation>
          <parameter name="dccUserInfo" type="Sharkbite.Irc.DccUserInfo" />
          <parameter name="fileName" type="System.String" />
          <parameter name="turbo" type="System.Boolean" />
        </delegate>
        <delegate name="RawMessageReceivedEventHandler" id="T:Sharkbite.Irc.RawMessageReceivedEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The full unparsed text messages received from the IRC server. It
            includes all messages received except for those exchanged during a DCC chat.
            </summary>
            <param name="message">The text received.</param>
            <see cref="F:Sharkbite.Irc.Connection.OnRawMessageReceived" />
          </documentation>
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="RawMessageSentEventHandler" id="T:Sharkbite.Irc.RawMessageSentEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The full unparsed text messages sent to the IRC server. It
            includes all messages sent except for those exchanged during a DCC chat.
            </summary>
            <param name="message">The text sent.</param>
            <see cref="F:Sharkbite.Irc.Connection.OnRawMessageSent" />
          </documentation>
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="VersionEventHandler" id="T:Sharkbite.Irc.VersionEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Version" /> request.
            </summary>
            <param name="versionInfo">The information string in the form 
            IRC: [version].[debuglevel] [server] :[comments]</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnVersion" />
          </documentation>
          <parameter name="versionInfo" type="System.String" />
        </delegate>
        <delegate name="MotdEventHandler" id="T:Sharkbite.Irc.MotdEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The server's "Message of the Day" if any.
            </summary>
            <param name="message">An information string.</param>
            <param name="last">True if this is the last in the set of messages.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnMotd" />
          </documentation>
          <parameter name="message" type="System.String" />
          <parameter name="last" type="System.Boolean" />
        </delegate>
        <delegate name="TimeEventHandler" id="T:Sharkbite.Irc.TimeEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Time" /> request.
            </summary>
            <param name="time">The name of the server and
            its local time</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnTime" />
          </documentation>
          <parameter name="time" type="System.String" />
        </delegate>
        <delegate name="InfoEventHandler" id="T:Sharkbite.Irc.InfoEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to an <see cref="M:Sharkbite.Irc.Sender.Info" /> request.
            </summary>
            <param name="message">An information string.</param>
            <param name="last">True if this is the last in the set of messages.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnInfo" />
          </documentation>
          <parameter name="message" type="System.String" />
          <parameter name="last" type="System.Boolean" />
        </delegate>
        <delegate name="AdminEventHandler" id="T:Sharkbite.Irc.AdminEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to an <see cref="M:Sharkbite.Irc.Sender.Admin" /> request.
            </summary>
            <param name="message">An information string.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnAdmin" />
          </documentation>
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="LusersEventHandler" id="T:Sharkbite.Irc.LusersEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Lusers" /> request.
            </summary>
            <param name="message">An information string.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnLusers" />
          </documentation>
          <parameter name="message" type="System.String" />
        </delegate>
        <delegate name="LinksEventHandler" id="T:Sharkbite.Irc.LinksEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Links" /> request.
            </summary>
            <param name="mask">The hostname as it appears in IRC queries.</param>
            <param name="hostname">The actual hostname.</param>
            <param name="hopCount">The number of hops from this server to the target server.</param>
            <param name="serverInfo">Information about the server, usually the network name.</param>
            <param name="done">True if this is the last message in the series. If it is the
            last it will not contain any server information.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnLinks" />
          </documentation>
          <parameter name="mask" type="System.String" />
          <parameter name="hostname" type="System.String" />
          <parameter name="hopCount" type="System.Int32" />
          <parameter name="serverInfo" type="System.String" />
          <parameter name="done" type="System.Boolean" />
        </delegate>
        <delegate name="StatsEventHandler" id="T:Sharkbite.Irc.StatsEventHandler" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Stats(Sharkbite.Irc.StatsQuery)" /> request.
            </summary>
            <param name="queryType">What kind of query this is in response to.</param>
            <param name="message">The actual response.</param>
            <param name="done">True if this is the last message in the series.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnStats" />
          </documentation>
          <parameter name="queryType" type="Sharkbite.Irc.StatsQuery" />
          <parameter name="message" type="System.String" />
          <parameter name="done" type="System.Boolean" />
        </delegate>
        <enumeration name="ModeAction" id="T:Sharkbite.Irc.ModeAction" access="Public">
          <documentation>
            <summary>
            Whether a mode has been added or removed.
            </summary>
          </documentation>
          <field name="Add" id="F:Sharkbite.Irc.ModeAction.Add" access="Public" type="Sharkbite.Irc.ModeAction" contract="Static" literal="true">
            <documentation>
              <summary>
            Mode added
            </summary>
            </documentation>
          </field>
          <field name="Remove" id="F:Sharkbite.Irc.ModeAction.Remove" access="Public" type="Sharkbite.Irc.ModeAction" contract="Static" literal="true">
            <documentation>
              <summary>
            Mode removed
            </summary>
            </documentation>
          </field>
        </enumeration>
        <enumeration name="UserMode" id="T:Sharkbite.Irc.UserMode" access="Public">
          <documentation>
            <summary>
            The possible user modes.
            </summary>
          </documentation>
          <field name="Away" id="F:Sharkbite.Irc.UserMode.Away" access="Public" type="Sharkbite.Irc.UserMode" contract="Static" literal="true">
            <documentation>
              <summary>
            User is away
            </summary>
            </documentation>
          </field>
          <field name="Wallops" id="F:Sharkbite.Irc.UserMode.Wallops" access="Public" type="Sharkbite.Irc.UserMode" contract="Static" literal="true">
            <documentation>
              <summary>
            User will receive server status messages
            </summary>
            </documentation>
          </field>
          <field name="Invisible" id="F:Sharkbite.Irc.UserMode.Invisible" access="Public" type="Sharkbite.Irc.UserMode" contract="Static" literal="true">
            <documentation>
              <summary>
            User cannot be seen by certain IRC queries
            </summary>
            </documentation>
          </field>
          <field name="Operator" id="F:Sharkbite.Irc.UserMode.Operator" access="Public" type="Sharkbite.Irc.UserMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The user is an IRC operator (IRCOP)
            </summary>
            </documentation>
          </field>
          <field name="Restricted" id="F:Sharkbite.Irc.UserMode.Restricted" access="Public" type="Sharkbite.Irc.UserMode" contract="Static" literal="true">
            <documentation>
              <summary>
            Not used
            </summary>
            </documentation>
          </field>
          <field name="LocalOperator" id="F:Sharkbite.Irc.UserMode.LocalOperator" access="Public" type="Sharkbite.Irc.UserMode" contract="Static" literal="true">
            <documentation>
              <summary>
            User is a channel operator/owner
            </summary>
            </documentation>
          </field>
        </enumeration>
        <enumeration name="ChannelMode" id="T:Sharkbite.Irc.ChannelMode" access="Public">
          <documentation>
            <summary>
            Possible channel modes.
            </summary>
          </documentation>
          <field name="ChannelCreator" id="F:Sharkbite.Irc.ChannelMode.ChannelCreator" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The mode 'O' is only used in conjunction with "safe channels" and
            SHALL NOT be manipulated by users. Servers use it to give the user
            creating the channel the status of "channel creator".
            </summary>
            </documentation>
          </field>
          <field name="ChannelOperator" id="F:Sharkbite.Irc.ChannelMode.ChannelOperator" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The mode 'o' is used to toggle the operator status of a channel
            member. 
            	
            Should include a nick or user mask parameter.
            </summary>
            </documentation>
          </field>
          <field name="Voice" id="F:Sharkbite.Irc.ChannelMode.Voice" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The mode 'v' is used to give and take voice privilege to/from a
            channel member. Users with this privilege can talk on moderated
            channels. 
            	
            Should include a nick or user mask parameter.
            </summary>
            </documentation>
          </field>
          <field name="Anonymous" id="F:Sharkbite.Irc.ChannelMode.Anonymous" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The channel flag 'a' defines an anonymous channel. This means that
            when a message sent to the channel is sent by the server to users,
            and the origin is a user, then it MUST be masked. 
            	
            No param required.
            </summary>
            </documentation>
          </field>
          <field name="InviteOnly" id="F:Sharkbite.Irc.ChannelMode.InviteOnly" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            When the channel flag 'i' is set, new members are only accepted if
            their mask matches Invite-list or they have been
            invited by a channel operator. This flag also restricts the usage of
            the INVITE command to channel operators.
            
            No param required.
            </summary>
            </documentation>
          </field>
          <field name="Moderated" id="F:Sharkbite.Irc.ChannelMode.Moderated" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The channel flag 'm' is used to control who may speak on a channel.
            When it is set, only channel operators, and members who have been
            given the voice privilege may send messages to the channel.
            
            No param required.
            </summary>
            </documentation>
          </field>
          <field name="NoOutside" id="F:Sharkbite.Irc.ChannelMode.NoOutside" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            When the channel flag 'n' is set, only channel members MAY send
            messages to the channel.
            	
            No param required
            </summary>
            </documentation>
          </field>
          <field name="Quiet" id="F:Sharkbite.Irc.ChannelMode.Quiet" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The channel flag 'q' is for use by servers only. When set, it
            restricts the type of data sent to users about the channel
            operations: other user joins, parts and nick changes are not sent.
            From a user's point of view, the channel contains only one user.
            </summary>
            </documentation>
          </field>
          <field name="Private" id="F:Sharkbite.Irc.ChannelMode.Private" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The channel flag 'p' is used to mark a channel "private" and the
            channel flag 's' to mark a channel "secret". Both properties are
            similar and conceal the existence of the channel from other users.
            	
            No param required.
            </summary>
            </documentation>
          </field>
          <field name="Secret" id="F:Sharkbite.Irc.ChannelMode.Secret" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            When a channel is "secret", in addition to the restrictions of Private, the
            server will act as if the channel does not exist for queries like the
            TOPIC, LIST, NAMES commands. Note that there is one exception to
            this rule: servers will correctly reply to the MODE command.
            Finally, secret channels are not accounted for in the reply to the
            LUSERS command when the mask parameter is specified.
            	
            No param required.
            </summary>
            </documentation>
          </field>
          <field name="ServerReop" id="F:Sharkbite.Irc.ChannelMode.ServerReop" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The channel flag 'r' is only available on channels which name begins
            with the character '!' and MAY only be toggled by the "channel
            creator".
            	
            No param required.
            </summary>
            </documentation>
          </field>
          <field name="TopicSettable" id="F:Sharkbite.Irc.ChannelMode.TopicSettable" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            The channel flag 't' is used to restrict the usage of the TOPIC
            command to channel operators.
            
            No param required.
            </summary>
            </documentation>
          </field>
          <field name="Password" id="F:Sharkbite.Irc.ChannelMode.Password" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            When a channel key is set (by using the mode 'k'), servers MUST
            reject their local users request to join the channel unless this key
            is given.
            	
            Param is the channel password.
            </summary>
            </documentation>
          </field>
          <field name="UserLimit" id="F:Sharkbite.Irc.ChannelMode.UserLimit" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            A user limit may be set on channels by using the channel flag 'l'.
            When the limit is reached, servers MUST forbid their local users to
            join the channel.
            	
            Param is a whole number indicating the max number of users.
            </summary>
            </documentation>
          </field>
          <field name="Ban" id="F:Sharkbite.Irc.ChannelMode.Ban" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            When a user requests to join a channel, his local server checks if
            the user's address matches any of the ban masks set for the channel.
            If a match is found, the user request is denied unless the address
            also matches an exception mask set for the channel.
            
            Param is a nick or user mask.
            </summary>
            </documentation>
          </field>
          <field name="Exception" id="F:Sharkbite.Irc.ChannelMode.Exception" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            An error ocurred.
            </summary>
            </documentation>
          </field>
          <field name="Invitation" id="F:Sharkbite.Irc.ChannelMode.Invitation" access="Public" type="Sharkbite.Irc.ChannelMode" contract="Static" literal="true">
            <documentation>
              <summary>
            For channels which have the invite-only flag set, users whose 
            address matches an invitation mask set for the channel are 
            allowed to join the channel without any invitation.
            
            Param is a nick or user mask.
            </summary>
            </documentation>
          </field>
        </enumeration>
        <enumeration name="StatsQuery" id="T:Sharkbite.Irc.StatsQuery" access="Public">
          <documentation>
            <summary>
            The possible stats message query parameters.
            </summary>
          </documentation>
          <field name="Connections" id="F:Sharkbite.Irc.StatsQuery.Connections" access="Public" type="Sharkbite.Irc.StatsQuery" contract="Static" literal="true">
            <documentation>
              <summary>
            A list of server connections.
            </summary>
            </documentation>
          </field>
          <field name="CommandUsage" id="F:Sharkbite.Irc.StatsQuery.CommandUsage" access="Public" type="Sharkbite.Irc.StatsQuery" contract="Static" literal="true">
            <documentation>
              <summary>
            The usage count for each of command supported
            by the server.
            </summary>
            </documentation>
          </field>
          <field name="Operators" id="F:Sharkbite.Irc.StatsQuery.Operators" access="Public" type="Sharkbite.Irc.StatsQuery" contract="Static" literal="true">
            <documentation>
              <summary>
            The list of IRC operators.
            </summary>
            </documentation>
          </field>
          <field name="Uptime" id="F:Sharkbite.Irc.StatsQuery.Uptime" access="Public" type="Sharkbite.Irc.StatsQuery" contract="Static" literal="true">
            <documentation>
              <summary>
            The server uptime.
            </summary>
            </documentation>
          </field>
        </enumeration>
        <enumeration name="ReplyCode" id="T:Sharkbite.Irc.ReplyCode" access="Public">
          <documentation>
            <summary>
            Numeric message codes taken from RFC 2812
            </summary>
          </documentation>
          <field name="RPL_WELCOME" id="F:Sharkbite.Irc.ReplyCode.RPL_WELCOME" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Welcome to the Internet Relay Networ [nick]![user]@[host]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_YOURHOST" id="F:Sharkbite.Irc.ReplyCode.RPL_YOURHOST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Your host is [servername], running version [ver]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_CREATED" id="F:Sharkbite.Irc.ReplyCode.RPL_CREATED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: This server was created [date]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_MYINFO" id="F:Sharkbite.Irc.ReplyCode.RPL_MYINFO" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [servername] [version] [available user modes [available channel modes]
            
            Description: The server sends Replies 001 to 004 to a user upon
            successful registration.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_BOUNCE" id="F:Sharkbite.Irc.ReplyCode.RPL_BOUNCE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Try server [server name], port [port number]
            
            Description: Sent by the server to a user to suggest an alternative
            server. This is often used when the connection is
            refused because the server is already full.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_USERHOST" id="F:Sharkbite.Irc.ReplyCode.RPL_USERHOST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :*1[reply] *( " " [reply] )
            
            Description: Reply format used by USERHOST to list replies to
            the query list. The reply string is composed as
            follows:
            reply = nickname [ "*" ] "=" ( "+" / "-" ) hostname
            The '*' indicates whether the client has registered
            as an Operator. The '-' or '+' characters represent
            whether the client has set an AWAY message or not
            respectively.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ISON" id="F:Sharkbite.Irc.ReplyCode.RPL_ISON" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :*1[nick] *( " " [nick] )
            
            Description: Reply format used by ISON to list replies to the
            query list.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_AWAY" id="F:Sharkbite.Irc.ReplyCode.RPL_AWAY" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] :[away message]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_UNAWAY" id="F:Sharkbite.Irc.ReplyCode.RPL_UNAWAY" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :You are no longer marked as being away
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_NOWAWAY" id="F:Sharkbite.Irc.ReplyCode.RPL_NOWAWAY" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :You have been marked as being away
            
            Description: These replies are used with the AWAY command (if
            allowed). RPL_AWAY is sent to any client sending a
            PRIVMSG to a client which is away. RPL_AWAY is only
            sent by the server to which the client is connected.
            Replies RPL_UNAWAY and RPL_NOWAWAY are sent when the
            client removes and sets an AWAY message.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_WHOISUSER" id="F:Sharkbite.Irc.ReplyCode.RPL_WHOISUSER" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] [user] [host] * :[real name]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_WHOISSERVER" id="F:Sharkbite.Irc.ReplyCode.RPL_WHOISSERVER" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] [server] :[server info]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_WHOISOPERATOR" id="F:Sharkbite.Irc.ReplyCode.RPL_WHOISOPERATOR" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] :is an IRC operator
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_WHOISIDLE" id="F:Sharkbite.Irc.ReplyCode.RPL_WHOISIDLE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] [integer] :seconds idle
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFWHOIS" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFWHOIS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] :End of WHOIS list
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_WHOISCHANNELS" id="F:Sharkbite.Irc.ReplyCode.RPL_WHOISCHANNELS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] :*( ( "@" / "+" ) [channel] " " )
            
            Description: Replies 311 - 313, 317 - 319 are all replies
            generated in response to a WHOIS message. Given that
            there are enough parameters present, the answering
            server MUST either formulate a reply out of the above
            numerics (if the query nick is found) or return an
            error reply. The '*' in RPL_WHOISUSER is there as
            the literal character and not as a wild card. For
            each reply set, only RPL_WHOISCHANNELS may appear
            more than once (for long lists of channel names).
            The '@' and '+' characters next to the channel name
            indicate whether a client is a channel operator or
            has been granted permission to speak on a moderated
            channel. The RPL_ENDOFWHOIS reply is used to mark
            the end of processing a WHOIS message.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_WHOWASUSER" id="F:Sharkbite.Irc.ReplyCode.RPL_WHOWASUSER" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] [user] [host] * :[real name]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFWHOWAS" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFWHOWAS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] :End of WHOWAS
            
            Description: When replying to a WHOWAS message, a server MUST use
            the replies RPL_WHOWASUSER, RPL_WHOISSERVER or
            ERR_WASNOSUCHNICK for each nickname in the presented
            list. At the end of all reply batches, there MUST
            be RPL_ENDOFWHOWAS (even if there was only one reply
            and it was an error).
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LISTSTART" id="F:Sharkbite.Irc.ReplyCode.RPL_LISTSTART" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            
            Description: Obsolete. Not used.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LIST" id="F:Sharkbite.Irc.ReplyCode.RPL_LIST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [# visible] :[topic]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LISTEND" id="F:Sharkbite.Irc.ReplyCode.RPL_LISTEND" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :End of LIST
            
            Description: Replies RPL_LIST, RPL_LISTEND mark the actual replies
            with data and end of the server's response to a LIST
            command. If there are no channels available to return,
            only the end reply MUST be sent.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_UNIQOPIS" id="F:Sharkbite.Irc.ReplyCode.RPL_UNIQOPIS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [nickname]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_CHANNELMODEIS" id="F:Sharkbite.Irc.ReplyCode.RPL_CHANNELMODEIS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [mode] [mode params]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_NOTOPIC" id="F:Sharkbite.Irc.ReplyCode.RPL_NOTOPIC" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :No topic is set
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TOPIC" id="F:Sharkbite.Irc.ReplyCode.RPL_TOPIC" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :[topic]
            
            Description: When sending a TOPIC message to determine the
            channel topic, one of two replies is sent. If
            the topic is set, RPL_TOPIC is sent back else
            RPL_NOTOPIC.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_INVITING" id="F:Sharkbite.Irc.ReplyCode.RPL_INVITING" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [nick]
            
            Description: Returned by the server to indicate that the
            attempted INVITE message was successful and is
            being passed onto the end client.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_SUMMONING" id="F:Sharkbite.Irc.ReplyCode.RPL_SUMMONING" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [user] :Summoning user to IRC
            
            Description: Returned by a server answering a SUMMON message to
            indicate that it is summoning that user.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_INVITELIST" id="F:Sharkbite.Irc.ReplyCode.RPL_INVITELIST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [invitemask]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFINVITELIST" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFINVITELIST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :End of channel invite list
            
            Description: When listing the 'invitations masks' for a given channel,
            a server is required to send the list back using the
            RPL_INVITELIST and RPL_ENDOFINVITELIST messages. A
            separate RPL_INVITELIST is sent for each active mask.
            After the masks have been listed (or if none present) a
            RPL_ENDOFINVITELIST MUST be sent.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_EXCEPTLIST" id="F:Sharkbite.Irc.ReplyCode.RPL_EXCEPTLIST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [exceptionmask]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFEXCEPTLIST" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFEXCEPTLIST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :End of channel exception list
            
            Description: When listing the 'exception masks' for a given channel,
            a server is required to send the list back using the
            RPL_EXCEPTLIST and RPL_ENDOFEXCEPTLIST messages. A
            separate RPL_EXCEPTLIST is sent for each active mask.
            After the masks have been listed (or if none present)
            a RPL_ENDOFEXCEPTLIST MUST be sent.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_VERSION" id="F:Sharkbite.Irc.ReplyCode.RPL_VERSION" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [version].[debuglevel] [server] :[comments]
            
            Description: Reply by the server showing its version details.
            The [version] is the version of the software being
            used (including any patchlevel revisions) and the
            [debuglevel] is used to indicate if the server is
            running in "debug mode".
            The "comments" field may contain any comments about
            the version or further version details.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_WHOREPLY" id="F:Sharkbite.Irc.ReplyCode.RPL_WHOREPLY" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [user] [host] [server] [nick ( "H" / "G" ] ["*"] [ ( "@" / "+" ) :[hopcount] [real name]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFWHO" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFWHO" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [name] :End of WHO list
            
            Description: The RPL_WHOREPLY and RPL_ENDOFWHO pair are used
            to answer a WHO message. The RPL_WHOREPLY is only
            sent if there is an appropriate match to the WHO
            query. If there is a list of parameters supplied
            with a WHO message, a RPL_ENDOFWHO MUST be sent
            after processing each list item with [name] being
            the item.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_NAMREPLY" id="F:Sharkbite.Irc.ReplyCode.RPL_NAMREPLY" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: ( "=" / "*" / "@" ) [channel :[ "@" / "+" ] [nick] *( " " [ "@" / "+" ] [nick] 
            
            Description: "@" is used for secret channels, "*" for private
            channels, and "=" for others (public channels).
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFNAMES" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFNAMES" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :End of NAMES list
            
            Description: To reply to a NAMES message, a reply pair consisting
            of RPL_NAMREPLY and RPL_ENDOFNAMES is sent by the
            server back to the client. If there is no channel
            found as in the query, then only RPL_ENDOFNAMES is
            returned. The exception to this is when a NAMES
            message is sent with no parameters and all visible
            channels and contents are sent back in a series of
            RPL_NAMEREPLY messages with a RPL_ENDOFNAMES to mark
            the end.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LINKS" id="F:Sharkbite.Irc.ReplyCode.RPL_LINKS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [mask] [server] :[hopcount] [server info]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFLINKS" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFLINKS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [mask] :End of LINKS list
            
            Description: In replying to the LINKS message, a server MUST send
            replies back using the RPL_LINKS numeric and mark the
            end of the list using an RPL_ENDOFLINKS reply.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_BANLIST" id="F:Sharkbite.Irc.ReplyCode.RPL_BANLIST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [banmask]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFBANLIST" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFBANLIST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :End of channel ban list
            
            Description: When listing the active 'bans' for a given channel,
            a server is required to send the list back using the
            RPL_BANLIST and RPL_ENDOFBANLIST messages. A separate
            RPL_BANLIST is sent for each active banmask. After the
            banmasks have been listed (or if none present) a
            RPL_ENDOFBANLIST MUST be sent.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_INFO" id="F:Sharkbite.Irc.ReplyCode.RPL_INFO" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :[string]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFINFO" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFINFO" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :End of INFO list
            
            Description: A server responding to an INFO message is required to
            send all its 'info' in a series of RPL_INFO messages
            with a RPL_ENDOFINFO reply to indicate the end of the
            replies.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_MOTDSTART" id="F:Sharkbite.Irc.ReplyCode.RPL_MOTDSTART" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :- [server] Message of the day - 
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_MOTD" id="F:Sharkbite.Irc.ReplyCode.RPL_MOTD" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :- [text]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFMOTD" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFMOTD" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :End of MOTD command
            
            Description: When responding to the MOTD message and the MOTD file
            is found, the file is displayed line by line, with
            each line no longer than 80 characters, using
            RPL_MOTD format replies. These MUST be surrounded
            by a RPL_MOTDSTART (before the RPL_MOTDs) and an
            RPL_ENDOFMOTD (after).
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_YOUREOPER" id="F:Sharkbite.Irc.ReplyCode.RPL_YOUREOPER" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :You are now an IRC operator
            
            Description: RPL_YOUREOPER is sent back to a client which has
            just successfully issued an OPER message and gained
            operator status.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_REHASHING" id="F:Sharkbite.Irc.ReplyCode.RPL_REHASHING" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [config file] :Rehashing
            
            Description: If the REHASH option is used and an operator sends
            a REHASH message, an RPL_REHASHING is sent back to
            the operator.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_YOURESERVICE" id="F:Sharkbite.Irc.ReplyCode.RPL_YOURESERVICE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: You are service [servicename]
            
            Description: Sent by the server to a service upon successful
            registration.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TIME" id="F:Sharkbite.Irc.ReplyCode.RPL_TIME" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [server] :[string showing server's local time]
            
            Description: When replying to the TIME message, a server MUST send
            the reply using the RPL_TIME format above. The string
            showing the time need only contain the correct day and
            time there. There is no further requirement for the
            time string.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_USERSSTART" id="F:Sharkbite.Irc.ReplyCode.RPL_USERSSTART" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :UserID Terminal Host
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_USERS" id="F:Sharkbite.Irc.ReplyCode.RPL_USERS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :[username] [ttyline] [hostname]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFUSERS" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFUSERS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :End of users
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_NOUSERS" id="F:Sharkbite.Irc.ReplyCode.RPL_NOUSERS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Nobody logged in
            
            Description: If the USERS message is handled by a server, the
            replies RPL_USERSTART, RPL_USERS, RPL_ENDOFUSERS and
            RPL_NOUSERS are used. RPL_USERSSTART MUST be sent
            first, following by either a sequence of RPL_USERS
            or a single RPL_NOUSER. Following this is
            RPL_ENDOFUSERS.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACELINK" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACELINK" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Link [version and debug level] [destination [next server] V[protocol version [link uptime in seconds] [backstream sendq [upstream sendq]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACECONNECTING" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACECONNECTING" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Try. [class] [server]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACEHANDSHAKE" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACEHANDSHAKE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: H.S. [class] [server]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACEUNKNOWN" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACEUNKNOWN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: ???? [class] [[client IP address in dot form]]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACEOPERATOR" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACEOPERATOR" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Oper [class] [nick]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACEUSER" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACEUSER" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: User [class] [nick]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACESERVER" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACESERVER" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Serv [class] [int]S [int]C [server [nick!user|*!*]@[host|server] V[protocol version]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACESERVICE" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACESERVICE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Service [class] [name] [type] [active type]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACENEWTYPE" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACENEWTYPE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [newtype] 0 [client name]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACECLASS" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACECLASS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Class [class] [count]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACERECONNECT" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACERECONNECT" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: Class [class] [count] Unused
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACELOG" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACELOG" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: File [logfile] [debug level]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRACEEND" id="F:Sharkbite.Irc.ReplyCode.RPL_TRACEEND" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [server name] [version and debug level] :End of TRACE
            
            Description: The RPL_TRACE are all returned by the server in
            response to the TRACE message. How many are
            returned is dependent on the TRACE message and
            whether it was sent by an operator or not. There
            is no predefined order for which occurs first.
            Replies RPL_TRACEUNKNOWN, RPL_TRACECONNECTING and
            RPL_TRACEHANDSHAKE are all used for connections
            which have not been fully established and are either
            unknown, still attempting to connect or in the
            process of completing the 'server handshake'.
            RPL_TRACELINK is sent by any server which handles
            a TRACE message and has to pass it on to another
            server. The list of RPL_TRACELINKs sent in
            response to a TRACE command traversing the IRC
            network should reflect the actual connectivity of
            the servers themselves along that path.
            RPL_TRACENEWTYPE is to be used for any connection
            which does not fit in the other categories but is
            being displayed anyway.
            RPL_TRACEEND is sent to indicate the end of the list.
            </summary>
            </documentation>
          </field>
          <field name="RPL_STATSLINKINFO" id="F:Sharkbite.Irc.ReplyCode.RPL_STATSLINKINFO" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [linkname] [sendq] [sent messages [sent Kbytes] [received messages [received Kbytes] [time open]
            
            Description: reports statistics on a connection. [linkname]
            identifies the particular connection, [sendq] is
            the amount of data that is queued and waiting to be
            sent [sent messages] the number of messages sent,
            and [sent Kbytes] the amount of data sent, in
            Kbytes. [received messages] and [received Kbytes]
            are the equivalent of [sent messages] and [sent
            Kbytes] for received data, respectively. [time
            open] indicates how long ago the connection was
            opened, in seconds.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_STATSCOMMANDS" id="F:Sharkbite.Irc.ReplyCode.RPL_STATSCOMMANDS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [command] [count] [byte count] [remote count]
            
            Description: reports statistics on commands usage.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ENDOFSTATS" id="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFSTATS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [stats letter] :End of STATS report
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_STATSUPTIME" id="F:Sharkbite.Irc.ReplyCode.RPL_STATSUPTIME" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Server Up %d days %d:%02d:%02d
            
            Description: reports the server uptime.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_STATSOLINE" id="F:Sharkbite.Irc.ReplyCode.RPL_STATSOLINE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: O [hostmask] * [name]
            
            Description: reports the allowed hosts from where user may become IRC
            operators.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_UMODEIS" id="F:Sharkbite.Irc.ReplyCode.RPL_UMODEIS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [user mode string]
            
            Description: To answer a query about a client's own mode,
            RPL_UMODEIS is sent back.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_SERVLIST" id="F:Sharkbite.Irc.ReplyCode.RPL_SERVLIST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [name] [server] [mask] [type] [hopcount] [info]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_SERVLISTEND" id="F:Sharkbite.Irc.ReplyCode.RPL_SERVLISTEND" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [mask] [type] :End of service listing
            
            Description: When listing services in reply to a SERVLIST message,
            a server is required to send the list back using the
            RPL_SERVLIST and RPL_SERVLISTEND messages. A separate
            RPL_SERVLIST is sent for each service. After the
            services have been listed (or if none present) a
            RPL_SERVLISTEND MUST be sent.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LUSERCLIENT" id="F:Sharkbite.Irc.ReplyCode.RPL_LUSERCLIENT" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :There are [integer] users and [integer services on [integer] servers
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LUSEROP" id="F:Sharkbite.Irc.ReplyCode.RPL_LUSEROP" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [integer] :operator(s) online
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LUSERUNKNOWN" id="F:Sharkbite.Irc.ReplyCode.RPL_LUSERUNKNOWN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [integer] :unknown connection(s)
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LUSERCHANNELS" id="F:Sharkbite.Irc.ReplyCode.RPL_LUSERCHANNELS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [integer] :channels formed
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_LUSERME" id="F:Sharkbite.Irc.ReplyCode.RPL_LUSERME" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :I have [integer] clients and [integer servers
            
            Description: In processing an LUSERS message, the server
            sends a set of replies from RPL_LUSERCLIENT,
            RPL_LUSEROP, RPL_USERUNKNOWN,
            RPL_LUSERCHANNELS and RPL_LUSERME. When
            replying, a server MUST send back
            and RPL_LUSERME. The other
            replies are only sent back if a non-zero count
            is found for them.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ADMINME" id="F:Sharkbite.Irc.ReplyCode.RPL_ADMINME" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [server] :Administrative info
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ADMINLOC1" id="F:Sharkbite.Irc.ReplyCode.RPL_ADMINLOC1" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :[admin info]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ADMINLOC2" id="F:Sharkbite.Irc.ReplyCode.RPL_ADMINLOC2" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :[admin info]
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_ADMINEMAIL" id="F:Sharkbite.Irc.ReplyCode.RPL_ADMINEMAIL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :[admin info]
            
            Description: When replying to an ADMIN message, a server
            is expected to use replies RPL_ADMINME
            through to RPL_ADMINEMAIL and provide a text
            message with each. For RPL_ADMINLOC1 a
            description of what city, state and country
            the server is in is expected, followed by
            details of the institution (RPL_ADMINLOC2)
            and constly the administrative contact for the
            server (an email address here is REQUIRED)
            in RPL_ADMINEMAIL.
            
            </summary>
            </documentation>
          </field>
          <field name="RPL_TRYAGAIN" id="F:Sharkbite.Irc.ReplyCode.RPL_TRYAGAIN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [command] :Please wait a while and try again.
            
            Description: When a server drops a command without processing it,
            it MUST use the reply RPL_TRYAGAIN to inform the
            originating client.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOSUCHNICK" id="F:Sharkbite.Irc.ReplyCode.ERR_NOSUCHNICK" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nickname] :No such nick/channel
            
            Description: Used to indicate the nickname parameter supplied to a
            command is currently unused.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOSUCHSERVER" id="F:Sharkbite.Irc.ReplyCode.ERR_NOSUCHSERVER" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [server name] :No such server
            
            Description: Used to indicate the server name given currently
            does not exist.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOSUCHCHANNEL" id="F:Sharkbite.Irc.ReplyCode.ERR_NOSUCHCHANNEL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel name] :No such channel
            
            Description: Used to indicate the given channel name is invalid.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_CANNOTSENDTOCHAN" id="F:Sharkbite.Irc.ReplyCode.ERR_CANNOTSENDTOCHAN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel name] :Cannot send to channel
            
            Description: Sent to a user who is either (a) not on a channel
            which is mode +n or (b) not a chanop (or mode +v) on
            a channel which has mode +m set or where the user is
            banned and is trying to send a PRIVMSG message to
            that channel.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_TOOMANYCHANNELS" id="F:Sharkbite.Irc.ReplyCode.ERR_TOOMANYCHANNELS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel name] :You have joined too many channels
            
            Description: Sent to a user when they have joined the maximum
            number of allowed channels and they try to join
            another channel.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_WASNOSUCHNICK" id="F:Sharkbite.Irc.ReplyCode.ERR_WASNOSUCHNICK" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nickname] :There was no such nickname
            
            Description: Returned by WHOWAS to indicate there is no history
            information for that nickname.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_TOOMANYTARGETS" id="F:Sharkbite.Irc.ReplyCode.ERR_TOOMANYTARGETS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [target] :[error code] recipients. [abort message]
            
            Description: Returned to a client which is attempting to send a
            PRIVMSG/NOTICE using the user@host destination format
            and for a user@host which has several occurrences.
            Returned to a client which trying to send a
            PRIVMSG/NOTICE to too many recipients.
            Returned to a client which is attempting to JOIN a safe
            channel using the shortname when there are more than one
            such channel.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOSUCHSERVICE" id="F:Sharkbite.Irc.ReplyCode.ERR_NOSUCHSERVICE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [service name] :No such service
            
            Description: Returned to a client which is attempting to send a SQUERY
            to a service which does not exist.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOORIGIN" id="F:Sharkbite.Irc.ReplyCode.ERR_NOORIGIN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :No origin specified
            
            Description: PING or PONG message missing the originator parameter.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NORECIPIENT" id="F:Sharkbite.Irc.ReplyCode.ERR_NORECIPIENT" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :No recipient given ([command])
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOTEXTTOSEND" id="F:Sharkbite.Irc.ReplyCode.ERR_NOTEXTTOSEND" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :No text to send
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOTOPLEVEL" id="F:Sharkbite.Irc.ReplyCode.ERR_NOTOPLEVEL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [mask] :No toplevel domain specified
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_WILDTOPLEVEL" id="F:Sharkbite.Irc.ReplyCode.ERR_WILDTOPLEVEL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [mask] :Wildcard in toplevel domain
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_BADMASK" id="F:Sharkbite.Irc.ReplyCode.ERR_BADMASK" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: PRIVMSG $[server]" or "PRIVMSG #[host]" is attempted
            
            Description: 412 - 415 are returned by PRIVMSG to indicate that
            the message wasn't delivered for some reason.
            ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that
            are returned when an invalid use of
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_TOOMANYLINES" id="F:Sharkbite.Irc.ReplyCode.ERR_TOOMANYLINES" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            A query returned too many results.
            This is not an offical part of the RFC but added since it seems to be in use.
            </summary>
            </documentation>
          </field>
          <field name="ERR_UNKNOWNCOMMAND" id="F:Sharkbite.Irc.ReplyCode.ERR_UNKNOWNCOMMAND" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [command] :Unknown command
            
            Description: Returned to a registered client to indicate that the
            command sent is unknown by the server.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOMOTD" id="F:Sharkbite.Irc.ReplyCode.ERR_NOMOTD" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :MOTD File is missing
            
            Description: Server's MOTD file could not be opened by the server.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOADMININFO" id="F:Sharkbite.Irc.ReplyCode.ERR_NOADMININFO" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [server] :No administrative info available
            
            Description: Returned by a server in response to an ADMIN message
            when there is an error in finding the appropriate
            information.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_FILEERROR" id="F:Sharkbite.Irc.ReplyCode.ERR_FILEERROR" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :File error doing [file op] on [file]
            
            Description: Generic error message used to report a failed file
            operation during the processing of a message.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NONICKNAMEGIVEN" id="F:Sharkbite.Irc.ReplyCode.ERR_NONICKNAMEGIVEN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :No nickname given
            
            Description: Returned when a nickname parameter expected for a
            command and isn't found.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_ERRONEUSNICKNAME" id="F:Sharkbite.Irc.ReplyCode.ERR_ERRONEUSNICKNAME" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] :Erroneous nickname
            
            Description: Returned after receiving a NICK message which contains
            characters which do not fall in the defined set. See
            section 2.3.1 for details on valid nicknames.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NICKNAMEINUSE" id="F:Sharkbite.Irc.ReplyCode.ERR_NICKNAMEINUSE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] :Nickname is already in use
            
            Description: Returned when a NICK message is processed that results
            in an attempt to change to a currently existing
            nickname.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NICKCOLLISION" id="F:Sharkbite.Irc.ReplyCode.ERR_NICKCOLLISION" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] :Nickname collision KILL from [user]@[host]
            
            Description: Returned by a server to a client when it detects a
            nickname collision (registered of a NICK that
            already exists by another server).
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_UNAVAILRESOURCE" id="F:Sharkbite.Irc.ReplyCode.ERR_UNAVAILRESOURCE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick/channel] :Nick/channel is temporarily unavailable
            
            Description: Returned by a server to a user trying to join a channel
            currently blocked by the channel delay mechanism.
            Returned by a server to a user trying to change nickname
            when the desired nickname is blocked by the nick delay
            mechanism.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_USERNOTINCHANNEL" id="F:Sharkbite.Irc.ReplyCode.ERR_USERNOTINCHANNEL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [nick] [channel] :They aren't on that channel
            
            Description: Returned by the server to indicate that the target
            user of the command is not on the given channel.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOTONCHANNEL" id="F:Sharkbite.Irc.ReplyCode.ERR_NOTONCHANNEL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :You're not on that channel
            
            Description: Returned by the server whenever a client tries to
            perform a channel affecting command for which the
            client isn't a member.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_USERONCHANNEL" id="F:Sharkbite.Irc.ReplyCode.ERR_USERONCHANNEL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [user] [channel] :is already on channel
            
            Description: Returned when a client tries to invite a user to a
            channel they are already on.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOLOGIN" id="F:Sharkbite.Irc.ReplyCode.ERR_NOLOGIN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [user] :User not logged in
            
            Description: Returned by the summon after a SUMMON command for a
            user was unable to be performed since they were not
            logged in.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_SUMMONDISABLED" id="F:Sharkbite.Irc.ReplyCode.ERR_SUMMONDISABLED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :SUMMON has been disabled
            
            Description: Returned as a response to the SUMMON command. MUST be
            returned by any server which doesn't implement it.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_USERSDISABLED" id="F:Sharkbite.Irc.ReplyCode.ERR_USERSDISABLED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :USERS has been disabled
            
            Description: Returned as a response to the USERS command. MUST be
            returned by any server which does not implement it.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOTREGISTERED" id="F:Sharkbite.Irc.ReplyCode.ERR_NOTREGISTERED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :You have not registered
            
            Description: Returned by the server to indicate that the client
            MUST be registered before the server will allow it
            to be parsed in detail.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NEEDMOREPARAMS" id="F:Sharkbite.Irc.ReplyCode.ERR_NEEDMOREPARAMS" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [command] :Not enough parameters
            
            Description: Returned by the server by numerous commands to
            indicate to the client that it didn't supply enough
            parameters.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_ALREADYREGISTRED" id="F:Sharkbite.Irc.ReplyCode.ERR_ALREADYREGISTRED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Unauthorized command (already registered)
            
            Description: Returned by the server to any link which tries to
            change part of the registered details (such as
            password or user details from second USER message).
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOPERMFORHOST" id="F:Sharkbite.Irc.ReplyCode.ERR_NOPERMFORHOST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Your host isn't among the privileged
            
            Description: Returned to a client which attempts to register with
            a server which does not been setup to allow
            connections from the host the attempted connection
            is tried.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_PASSWDMISMATCH" id="F:Sharkbite.Irc.ReplyCode.ERR_PASSWDMISMATCH" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Password incorrect
            
            Description: Returned to indicate a failed attempt at registering
            a connection for which a password was required and
            was either not given or incorrect.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_YOUREBANNEDCREEP" id="F:Sharkbite.Irc.ReplyCode.ERR_YOUREBANNEDCREEP" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :You are banned from this server
            
            Description: Returned after an attempt to connect and register
            yourself with a server which has been setup to
            explicitly deny connections to you.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_YOUWILLBEBANNED" id="F:Sharkbite.Irc.ReplyCode.ERR_YOUWILLBEBANNED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :You are banned from this server
            
            Description: Sent by a server to a user to inform that access to the
            server will soon be denied.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_KEYSET" id="F:Sharkbite.Irc.ReplyCode.ERR_KEYSET" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :Channel key already set
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_CHANNELISFULL" id="F:Sharkbite.Irc.ReplyCode.ERR_CHANNELISFULL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :Cannot join channel (+l)
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_UNKNOWNMODE" id="F:Sharkbite.Irc.ReplyCode.ERR_UNKNOWNMODE" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [char] :is unknown mode char to me for [channel]
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_INVITEONLYCHAN" id="F:Sharkbite.Irc.ReplyCode.ERR_INVITEONLYCHAN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :Cannot join channel (+i)
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_BANNEDFROMCHAN" id="F:Sharkbite.Irc.ReplyCode.ERR_BANNEDFROMCHAN" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :Cannot join channel (+b)
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_BADCHANNELKEY" id="F:Sharkbite.Irc.ReplyCode.ERR_BADCHANNELKEY" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :Cannot join channel (+k)
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_BADCHANMASK" id="F:Sharkbite.Irc.ReplyCode.ERR_BADCHANMASK" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :Bad Channel Mask
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOCHANMODES" id="F:Sharkbite.Irc.ReplyCode.ERR_NOCHANMODES" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :Channel doesn't support modes
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_BANLISTFULL" id="F:Sharkbite.Irc.ReplyCode.ERR_BANLISTFULL" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] [char] :Channel list is full
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOPRIVILEGES" id="F:Sharkbite.Irc.ReplyCode.ERR_NOPRIVILEGES" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Permission Denied- You're not an IRC operator
            
            Description: Any command requiring operator privileges to operate
            MUST return this error to indicate the attempt was
            unsuccessful.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_CHANOPRIVSNEEDED" id="F:Sharkbite.Irc.ReplyCode.ERR_CHANOPRIVSNEEDED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: [channel] :You're not channel operator
            
            Description: Any command requiring 'chanop' privileges (such as
            MODE messages) MUST return this error if the client
            making the attempt is not a chanop on the specified
            channel.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_CANTKILLSERVER" id="F:Sharkbite.Irc.ReplyCode.ERR_CANTKILLSERVER" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :You can't kill a server!
            
            Description: Any attempts to use the KILL command on a server
            are to be refused and this error returned directly
            to the client.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_RESTRICTED" id="F:Sharkbite.Irc.ReplyCode.ERR_RESTRICTED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Your connection is restricted!
            
            Description: Sent by the server to a user upon connection to indicate
            the restricted nature of the connection (user mode "+r").
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_UNIQOPPRIVSNEEDED" id="F:Sharkbite.Irc.ReplyCode.ERR_UNIQOPPRIVSNEEDED" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :You're not the original channel operator
            
            Description: Any MODE requiring "channel creator" privileges MUST
            return this error if the client making the attempt is not
            a chanop on the specified channel.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_NOOPERHOST" id="F:Sharkbite.Irc.ReplyCode.ERR_NOOPERHOST" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :No O-lines for your host
            
            Description: If a client sends an OPER message and the server has
            not been configured to allow connections from the
            client's host as an operator, this error MUST be
            returned.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_UMODEUNKNOWNFLAG" id="F:Sharkbite.Irc.ReplyCode.ERR_UMODEUNKNOWNFLAG" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Unknown MODE flag
            
            Description: Returned by the server to indicate that a MODE
            message was sent with a nickname parameter and that
            the a mode flag sent was not recognized.
            
            </summary>
            </documentation>
          </field>
          <field name="ERR_USERSDONTMATCH" id="F:Sharkbite.Irc.ReplyCode.ERR_USERSDONTMATCH" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            IRC: :Cannot change mode for other users
            
            Description: Error sent to any user trying to view or change the
            user mode for a user other than themselves.
            
            </summary>
            </documentation>
          </field>
          <field name="ConnectionFailed" id="F:Sharkbite.Irc.ReplyCode.ConnectionFailed" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            When the TCP/IP connection unexpectedly fails.
            </summary>
            </documentation>
          </field>
          <field name="IrcServerError" id="F:Sharkbite.Irc.ReplyCode.IrcServerError" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            The IRC server sent an 'ERROR' message for some
            reason.
            </summary>
            </documentation>
          </field>
          <field name="BadDccEndpoint" id="F:Sharkbite.Irc.ReplyCode.BadDccEndpoint" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            When the socket connection information sent
            by the remote user in a DCC request is bad.
            </summary>
            </documentation>
          </field>
          <field name="UnparseableMessage" id="F:Sharkbite.Irc.ReplyCode.UnparseableMessage" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            A message from the IRC server that cannot be parsed. This may be because
            the message is intended to cause problems, it may be an unsupported protocol
            such as DCC Voice, or it may be that the Thresher parser simply cannot understand
            it.
            </summary>
            </documentation>
          </field>
          <field name="UnableToResume" id="F:Sharkbite.Irc.ReplyCode.UnableToResume" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            Normally a DCC Resume message is sent in response to
            a DCC Send. This error is signaled when a DCC Resume message is
            received without a previous Send or the Send session has timed out.
            </summary>
            </documentation>
          </field>
          <field name="UnknownEncryptionProtocol" id="F:Sharkbite.Irc.ReplyCode.UnknownEncryptionProtocol" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            Signaled when a DCC Get or SEND contains an encryption
            protocol that Thresher does not support.
            </summary>
            </documentation>
          </field>
          <field name="BadDccAcceptValue" id="F:Sharkbite.Irc.ReplyCode.BadDccAcceptValue" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            When trying to resume a DCC transfer the remote user is
            supposed to send an Accept message with the same starting position
            in the file. If these numbers differ this error is raised.
            </summary>
            </documentation>
          </field>
          <field name="BadResumePosition" id="F:Sharkbite.Irc.ReplyCode.BadResumePosition" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            If the remote user sends a DCC resume request which
            asks for a start position greater than or equals to the file
            size then this error is raised.
            </summary>
            </documentation>
          </field>
          <field name="DccConnectionRefused" id="F:Sharkbite.Irc.ReplyCode.DccConnectionRefused" access="Public" type="Sharkbite.Irc.ReplyCode" contract="Static" literal="true">
            <documentation>
              <summary>
            When attempting to connect to another
            machine using DCC and the target machine
            refuses the connection this error is raised.
            </summary>
            </documentation>
          </field>
        </enumeration>
      </namespace>
    </module>
  </assembly>
</ndoc>
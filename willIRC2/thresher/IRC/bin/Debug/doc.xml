<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sharkbite.Thresher</name>
    </assembly>
    <members>
        <member name="T:Sharkbite.Irc.CtcpListener">
             <summary>
             This class is used to send CTCP specific events. Once registered with this object 
             the client can receive notification of all CTCP requests, pings, and replies. Instances 
             of this class are not created directly but are retrieved as a property from a 
             <see cref="T:Sharkbite.Irc.Connection"/> object.
             </summary>
             <remarks>All CTCP messages come in Request/Reply pairs. Each event
             signals either the Request or the Response. All CTCP queries (with the exception of
             CTCP Ping) are very similiar so they are all handled by the same set of events.</remarks>
            <example><code>
             //Create a Connection object which will support CTCP (second bool param).
             Connection connection = new Connection( args, true, false );	
             //Register a delegate on this CtcpListener.
             connection.CtcpListener.OnCtcpRequest += new CtcpRequestEventHandler( MyOnCtcpRequest );
             //If the Connection was created without CTCP support then this property will return null.
             //However, CTCP can be turned on and off dynamically. To enable it at a later time call:
             connection.EnableCtcp = true;
             //Now you can register listeners as above.
             //Setting EnableCtcp to false will delete the instance of CtcpListener and no more
             //CTCP events will be raised.
            </code></example>
        </member>
        <member name="M:Sharkbite.Irc.CtcpListener.#ctor(Sharkbite.Irc.Connection)">
            <summary>
            Create a new listener using a specific connection.
            </summary>
            <param name="connection">The connection to the IRC server.</param>
        </member>
        <member name="M:Sharkbite.Irc.CtcpListener.IsCtcpMessage(System.String)">
            <summary>
            Test if the message contains CTCP commands.
            </summary>
            <param name="message">The raw message from the IRC server</param>
            <returns>True if this is a Ctcp request or reply.</returns>
        </member>
        <member name="E:Sharkbite.Irc.CtcpListener.OnCtcpReply">
            <summary>
            Listens for replies to CTCP queries sent by this client.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.CtcpListener.OnCtcpRequest">
            <summary>
            Listens for CTCP requests.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.CtcpListener.OnCtcpPingReply">
            <summary>
            Listens for a reply to CTCP Ping query sent by this client.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.CtcpListener.OnCtcpPingRequest">
            <summary>
            Listens for CTCP Ping requests.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.CtcpResponder">
            <summary>
            A class which automatically responds to CTCP queries. The
            replies it sends are configurable by the client.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.CtcpResponder.#ctor(Sharkbite.Irc.Connection)">
            <summary>
            Create an instance and register handlers for
            CTCP events. The Connection's CtcpEnable property must
            be set to true or the connection will not send CTCP events
            to this responder.
            </summary>
            <param name="connection">The containing connection.</param>
        </member>
        <member name="M:Sharkbite.Irc.CtcpResponder.FormatIdleTime">
            <summary>
            For a TimeSpan to show only hours,minutes, and seconds.
            </summary>
            <returns>A beautified TimeSpan</returns>
        </member>
        <member name="M:Sharkbite.Irc.CtcpResponder.FormatDateTime">
            <summary>
            Format the current date into date, time, and time zone. Used
            by Time replies.
            </summary>
            <returns>A beautified DateTime</returns>
        </member>
        <member name="M:Sharkbite.Irc.CtcpResponder.UpdateTime">
            <summary>
            Create the next time period and adding the correct number
            of ticks. No Ctcp replies will be sent if the current time is not later
            than this value.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.CtcpResponder.Disable">
            <summary>
            Stop listening to the CtcpListener.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.CtcpResponder.ResponseDelay">
            <summary>
            How long the responder should wait before
            replying to a query. Queries coming before this
            time has passed will be droppped.
            </summary>
            <value>The delay in milliseconds. The default is 2000 (2 seconds).</value>
        </member>
        <member name="P:Sharkbite.Irc.CtcpResponder.FingerResponse">
            <summary>
            Finger responses normally consist of a message
            and the idle time.
            </summary>
            <value>The Idle time will be automatically appended
            to the finger response. This default to the UserInfo message.</value>
        </member>
        <member name="P:Sharkbite.Irc.CtcpResponder.UserInfoResponse">
            <summary>
            A message about the user.
            </summary>
            <value>Any string which does not exceed the IRC max length.
            This defaults to "Thresher Auto-Responder".</value>
        </member>
        <member name="P:Sharkbite.Irc.CtcpResponder.VersionResponse">
            <summary>
            The version of the client software.
            </summary>
            <value>This defaults to "Thresher IRC library 1.0".</value>
        </member>
        <member name="P:Sharkbite.Irc.CtcpResponder.ClientInfoResponse">
            <summary>
            Tell others what CTCP commands this client supports.
            </summary>
            <value>By default it sends a list of all the CTCP commands.</value>
        </member>
        <member name="P:Sharkbite.Irc.CtcpResponder.SourceResponse">
            <summary>
            Where to get this client.
            </summary>
            <value>This can be a complex set of FTP instructions or just a
            URL to the client's homepage.</value>
        </member>
        <member name="T:Sharkbite.Irc.CtcpSender">
            <summary>
            This class allows the client to send CTCP commands. There is no limit
            on what commands can actually be sent, however, the accepted CTCP 
            commands are: UserInfo, Finger, Version, Source, ClientInfo, ErrMsg, and Time.
            
            <remarks>Action, though it is also a CTCP command, is so common that it is handled 
            by the normal sender class. </remarks> 
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.CommandBuilder">
            <summary>
            CommandBuilder provides the support methods needed
            by its subclasses to build correctly formatted messages for
            the IRC server. It is never itself instantiated.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.CommandBuilder.SendMessage(System.String,System.String,System.String)">
            <summary>
            This methods actually sends the notice and privmsg commands.
            It assumes that the message has already been broken up
            and has a valid target.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.CommandBuilder.ClearBuffer">
            <summary>
            Clear the contents of the string buffer.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.CommandBuilder.BreakUpMessage(System.String,System.Int32)">
            <summary>
            Break up a large message into smaller peices that will fit within the IRC
            max message size.
            </summary>
            <param name="message">The text to be broken up</param>
            <param name="maxSize">The largest size a piece can be</param>
            <returns>A string array holding the correctly sized messages.</returns>
        </member>
        <member name="M:Sharkbite.Irc.CtcpSender.#ctor(Sharkbite.Irc.Connection)">
            <summary>
            Create an instance using a specific connection.
            </summary>
            <param name="connection">The connection to an IRC server.</param>
        </member>
        <member name="M:Sharkbite.Irc.CtcpSender.IsMyRequest(System.String)">
            <summary>
            Test if the timestamp is one that this client sent out.
            Needed to distinguish betwen a Ping reply and
            query.
            </summary>
            <param name="timestamp">The timstamp</param>
            <returns>True if the timestamp was sent by this client.</returns>
        </member>
        <member name="M:Sharkbite.Irc.CtcpSender.ReplyReceived(System.String)">
            <summary>
            Remove a timstamp from the list
            we are maintaining.
            </summary>
            <param name="timestamp">The timestamp that was sent back.</param>
        </member>
        <member name="M:Sharkbite.Irc.CtcpSender.CtcpReply(System.String,System.String,System.String)">
            <summary>
            Send a reply in response to a CTCP request. Replies that exceed
            the IRC max length will be truncated.
            </summary>
            <param name="nick">The target's nick name.</param>
            <param name="command">The CTCP command. Should be a string constant
            from <see cref="T:Sharkbite.Irc.CtcpUtil"/>.</param>
            <param name="reply">The text of the response.</param>
            <exception cref="T:System.ArgumentException">If the nick is invalid, the command 
            is empty, or the reply is empty.</exception> 
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpReply"/>
        </member>
        <member name="M:Sharkbite.Irc.CtcpSender.CtcpRequest(System.String,System.String)">
            <summary>
            Send a CTCP query to another user.
            </summary>
            <remarks>The target may also respond with an error
            or nothing at all if it cannot or does not want to answer.
            </remarks>
            <param name="nick">The target's nick name.</param>
            <param name="command">The CTCP command. Should be a string constant
            from <see cref="T:Sharkbite.Irc.CtcpUtil"/>.</param>
            <exception cref="T:System.ArgumentException">If the nick is invalid or the command is empty.</exception> 
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpRequest"/>
        </member>
        <member name="M:Sharkbite.Irc.CtcpSender.CtcpPingReply(System.String,System.String)">
            <summary>
            Send back a timestamp so the requester can calculate his
            ping to this client.
            </summary>
            <param name="nick">The target's nick name.</param>
            <param name="timestamp">The timestamp sent by the requester.</param>
            <exception cref="T:System.ArgumentException">If the nick is invalid or the timestamp is empty.</exception> 
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpPingReply"/>
        </member>
        <member name="M:Sharkbite.Irc.CtcpSender.CtcpPingRequest(System.String,System.String)">
            <summary>
            Send a CTCP Ping request to another user.
            </summary>
            <remarks>The target may also respond with an error
            or nothing at all if it cannot or does not want to answer.
            </remarks>
            <param name="nick">The target's nick name.</param>
            <param name="timestamp">The timestamp to send to the target user. These
            can be generated by Thresher (<see cref="M:Sharkbite.Irc.CtcpUtil.CreateTimestamp"/>) or
            by the client application.</param>
            <exception cref="T:System.ArgumentException">If the nick is invalid.</exception> 
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpPingRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.CtcpUtil">
            <summary>
            Constants and utility methods to support CTCP.
            </summary>
            <remarks>The CTCP constants should be used to test incoming
            CTCP queries for their type and as the CTCP command
            for outgoing ones.</remarks>
        </member>
        <member name="F:Sharkbite.Irc.CtcpUtil.Finger">
            <summary>CTCP Finger.</summary>
        </member>
        <member name="F:Sharkbite.Irc.CtcpUtil.UserInfo">
            <summary>CTCP USERINFO.</summary>
        </member>
        <member name="F:Sharkbite.Irc.CtcpUtil.Version">
            <summary>CTCP VERSION.</summary>
        </member>
        <member name="F:Sharkbite.Irc.CtcpUtil.Source">
            <summary>CTCP SOURCE.</summary>
        </member>
        <member name="F:Sharkbite.Irc.CtcpUtil.ClientInfo">
            <summary>CTCP CLIENTINFO.</summary>
        </member>
        <member name="F:Sharkbite.Irc.CtcpUtil.ErrorMessage">
            <summary>CTCP ERRMSG.</summary>
        </member>
        <member name="F:Sharkbite.Irc.CtcpUtil.Ping">
            <summary>CTCP PING.</summary>
        </member>
        <member name="F:Sharkbite.Irc.CtcpUtil.Time">
            <summary>CTCP TIME.</summary>
        </member>
        <member name="M:Sharkbite.Irc.CtcpUtil.CreateTimestamp">
            <summary>
            Generate a timestamp string suitable for the CTCP Ping command.
            </summary>
            <returns>The current time as a string.</returns>
        </member>
        <member name="T:Sharkbite.Irc.DccChatSession">
            <summary>
            Establish a DCC Chat connection with a remote user. 
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.SendClosedEvent">
            <summary>
            Send the session closed event
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.SendChatRequest(System.String,System.Int32)">
            <summary>
            Create the correctly formatted DCC CHAT message and send it.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.TimerExpired(System.Object)">
            <summary>
            Called when timeout thread is done.
            If the session has not yet not connected 
            then stop listening and send a OnChatRequestTimeout 
            event.
            </summary>
            <param name="state">An instance of DccChatSession</param>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.SendMessage(System.String)">
            <summary>
            Send a line of text to the remote user. There is no fixed
            limit to message size but they should not be too long.
            </summary>
            <param name="text">The text. It need not have a 
            newline at the end since one will automatically appended..</param>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.Close">
            <summary>
            Close the chat session.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.ToString">
            <summary>
            Summary information about this session.
            </summary>
            <returns>Simple information about this session in human readable format.</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.Accept(Sharkbite.Irc.DccUserInfo)">
            <summary>
            When another a remote user has sent a chat request, this
            method is called to accept the request and
            start a chat session with that user.
            </summary>
            <remarks>
            This method should be called from within a try/catch block 
            because there are many things that could prevent this
            connection attempt from succeeding.
            </remarks>
            <param name="dccUserInfo">A collection of information about the remote user.</param>
            <returns>The DccChatSession instance for this session.</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.Request(Sharkbite.Irc.DccUserInfo,System.String,System.Int32)">
            <summary>
            Send a DCC Chat request to a remote user and use the default
            timeout period of 30 seconds.
            </summary>
            <remarks>
            <para>If the user does not respond within the timeout period the DccChatSession 
            will stop listening for a connection. The sesssion instance created then becomes
            invalid. This methods must be called again and a new instance created in order to
            initiate a try again.
            </para>
            <para>
            This method should be called from within a try/catch block 
            in case there are socket errors.
            </para>
            </remarks>
            <param name="dccUserInfo">A collection of information about the remote user.</param>
            <param name="listenIPAddress">The IP address of the local machine in dot 
            quad format (e.g. 192.168.0.25). This is the address that will be sent to the 
            remote user. The IP address of the NAT machine must be used if the
            client is behind a a NAT/Firewall system. </param>
            <param name="listenPort">The TCP/IP port to listen on</param>
        </member>
        <member name="M:Sharkbite.Irc.DccChatSession.Request(Sharkbite.Irc.DccUserInfo,System.String,System.Int32,System.Int64)">
            <summary>
            Send a DCC Chat request to a remote user and wait for a connection
            using timeout period specified.
            </summary>
            <remarks>
            <para>If the user does not respond within the timeout period the DccChatSession 
            will stop listening for a connection. The sesssion instance created then becomes
            invalid. This methods must be called again and a new instance created in order to
            initiate a try again.
            </para>
            <para>
            This method should be called from within a try/catch block 
            in case there are socket errors.
            </para>
            </remarks>
            <param name="dccUserInfo">A collection of information about the remote user.</param>
            <param name="listenIPAddress">The IP address that will be sent to the remote user. It must
            be in dotted quad format (i.e. 192.168.0.2). If the client is behind a NAT system then
            this should be the address of that system and not the local host.</param>
            <param name="listenPort">The TCP/IP port to listen on</param>
            <param name="timeout">How long to wait for a response in milliseconds.
            A value of zero will disable the timeout.</param>
        </member>
        <member name="E:Sharkbite.Irc.DccChatSession.OnChatRequestTimeout">
            <summary>
            The remote user did not respond to a Chat request
            within the timeout period.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccChatSession.OnChatSessionOpened">
            <summary>
            A chat session has been opened. This is called when a session
            has been opened regardless of who initiated the session.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccChatSession.OnChatSessionClosed">
            <summary>
            The chat session has been closed by either participant.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccChatSession.OnChatMessageReceived">
            <summary>
            Text from the remote user was received
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.DccChatSession.Connected">
            <summary>
            A read-only property indicating whether this session
            is currently connected to another user.
            </summary>
            <value>True if the client is connected.</value>
        </member>
        <member name="P:Sharkbite.Irc.DccChatSession.ClientInfo">
            <summary>
            Iinformation about the remote user.
            </summary>
            <value>A read-only instance of DccUserInfo.</value>
        </member>
        <member name="T:Sharkbite.Irc.DccFileInfo">
            <summary>
            Manages the information about the file being
            transfered. 
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.#ctor(System.IO.FileInfo,System.Int64)">
            <summary>
            Create a new instance using information sent from the remote user
            in his DCC Send message.
            </summary>
            <param name="fileInfo">The file being received</param>
            <param name="completeFileSize">The size of the file being received as specified in the DCC Send
            request.</param>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.#ctor(System.IO.FileInfo)">
            <summary>
            Create a new instance using the file information from a local file
            to be sent to a remote user.
            </summary>
            <param name="fileInfo">The local file being sent</param>
            <exception cref="T:System.ArgumentException">If the file does not already exist.</exception>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.#ctor(System.String)">
            <summary>
            Create a new instance using the file information from a local file
            to be sent to a remote user.
            </summary>
            <param name="fileName">The full pathname of local file being sent</param>
            <exception cref="T:System.ArgumentException">If the file does not already exist.</exception>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.AddBytesTransfered(System.Int32)">
            <summary>
            Add the most recent number of bytes received
            to the total count.
            </summary>
            <param name="additionalBytes"></param>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.AcceptPositionMatches(System.Int64)">
            <summary>
            Does the position sent in the DCC Accept message
            match what we expect?
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.GotoWritePosition">
            <summary>
            Our Resume request was accepted so start
            writing at the current position + 1.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.GotoReadPosition">
            <summary>
            Advance to the correct reading start
            position.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.ResumePositionValid(System.Int64)">
            <summary>
            Is the position where the remote user would to to resume
            valid?
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.CanResume">
            <summary>
            Can this file be resumed, i.e. does it
            support random access?
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.SetResumeToFileSize">
            <summary>
            Start a Resume where the file last left off.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.SetResumePosition(System.Int64)">
            <summary>
            Set the point at which the transfer will begin
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.CurrentFilePosition">
            <summary>
            Where in the file is the transfer currently at?
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.AllBytesTransfered">
            <summary>
            Have all the file's bytes been sent/received?
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.CloseFile">
            <summary>
            Close the file stream.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.OpenForRead">
            <summary>
            Set this file stream to a read only one.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.OpenForWrite">
            <summary>
            Set this file stream to a write only one.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.ShouldResume">
            <summary>
            Should we try to resume this file download?
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileInfo.AcksFinished(System.Int64)">
            <summary>
            Determine whether the acks sent during an upload
            signal that all bytes have been sent.
            
            BitchX sends bad acks after a resume but we can
            catch that by testing for the same ack sent twice.
            I sure hope others behave better since I don't
            want to write special code for every IRC client.
            </summary>
            <param name="ack"></param>
            <returns>True if the acks are done</returns>
        </member>
        <member name="P:Sharkbite.Irc.DccFileInfo.FileStartingPosition">
            <summary>
            Where to start reading or writing a file. Used during DCC Resume actions.
            </summary>
            <value>A read-only long indicating the location within the file.</value>
        </member>
        <member name="P:Sharkbite.Irc.DccFileInfo.BytesTransfered">
            <summary>
            The number of bytes sent or received so far. This Property
            is thread safe.
            </summary>
            <value>A read-only long.</value>
        </member>
        <member name="P:Sharkbite.Irc.DccFileInfo.CompleteFileSize">
            <summary>
            The length of the file. This number is either the actual size
            of a file being sent or the number sent in the DCC SEND request.
            </summary>
            <value>A read-only long.</value>
        </member>
        <member name="P:Sharkbite.Irc.DccFileInfo.DccFileName">
            <summary>
            The file's name with all spaces converted to underscores and
            without the path.
            </summary>
            <value>A read-only string.</value>
        </member>
        <member name="T:Sharkbite.Irc.DccFileSession">
            <summary>
            Allows the user to send and receive files
            from other IRC users.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.#ctor(Sharkbite.Irc.DccUserInfo,Sharkbite.Irc.DccFileInfo,System.Int32,System.Int32,System.String)">
            <summary>
            Prepare a new instance with default values but do not connect
            to another user.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.Cleanup">
            <summary>
            Attempt to shut the session down correctly.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.OnDccAcceptReceived(System.Int64)">
            <summary>
            Called by DccListener when it receives a DCC Accept message.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.OnDccResumeRequest(System.Int64)">
            <summary>
            A DCC Send request has already been sent and the remote user 
            has responded with a Resume request.
            </summary>
            <param name="resumePosition">The number of bytes the remote user already has..</param>
            <exception cref="T:System.ArgumentException">If the session is no longer active or the file 
            resume position was larger than the file.</exception>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.TimedOut">
            <summary>
            Called when there has been no activity is
            a session for the the length of the timeout period.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.Interrupted">
            <summary>
            Non synchro version of Stop() for internal
            use.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.Finished">
            <summary>
            The file transfer is done. So close everything
            cleanly.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.Stop">
            <summary>
            Stop the file transfer.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.ToString">
            <summary>
            Summary information about this session.
            </summary>
            <returns>Simple information about this session in human readable format.</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.Get(Sharkbite.Irc.Connection,System.String,System.String,System.Boolean)">
            <summary>
            Ask a remote user to send a file. The remote user may or may not respond
            and there is no fixed time within which he must respond. A response will
            come in the form of a DCC Send request.
            </summary>
            <param name="connection">The connection the remotes user is on.</param>
            <param name="nick">Who to send the request to.</param>
            <param name="fileName">The name of the file to have sent. This should
            not contain any spaces.</param>
            <param name="turbo">True to use send-ahead mode for transfers.</param>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.Send(Sharkbite.Irc.DccUserInfo,System.String,System.Int32,Sharkbite.Irc.DccFileInfo,System.Int32,System.Boolean)">
            <summary>
            Attempt to send a file to a remote user. Start listening
            on the given port and address. If the remote user does not accept
            the offer within the timeout period the the session
            will be closed.
            </summary>
            <remarks>
            This method should be called from within a try/catch block 
            in case there are socket errors. This methods will also automatically 
            handle a Resume if the remote client requests it.
            </remarks>
            <param name="dccUserInfo">The information about the remote user.</param>
            <param name="listenIPAddress">The IP address of the local machine in dot 
            quad format (e.g. 192.168.0.25). This is the address that will be sent to the 
            remote user. The IP address of the NAT machine must be used if the
            client is behind a NAT/Firewall system. </param>
            <param name="listenPort">The port that the session will listen on.</param>
            <param name="dccFileInfo">The file to be sent. If the file name has spaces in it
            they will be replaced with underscores when the name is sent.</param>
            <param name="bufferSize">The size of the send buffer. Generally should
            be between 4k and 32k.</param>
            <param name="turbo">True to use send-ahead mode for transfers.</param>
            <returns>A unique session instance for this file and remote user.</returns>
            <exception cref="T:System.ArgumentException">If the listen port is already in use.</exception>
        </member>
        <member name="M:Sharkbite.Irc.DccFileSession.Receive(Sharkbite.Irc.DccUserInfo,Sharkbite.Irc.DccFileInfo,System.Boolean)">
            <summary>
            Another user has offered to send a file. This method should be called
            to accept the offer and save the file to the give location. The parameters
            needed to call this method are provided by the <c>OnDccFileTransferRequest()</c>
            event.
            </summary>
            <remarks>
            This method should be called from within a try/catch block 
            in case it is unable to connect or there are other socket
            errors.
            </remarks>
            <param name="dccUserInfo">Information on the remote user.</param>
            <param name="dccFileInfo">The local file that will hold the data being sent. If the file 
            is the result of a previous incomplete download the the attempt will be made
            to resume where the previous left off.</param>
            <param name="turbo">Will the send ahead protocol be used.</param>
            <returns>A unique session instance for this file and remote user.</returns>
            <exception cref="T:System.ArgumentException">If the listen port is already in use.</exception>
        </member>
        <member name="E:Sharkbite.Irc.DccFileSession.OnFileTransferTimeout">
            <summary>
            The remote user did not accept the file within the timeout period.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccFileSession.OnFileTransferStarted">
            <summary>
            The file transfer connection is open and data will be sent or
            received.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccFileSession.OnFileTransferInterrupted">
            <summary>
            The file transfer was interrupted and did not complete.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccFileSession.OnFileTransferCompleted">
            <summary>
            The file transfer was successful.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccFileSession.OnFileTransferProgress">
            <summary>
            How much of the file has been sent or received so far.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.DccFileSession.ID">
            <summary>
            A unique identifier for this session.
            </summary>
            <value>Uses the TCP/IP port prefixed by an 'S' if this
            session is serving the file or a 'C' if this session is receiving the
            file.</value>
        </member>
        <member name="P:Sharkbite.Irc.DccFileSession.User">
            <summary>
            The DccUserInfo object associated with this DccFileSession.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.DccFileSession.File">
            <summary>
            The DccFileInfo object associated with this DccFileSession.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.DccFileSession.ClientInfo">
            <summary>
            The information about the remote user.
            </summary>
            <value>A read only instance of DccUserInfo.</value>
        </member>
        <member name="T:Sharkbite.Irc.DccFileSessionManager">
            <summary>
            This class checks each file session to see if it has not 
            had any activity within the timeout period so that
            inactive sessions can be closed.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.DccFileSessionManager.DefaultInstance">
            <summary>
            Returns the singleton instance.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.DccFileSessionManager.TimeoutPeriod">
            <summary>
            Timeout period in milliseconds
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.DccListener">
            <summary>
            DccListener listens for incoming DCC requests on any Connection in which
            DCC is enabled. This class follows the singleton pattern and there so there
            is only a single instance which listens to all connections.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccListener.IsTurbo(System.Int32,System.String[])">
            <summary>
            Determine if the SEND or GET message included Turbo
            mode.
            </summary>
            <param minimumTokens="tokens"></param>
            <returns>True if it did.</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccListener.IsDccRequest(System.String)">
            <summary>
            Test if the message contains a DCC request.
            </summary>
            <param name="message">The raw message from the IRC server</param>
            <returns>True if this is a DCC request.</returns>
        </member>
        <member name="E:Sharkbite.Irc.DccListener.OnDccChatRequest">
            <summary>
            A user from any Connection has sent a request to open a DCC
            chat session.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccListener.OnDccSendRequest">
            <summary>
            A remote user has sent a request to send a file.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.DccListener.OnDccGetRequest">
            <summary>
            A remote user requests that he be sent a file.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.DccListener.DefaultInstance">
            <summary>
            Gets the singleton instance.
            </summary>
            <returns>The instance of DccListener</returns>
        </member>
        <member name="T:Sharkbite.Irc.DccUserInfo">
            <summary>
            This class encapsulates all the information known
            about a remote user in the context of a DCC session.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.UserInfo">
            <summary>
            A convenient holder of user information. Instances of this class
            are created internally.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.UserInfo.nickName">
            <summary>The user's handle.</summary>
        </member>
        <member name="F:Sharkbite.Irc.UserInfo.userName">
            <summary>The user's username on the local machine</summary>
        </member>
        <member name="F:Sharkbite.Irc.UserInfo.hostName">
            <summary>The user's fully qualified host name</summary>
        </member>
        <member name="M:Sharkbite.Irc.UserInfo.#ctor">
            <summary>
            Creat an empty instance
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.UserInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new UserInfo and set all its values.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.UserInfo.ToString">
            <summary>
            A string representation of this object which
            shows all its values.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.UserInfo.Nick">
            <summary>
            An IRC user's nick name.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.UserInfo.User">
            <summary>
            An IRC user's system username.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.UserInfo.Hostname">
            <summary>
            The hostname of the IRC user's machine.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.UserInfo.Empty">
            <summary>
            A singleton blank instance of UserInfo used when an instance is required
            by a method signature but no infomation is available, e.g. the last reply
            from a Who request.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccUserInfo.#ctor(Sharkbite.Irc.Connection,System.String[],System.Net.IPEndPoint)">
            <summary>
            Create a new instance.
            </summary>
            <param name="connection">The originating connection instance.</param>
            <param name="userInfoParts">The parsed nick!user@host string</param>
            <param name="remoteEndPoint">The TCP/IP settings from the other user.</param>
        </member>
        <member name="M:Sharkbite.Irc.DccUserInfo.#ctor(Sharkbite.Irc.Connection,System.String)">
            <summary>
            Create an instance that represents a user.
            </summary>
            <param name="connection">The IRC server connection which the remote user
            is on.</param>
            <param name="nick">The remote user's nick.</param>
        </member>
        <member name="M:Sharkbite.Irc.DccUserInfo.ToString">
            <summary>
            A friendly representation of this object.
            </summary>
            <returns>The remote's user nick and his IP address, e.g. Nick@192.168.0.23</returns>
        </member>
        <member name="P:Sharkbite.Irc.DccUserInfo.RemoteAddress">
            <summary>
            Read only property that returns the
            IP address of the remote user.
            </summary>
            <value>An instance of IPAddress or null if the session
            has not been opened.</value>
        </member>
        <member name="P:Sharkbite.Irc.DccUserInfo.Port">
            <summary>
            Read only property that returns the port
            of the connection to the remote user. 
            </summary>
            <remarks>
            This will be a listen port if the remote user was
            the initiator of the session or else it is simply a client port.
            </remarks>
            <value>The port as an integer. Will return -1 if the session 
            has not yet been opened.</value>
        </member>
        <member name="P:Sharkbite.Irc.DccUserInfo.RemoteEndPoint">
            <summary>
            The remote users TCP/IP information.
            </summary>
            <value>A read-only instance of IPEndPoint</value>
        </member>
        <member name="P:Sharkbite.Irc.DccUserInfo.Connection">
            <summary>
            The connection representing on which IRC server
            the remote user can be found.
            </summary>
            <value>A read-only instance of Connection</value>
        </member>
        <member name="T:Sharkbite.Irc.DccUtil">
            <summary>
            Utility methods needed to handle DCC requests.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.DccUtil.LocalHost">
            <summary>
            Get the IPAddress object for the local machine.
            </summary>
            <returns>An instance of IPAddress.</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccUtil.DccBytesReceivedFormat(System.Int64)">
            <summary>
            Convert a signed long into an unsigned int in
            network byte order.
            </summary>
            <param name="bytesReceived">The number of bytes received as a long.</param>
            <returns>An unsigned int as a 4 byte array.</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccUtil.DccBytesToLong(System.Byte[])">
            <summary>
            Convert the 4 byte current DCC position
            into a host order long.
            </summary>
            <param name="received">The 4 byte unsigned integer.</param>
            <returns>A long</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccUtil.IPAddressToLong(System.Net.IPAddress)">
            <summary>
            Convert an IP address into the network order
            long required by the DCC protocol.
            </summary>
            <param name="ipAddress">A valid IP address</param>
            <returns>The long in string form</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccUtil.LongToIPAddress(System.String)">
            <summary>
            Convert the network order address received from a DCC
            request into an IP address.
            </summary>
            <param name="networkOrder">The address long in string form.</param>
            <returns>An IpAddress object</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccUtil.SpacesToUnderscores(System.String)">
            <summary>
            Convert the spaces in a file name to underscores.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>Underscored string.</returns>
        </member>
        <member name="M:Sharkbite.Irc.DccUtil.NetworkUnsignedLong(System.Int64)">
            <summary>
            Convert a long into an unsigned 4 byte in in network order
            </summary>
            <param name="hostOrderLong">A long in host order</param>
            <returns>The long as unsigned int in network order</returns>
        </member>
        <member name="T:Sharkbite.Irc.ChannelModeInfo">
            <summary>
            A simple struct designed to hold al the attributes that 
            are contain in a Channel mode. 
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.ChannelModeInfo.Action">
            <summary>
            Whether the mode is being added or removed. In the case of a Channel mode
            request this will always be 'added'.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.ChannelModeInfo.Mode">
            <summary>
            What mode is being added or removed.
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.ChannelModeInfo.Parameter">
            <summary>
            Any additional parameters that belong to the mode. For example
            user masks or a maximum numbers of user allowed in a channel.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Connection">
            <summary>
            This class manages the connection to the IRC server and provides
            access to all the objects needed to send and receive messages.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Connection.#ctor(Sharkbite.Irc.ConnectionArgs)">
            <summary>
            Used for internal test purposes only.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Connection.#ctor(Sharkbite.Irc.ConnectionArgs,System.Boolean,System.Boolean)">
            <summary>
            Prepare a connection to an IRC server but do not open it. This sets the text Encoding to Default.
            </summary>
            <param name="args">The set of information need to connect to an IRC server</param>
            <param name="enableCtcp">True if this Connection should support CTCP.</param>
            <param name="enableDcc">True if this Connection should support DCC.</param>
        </member>
        <member name="M:Sharkbite.Irc.Connection.#ctor(System.Text.Encoding,Sharkbite.Irc.ConnectionArgs,System.Boolean,System.Boolean)">
            <summary>
            Prepare a connection to an IRC server but do not open it.
            </summary>
            <param name="args">The set of information need to connect to an IRC server</param>
            <param name="enableCtcp">True if this Connection should support CTCP.</param>
            <param name="enableDcc">True if this Connection should support DCC.</param>
            <param name="textEncoding">The text encoding for the incoming stream.</param>
        </member>
        <member name="M:Sharkbite.Irc.Connection.KeepAlive(System.String)">
            <summary>
            Respond to IRC keep-alives.
            </summary>
            <param name="message">The message that should be echoed back</param>
        </member>
        <member name="M:Sharkbite.Irc.Connection.MyNickChanged(Sharkbite.Irc.UserInfo,System.String)">
            <summary>
            Update the ConnectionArgs object when the user
            changes his nick.
            </summary>
            <param name="user">Who changed their nick</param>
            <param name="newNick">The new nick name</param>
        </member>
        <member name="M:Sharkbite.Irc.Connection.OnNickError(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="badNick"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Sharkbite.Irc.Connection.OnReply(Sharkbite.Irc.ReplyCode,System.String)">
            <summary>
            Listen for the 005 info messages sent during registration so that the maximum lengths
            of certain items (Nick, Away, Topic) can be determined dynamically.
            </summary>
            <param name="code">Reply code enum</param>
            <param name="info">An info line</param>
        </member>
        <member name="M:Sharkbite.Irc.Connection.ReceiveIRCMessages">
            <summary>
            Read in message lines from the IRC server
            and send them to a parser for processing.
            Discard CTCP and DCC messages if these protocols
            are not enabled.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Connection.SendCommand(System.Text.StringBuilder)">
            <summary>
            Send a message to the IRC server and clear the command buffer.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Connection.SendAutomaticReply(System.Text.StringBuilder)">
            <summary>
            Send a message to the IRC server which does
            not affect the client's idle time. Used for automatic replies
            such as PONG or Ctcp repsones.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Connection.Connect">
            <summary>
             Connect to the IRC server and start listening for messages
             on a new thread.
             </summary>
             <exception cref="T:System.Net.Sockets.SocketException">If a connection cannot be established with the IRC server</exception>
        </member>
        <member name="M:Sharkbite.Irc.Connection.SecureConnect">
            <summary>
             Connect to the IRC server over an encrypted connection using TLS.
             </summary>
             <exception cref="T:System.Net.Sockets.SocketException">If a connection cannot be established with the IRC server</exception>
        </member>
        <member name="M:Sharkbite.Irc.Connection.Disconnect(System.String)">
            <summary>
            Sends a 'Quit' message to the server, closes the connection,
            and stops the listening thread. 
            </summary>
            <remarks>The state of the connection will remain the same even after a disconnect,
            so the connection can be reopened. All the event handlers will remain registered.</remarks>
            <param name="reason">A message displayed to IRC users upon disconnect.</param>
        </member>
        <member name="M:Sharkbite.Irc.Connection.ToString">
            <summary>
            A friendly name for this connection.
            </summary>
            <returns>The Name property</returns>
        </member>
        <member name="M:Sharkbite.Irc.Connection.AddParser(Sharkbite.Irc.IParser)">
            <summary>
            Adds a parser class to a list of custom parsers. 
            Any number can be added. The custom parsers
            will be tested using <c>CanParse()</c> before
            the default parsers. The last parser to be added
            will be the first to process a message.
            </summary>
            <param name="parser">Any class that implements IParser.</param>
        </member>
        <member name="M:Sharkbite.Irc.Connection.RemoveParser(Sharkbite.Irc.IParser)">
            <summary>
            Remove a custom parser class.
            </summary>
            <param name="parser">Any class that implements IParser.</param>
        </member>
        <member name="E:Sharkbite.Irc.Connection.OnRawMessageReceived">
            <summary>
            Receive all the messages, unparsed, sent by the IRC server. This is not
            normally needed but provided for those who are interested.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Connection.OnRawMessageSent">
            <summary>
            Receive all the raw messages sent to the IRC from this connection
            </summary>
        </member>
        <member name="P:Sharkbite.Irc.Connection.TextEncoding">
            <summary>
            Sets the text encoding used by the read and write streams.
            Must be set before Connect() is called and should not be changed
            while the connection is processing messages.
            </summary>
            <value>An Encoding constant.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.Registered">
            <summary>
            A read-only property indicating whether the connection 
            has been opened with the IRC server and the 
            client has been successfully registered.
            </summary>
            <value>True if the client is connected and registered.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.Connected">
            <summary>
            A read-only property indicating whether a connection 
            has been opened with the IRC server (but not whether 
            registration has succeeded).
            </summary>
            <value>True if the client is connected.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.HandleNickTaken">
            <summary>
            By default the connection itself will handle the case
            where, while attempting to register the client's nick
            is already in use. It does this by simply appending
            2 random numbers to the end of the nick. 
            </summary>
            <remarks>
            The NickError event is shows that the nick collision has happened
            and it is fixed by calling Sender's Register() method passing
            in the replacement nickname.
            </remarks>
            <value>True if the connection should handle this case and
            false if the client will handle it itself.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.Name">
            <summary>
            A user friendly name of this Connection in the form 'nick@host'
            </summary>
            <value>Read only string</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.EnableCtcp">
            <summary>
            Whether Ctcp commands should be processed and if
            Ctcp events will be raised.
            </summary>
            <value>True will enable the CTCP sender and listener and
            false will cause their property calls to return null.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.EnableDcc">
            <summary>
            Whether DCC requests should be processed or ignored 
            by this Connection. Since the DccListener is a singleton and
            shared by all Connections, listeners to DccListener events should
            be manually removed when no longer needed.
            </summary>
            <value>True to process DCC requests.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.CtcpResponder">
            <summary>
            Sets an automatic responder to Ctcp queries.
            </summary>
            <value>Once this is set it can be removed by setting it to null.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.IdleTime">
            <summary>
            The amount of time that has passed since the client
            sent a command to the IRC server.
            </summary>
            <value>Read only TimeSpan</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.Sender">
            <summary>
            The object used to send commands to the IRC server.
            </summary>
            <value>Read-only Sender.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.Listener">
            <summary>
            The object that parses messages and notifies the appropriate delegate.
            </summary>
            <value>Read only Listener.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.CtcpSender">
            <summary>
            The object used to send CTCP commands to the IRC server.
            </summary>
            <value>Read only CtcpSender. Null if CtcpEnabled is false.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.CtcpListener">
            <summary>
            The object that parses CTCP messages and notifies the appropriate delegate.
            </summary>
            <value>Read only CtcpListener. Null if CtcpEnabled is false.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.ConnectionData">
            <summary>
            The collection of data used to establish this connection.
            </summary>
            <value>Read only ConnectionArgs.</value>
        </member>
        <member name="P:Sharkbite.Irc.Connection.ServerProperties">
            <summary>
            A read-only collection of string key/value pairs
            representing IRC server proprties.
            </summary>
            <value>This connection's ServerProperties obejct or null if it 
            has not been created.</value>
        </member>
        <member name="T:Sharkbite.Irc.ConnectionArgs">
            <summary>
            A collection of parameters necessary to establish
            an IRC connection.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.ConnectionArgs.#ctor(System.String,System.String)">
            <summary>
            Create a new instance initialized with the default values:
            TCP/IP port 6667, no server password, and user mode
            invisible.
            </summary>
            <param name="name">The nick, user name, and real name are 
            all set to this value.</param>
            <param name="hostname">The hostname of the IRC server.</param>
        </member>
        <member name="P:Sharkbite.Irc.ConnectionArgs.Hostname">
            <summary>
            The IRC server hostname
            </summary>
            <value>The full hostname such as irc.gamesnet.net</value>
        </member>
        <member name="P:Sharkbite.Irc.ConnectionArgs.ModeMask">
            <summary>
            Set's the user's initial IRC mode mask. Set to 0 to recieve wallops
            and be invisible. Set to 4 to be invisible and not receive wallops.
            </summary>
            <value>A number mask such as 0 or 4.</value>
        </member>
        <member name="P:Sharkbite.Irc.ConnectionArgs.Nick">
            <summary>
            The user's nick name.
            </summary>
            <value>A string which conforms to the IRC nick standard.</value>
        </member>
        <member name="P:Sharkbite.Irc.ConnectionArgs.Port">
            <summary>
            The TCP/IP port the IRC listens server listens on.
            </summary>
            <value> Normally should be set to 6667. </value>
        </member>
        <member name="P:Sharkbite.Irc.ConnectionArgs.RealName">
            <summary>
            The user's 'real' name.
            </summary>
            <value>A short string with any legal characters.</value>
        </member>
        <member name="P:Sharkbite.Irc.ConnectionArgs.UserName">
            <summary>
            The user's machine logon name.
            </summary>
            <value>A short string with any legal characters.</value>
        </member>
        <member name="P:Sharkbite.Irc.ConnectionArgs.ServerPassword">
            <summary>
            The password for this server. These are seldomly used. Set to '*' 
            </summary>
            <value>A short string with any legal characters.</value>
        </member>
        <member name="T:Sharkbite.Irc.ReplyEventHandler">
            <summary>
            Messages that are not handled by other events and are not errors.
            </summary>
            <param name="code">The RFC 2812 numeric code.</param>
            <param name="message">The unparsed message text.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnReply"/>
        </member>
        <member name="T:Sharkbite.Irc.ErrorMessageEventHandler">
            <summary>
            Error messages from the IRC server.
            </summary>
            <param name="code">The RFC 2812 or custom numeric code.</param>
            <param name="message">The error message text.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnError"/>
        </member>
        <member name="T:Sharkbite.Irc.AwayEventHandler">
            <summary>
            A Notice or Private message was sent to someone
            whose status is away.
            </summary>
            <param name="nick">The nick of the user who is away.</param>
            <param name="awayMessage">An away message, if any, set by the user. </param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnAway"/>
        </member>
        <member name="T:Sharkbite.Irc.InviteSentEventHandler">
            <summary>
            An Invite message was successfully sent to another user. 
            </summary>
            <param name="nick">The nick of the user who was invited</param>
            <param name="channel">The name of the channel the user was invited to join</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnInviteSent"/>
        </member>
        <member name="T:Sharkbite.Irc.NickErrorEventHandler">
            <summary>
            Called when a nick change fails.
            </summary>
            <remarks>
            <para>This method can be called under 2 conditions:
            It can arise when the user is already 
            registered with the IRC server and is trying change his nick.
            Or when the user is trying to register for the first time with 
            the IRC server and it fails.</para>
            <para>Note that if the later arises then you will have to manually
            complete the regsitration process.</para> 
            </remarks>
            <param name="badNick">The nick which caused the problem</param>
            <param name="reason">A message explaining the error</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnNickError"/>
        </member>
        <member name="T:Sharkbite.Irc.PingEventHandler">
            <summary>
            Called when a server sends a keep-alive Ping.
            </summary>
            <param name="message">The message that the IRC server wants echoed back to it.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPing"/>
        </member>
        <member name="T:Sharkbite.Irc.RegisteredEventHandler">
            <summary>
            Connection with IRC server is open and registered.
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnRegistered"/>
        </member>
        <member name="T:Sharkbite.Irc.DisconnectingEventHandler">
            <summary>
            This connection is about to be closed 
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnDisconnecting"/>
        </member>
        <member name="T:Sharkbite.Irc.DisconnectedEventHandler">
            <summary>
            This connection has been closed 
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnDisconnected"/>
        </member>
        <member name="T:Sharkbite.Irc.PublicNoticeEventHandler">
            <summary>
            A Notice type message was sent to a channel.
            </summary>
            <param name="user">The user who sent the message.</param>
            <param name="channel">The target channel.</param>
            <param name="notice">A message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPublicNotice"/>
        </member>
        <member name="T:Sharkbite.Irc.PrivateNoticeEventHandler">
            <summary>
            A private Notice type message was sent to the user.
            </summary>
            <param name="user">The user who sent the message.</param>
            <param name="notice">A message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivateNotice"/>
        </member>
        <member name="T:Sharkbite.Irc.JoinEventHandler">
            <summary>
            Someone has joined a channel.
            </summary>
            <param name="user">Who joined.</param>
            <param name="channel">The channel name.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnJoin"/>
        </member>
        <member name="T:Sharkbite.Irc.ActionEventHandler">
            <summary>
            An action message was sent to a channel.
            </summary>
            <param name="user">The user who expresses the action.</param>
            <param name="channel">The target channel.</param>
            <param name="description">An action.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnAction"/>
        </member>
        <member name="T:Sharkbite.Irc.PrivateActionEventHandler">
            <summary>
            A private action message was sent to the user.
            </summary>
            <param name="user">The user who expresses the action.</param>
            <param name="description">An action.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivateAction"/>
        </member>
        <member name="T:Sharkbite.Irc.PublicMessageEventHandler">
            <summary>
            A public message was sent to a channel.
            </summary>
            <param name="user">The user who sent the message.</param>
            <param name="channel">The taregt channel.</param>
            <param name="message">A message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPublic"/>
        </member>
        <member name="T:Sharkbite.Irc.NickEventHandler">
            <summary>
            A user changed his nickname.
            </summary>
            <param name="user">The user who is changing his nick.</param>
            <param name="newNick">The new nickname.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnNick"/>
        </member>
        <member name="T:Sharkbite.Irc.PrivateMessageEventHandler">
            <summary>
            A private message was sent to the user.
            </summary>
            <param name="user">Who sent the message.</param>
            <param name="message">The message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivate"/>
        </member>
        <member name="T:Sharkbite.Irc.TopicEventHandler">
            <summary>
            A channel's topic has changed.
            </summary>
            <param name="user">Who changed the topic.</param>
            <param name="channel">Which channel had its topic changed.</param>
            <param name="newTopic">The new topic.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnTopicChanged"/>
        </member>
        <member name="T:Sharkbite.Irc.TopicRequestEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestTopic(System.String)"/> command.
            </summary>
            <param name="channel">The channel who topic was requested.</param>
            <param name="topic">The topic.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnTopicRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.PartEventHandler">
            <summary>
            Someone has left a channel. 
            </summary>
            <param name="user">The user who left.</param>
            <param name="channel">The channel he left.</param>
            <param name="reason">The reason for leaving.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPart"/>
        </member>
        <member name="T:Sharkbite.Irc.QuitEventHandler">
            <summary>
            Someone has quit IRC.
            </summary>
            <param name="user">The user who quit.</param>
            <param name="reason">A goodbye message.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnQuit"/>
        </member>
        <member name="T:Sharkbite.Irc.InviteEventHandler">
            <summary>
            The user has been invited to a channel.
            </summary>
            <param name="user">Who sent the invite.</param>
            <param name="channel">The target channel.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnInvite"/>
        </member>
        <member name="T:Sharkbite.Irc.KickEventHandler">
            <summary>
            Someone has been kicked from a channel. 
            </summary>
            <param name="user">Who did the kicking.</param>
            <param name="channel">The channel that the person was kicked from.</param>
            <param name="kickee">Who was kicked.</param>
            <param name="reason">Why the person was kicked.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnKick"/>
        </member>
        <member name="T:Sharkbite.Irc.NamesEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Names(System.String[])"/> request.
            </summary>
            <param name="channel">The channel the user is on. "@" is used for secret channels, "*" for private
            channels, and "=" for public channels.</param>
            <param name="nicks">A list of nicks on the channel. If this is the last reply
            then it will be empty. Nicks prefixed with a '@' are channel
            operators. Nicks prefixed with a '+' have voice privileges on
            a moderated channel, i.e. they are allowed to send public messages.</param>
            <param name="last">True if this is the last names reply.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnNames"/>
        </member>
        <member name="T:Sharkbite.Irc.ListEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.List(System.String[])"/> request.
            </summary>
            <param name="channel">The channel name.</param>
            <param name="visibleNickCount">The number of visible users on that channel.</param>
            <param name="topic">The channel's topic.</param>
            <param name="last">True if this is the last reply.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnList"/>
        </member>
        <member name="T:Sharkbite.Irc.IsonEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Ison(System.String)"/> request.
            </summary>
            <param name="nicks">If someone with this nick is on the same IRC network their nick
            will be returned here. Otherwise nick will be an empty string.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnIson"/>
        </member>
        <member name="T:Sharkbite.Irc.WhoEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Who(System.String,System.Boolean)"/> request.
            </summary>
            <param name="user">The subject of the query</param>
            <param name="channel">The channel the user is on</param>
            <param name="ircServer">The name of the user's IRC server</param>
            <param name="mask">The user's mode mask</param>
            <param name="hopCount">Number of network hops to the user</param>
            <param name="realName">The user's real name</param>
            <param name="last">True if this is the last response</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnWho"/>
        </member>
        <member name="T:Sharkbite.Irc.WhoisEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Whois(System.String)"/> request.
            </summary>
            <param name="whoisInfo">The data associated with the nick queried.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnWho"/>
        </member>
        <member name="T:Sharkbite.Irc.WhowasEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Whowas(System.String)"/> request.
            </summary>
            <param name="user">Information on the user.</param>
            <param name="realName">The user's real name.</param>
            <param name="last">True if this is the final reply.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnWhowas"/>
        </member>
        <member name="T:Sharkbite.Irc.UserModeChangeEventHandler">
            <summary>
            This user's mode has changed.
            </summary>
            <param name="action">Whether a mode was added or removed.</param>
            <param name="mode">The mode that was changed.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnUserModeChange"/>
        </member>
        <member name="T:Sharkbite.Irc.UserModeRequestEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestUserModes"/> command for this user.
            </summary>
            <param name="modes">The complete list of user modes as an array.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnUserModeRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.ChannelModeRequestEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestChannelModes(System.String)"/> command.
            </summary>
            <param name="channel">The name of the channel.</param>
            <param name="modes">Objects which hold all the information about a channel's modes.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelModeRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.ChannelModeChangeEventHandler">
            <summary>
            A channel's mode has changed.
            </summary>
            <param name="who">Who changed the mode.</param>
            <param name="channel">The name of the channel.</param>
            <param name="modes">Objects which hold all the information about 1 or more mode changes.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelModeChange"/>
        </member>
        <member name="T:Sharkbite.Irc.ChannelListEventHandler">
            <summary>
            Response to a <see cref="M:Sharkbite.Irc.Sender.RequestChannelList(System.String,Sharkbite.Irc.ChannelMode)"/> command.
            </summary>
            <param name="channel">The channel name.</param>
            <param name="mode">What type is this a list? For example bans, invitation masks, etc..</param>
            <param name="item">A mask or nick (in the case of ChannelCreator).</param>
            <param name="last">Is this the last item. If its the last then the item paramter
            will be empty unless the mode is ChannelCreator.</param>
            <param name="who">Who set the mask (not for ChannelCreator).</param>
            <param name="whenSet">When was it set (not for ChannelCreator).</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelList"/>
        </member>
        <member name="T:Sharkbite.Irc.CtcpReplyEventHandler">
            <summary>
            Someone has replied to a Ctcp request sent by this client.
            </summary>
            <param name="who">Who sent the reply.</param>
            <param name="command">The Ctcp command this replies to."</param>
            <param name="reply">The text of the reply.</param>
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpReply"/>
        </member>
        <member name="T:Sharkbite.Irc.CtcpRequestEventHandler">
            <summary>
            Someone has sent a Ctcp request.
            </summary>
            <param name="who">Who sent the request.</param>
            <param name="command">The Ctcp command to send to IRC."</param>
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.CtcpPingReplyEventHandler">
            <summary>
            Someone has replied to a Ctcp ping request sent by this client.
            </summary>
            <param name="who">Who sent the reply.</param>
            <param name="timestamp">The timestamp originally sent in the request."</param>
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpPingReply"/>
        </member>
        <member name="T:Sharkbite.Irc.CtcpPingRequestEventHandler">
            <summary>
            Someone has sent a Ctcp Ping request.
            </summary>
            <param name="who">Who sent the request.</param>
            <param name="timestamp">The timestamp which should be sent 
            back."</param>
            <see cref="F:Sharkbite.Irc.CtcpListener.OnCtcpPingRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.DccChatRequestEventHandler">
            <summary>
            Someone has requested a DCC chat session.
            </summary>
            <param name="dccUserInfo">The collection of information about the remote user.</param>
            <see cref="F:Sharkbite.Irc.DccListener.OnDccChatRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.ChatSessionOpenedEventHandler">
            <summary>
            A DCC chat session has been opened with a remote user.
            </summary>
            <param name="session">Which session is the source of the event.</param>
            <see cref="F:Sharkbite.Irc.DccChatSession.OnChatSessionOpened"/>
        </member>
        <member name="T:Sharkbite.Irc.ChatSessionClosedEventHandler">
            <summary>
            A DCC chat session has been closed.
            </summary>
            <param name="session">Which session is the source of the event.</param>
            <see cref="F:Sharkbite.Irc.DccChatSession.OnChatSessionClosed"/>
        </member>
        <member name="T:Sharkbite.Irc.ChatMessageReceivedEventHandler">
            <summary>
            A DCC chat message was received from the remote user.
            </summary>
            <param name="session">Which session is the source of the event.</param>
            <param name="message">A string message.</param>
            <see cref="F:Sharkbite.Irc.DccChatSession.OnChatMessageReceived"/>
        </member>
        <member name="T:Sharkbite.Irc.ChatRequestTimeoutEventHandler">
            <summary>
            When trying to initiate a DCC chat request the remote user
            did not respond within the alotted time.
            </summary>
            <param name="session">Which session is the source of the event.</param>
            <see cref="F:Sharkbite.Irc.DccChatSession.OnChatRequestTimeout"/>
        </member>
        <member name="T:Sharkbite.Irc.DccSendRequestEventHandler">
            <summary>
            Another user has offered to send a file.
            </summary>
            <param name="dccUserInfo">The collection of information about the remote user.</param>
            <param name="fileName">The name of the file to be sent.</param>
            <param name="size">The size in bytes of the offered file.</param>
            <param name="turbo">True if the sender will use send-ahead mode.</param>
            <see cref="F:Sharkbite.Irc.DccListener.OnDccSendRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.FileTransferTimeoutEventHandler">
            <summary>
            There has been no activity in this session for the timeout period. The 
            session is automatically closed and this event is raised. 
            </summary>
            <param name="session">The session in which the timeout occurred.</param> 
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferTimeout"/>
        </member>
        <member name="T:Sharkbite.Irc.FileTransferStartedEventHandler">
            <summary>
            The file transfer connection has been successfully opened and the data
            transfer has begun.
            </summary>
            <param name="session">The session in which the transfer has started.</param> 
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferStarted"/>
        </member>
        <member name="T:Sharkbite.Irc.FileTransferInterruptedEventHandler">
            <summary>
            Something happened to stop the transfer before it was completed. Normally
            this will be due to one of the sides canceling the transfer.
            </summary>
            <param name="session">The session in which the transfer was interrupted.</param> 
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferInterrupted"/>
        </member>
        <member name="T:Sharkbite.Irc.FileTransferCompletedEventHandler">
            <summary>
            A file was succefully transfered.
            </summary>
            <param name="session">The session in which the transfer was successfully completed.</param> 
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferCompleted"/>
        </member>
        <member name="T:Sharkbite.Irc.FileTransferProgressEventHandler">
            <summary>
            Called for each successful data block transfer. This allows the developer
            to show a transfer progress display of some kind.
            </summary>
            <param name="session">The session in which data was transfered.</param> 
            <param name="bytesSent">The number of bytes sent in this block. The DccFileSession
            contains the cumulative number of bytes sent/received and the total number
            the will be processed.</param> 
            <see cref="F:Sharkbite.Irc.DccFileSession.OnFileTransferProgress"/>
        </member>
        <member name="T:Sharkbite.Irc.DccGetRequestEventHandler">
            <summary>
            A remote user has requested a file. To respond
            use <see cref="M:Sharkbite.Irc.DccFileSession.Send(Sharkbite.Irc.DccUserInfo,System.String,System.Int32,Sharkbite.Irc.DccFileInfo,System.Int32,System.Boolean)"/> with the relevant information.
            </summary>
            <param name="dccUserInfo">The requestor's information.</param>
            <param name="fileName">The name of the requested file.</param>
            <param name="turbo">True to use send-ahead mode for transfers.</param>
            <see cref="F:Sharkbite.Irc.DccListener.OnDccGetRequest"/>
        </member>
        <member name="T:Sharkbite.Irc.RawMessageReceivedEventHandler">
            <summary>
            The full unparsed text messages received from the IRC server. It
            includes all messages received except for those exchanged during a DCC chat.
            </summary>
            <param name="message">The text received.</param>
            <see cref="F:Sharkbite.Irc.Connection.OnRawMessageReceived"/>
        </member>
        <member name="T:Sharkbite.Irc.RawMessageSentEventHandler">
            <summary>
            The full unparsed text messages sent to the IRC server. It
            includes all messages sent except for those exchanged during a DCC chat.
            </summary>
            <param name="message">The text sent.</param>
            <see cref="F:Sharkbite.Irc.Connection.OnRawMessageSent"/>
        </member>
        <member name="T:Sharkbite.Irc.VersionEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Version"/> request.
            </summary>
            <param name="versionInfo">The information string in the form 
            IRC: [version].[debuglevel] [server] :[comments]</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnVersion"/>
        </member>
        <member name="T:Sharkbite.Irc.MotdEventHandler">
            <summary>
            The server's "Message of the Day" if any.
            </summary>
            <param name="message">An information string.</param>
            <param name="last">True if this is the last in the set of messages.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnMotd"/>
        </member>
        <member name="T:Sharkbite.Irc.TimeEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Time"/> request.
            </summary>
            <param name="time">The name of the server and
            its local time</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnTime"/>
        </member>
        <member name="T:Sharkbite.Irc.InfoEventHandler">
            <summary>
            The response to an <see cref="M:Sharkbite.Irc.Sender.Info"/> request.
            </summary>
            <param name="message">An information string.</param>
            <param name="last">True if this is the last in the set of messages.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnInfo"/>
        </member>
        <member name="T:Sharkbite.Irc.AdminEventHandler">
            <summary>
            The response to an <see cref="M:Sharkbite.Irc.Sender.Admin"/> request.
            </summary>
            <param name="message">An information string.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnAdmin"/>
        </member>
        <member name="T:Sharkbite.Irc.LusersEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Lusers"/> request.
            </summary>
            <param name="message">An information string.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnLusers"/>
        </member>
        <member name="T:Sharkbite.Irc.LinksEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Links"/> request.
            </summary>
            <param name="mask">The hostname as it appears in IRC queries.</param>
            <param name="hostname">The actual hostname.</param>
            <param name="hopCount">The number of hops from this server to the target server.</param>
            <param name="serverInfo">Information about the server, usually the network name.</param>
            <param name="done">True if this is the last message in the series. If it is the
            last it will not contain any server information.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnLinks"/>
        </member>
        <member name="T:Sharkbite.Irc.StatsEventHandler">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Stats(Sharkbite.Irc.StatsQuery)"/> request.
            </summary>
            <param name="queryType">What kind of query this is in response to.</param>
            <param name="message">The actual response.</param>
            <param name="done">True if this is the last message in the series.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnStats"/>
        </member>
        <member name="T:Sharkbite.Irc.KillEventHandler">
            <summary>
            Someone was disconnected from the server via a Kill.
            </summary>
            <param name="user">Which Operator send teh Kill command</param>
            <param name="nick">Who was Killed.</param>
            <param name="reason">Why the nick was disconnected.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnKill"/>
        </member>
        <member name="T:Sharkbite.Irc.ModeAction">
            <summary>
            Whether a mode has been added or removed.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ModeAction.Add">
            <summary>
            Mode added
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ModeAction.Remove">
            <summary>
            Mode removed
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.UserMode">
            <summary>
            The possible user modes.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.UserMode.Away">
            <summary>
            User is away
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.UserMode.Wallops">
            <summary>
            User will receive server status messages
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.UserMode.Invisible">
            <summary>
            User cannot be seen by certain IRC queries
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.UserMode.Operator">
            <summary>
            The user is an IRC operator (IRCOP)
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.UserMode.Restricted">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.UserMode.LocalOperator">
            <summary>
            User is a channel operator/owner
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.UserMode.ServerNotices">
            <summary>
            Marks a user for receipt of server notices
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.ChannelMode">
            <summary>
            Possible channel modes.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.ChannelCreator">
            <summary>
            The mode 'O' is only used in conjunction with "safe channels" and
            SHALL NOT be manipulated by users. Servers use it to give the user
            creating the channel the status of "channel creator".
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.ChannelOperator">
            <summary>
            The mode 'o' is used to toggle the operator status of a channel
            member. 
            	
            Should include a nick or user mask parameter.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.HalfChannelOperator">
            <summary>
            The mode 'h' is used to toggle the non-standard but common half-operator status of a channel
            member. 
            	
            Should include a nick or user mask parameter.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Voice">
            <summary>
            The mode 'v' is used to give and take voice privilege to/from a
            channel member. Users with this privilege can talk on moderated
            channels. 
            	
            Should include a nick or user mask parameter.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Anonymous">
            <summary>
            The channel flag 'a' defines an anonymous channel. This means that
            when a message sent to the channel is sent by the server to users,
            and the origin is a user, then it MUST be masked. 
            	
            No param required.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.InviteOnly">
            <summary>
            When the channel flag 'i' is set, new members are only accepted if
            their mask matches Invite-list or they have been
            invited by a channel operator. This flag also restricts the usage of
            the INVITE command to channel operators.
            
            No param required.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Moderated">
            <summary>
            The channel flag 'm' is used to control who may speak on a channel.
            When it is set, only channel operators, and members who have been
            given the voice privilege may send messages to the channel.
            
            No param required.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.NoOutside">
            <summary>
            When the channel flag 'n' is set, only channel members MAY send
            messages to the channel.
            	
            No param required
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Quiet">
            <summary>
            The channel flag 'q' is for use by servers only. When set, it
            restricts the type of data sent to users about the channel
            operations: other user joins, parts and nick changes are not sent.
            From a user's point of view, the channel contains only one user.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Private">
            <summary>
            The channel flag 'p' is used to mark a channel "private" and the
            channel flag 's' to mark a channel "secret". Both properties are
            similar and conceal the existence of the channel from other users.
            	
            No param required.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Secret">
            <summary>
            When a channel is "secret", in addition to the restrictions of Private, the
            server will act as if the channel does not exist for queries like the
            TOPIC, LIST, NAMES commands. Note that there is one exception to
            this rule: servers will correctly reply to the MODE command.
            Finally, secret channels are not accounted for in the reply to the
            LUSERS command when the mask parameter is specified.
            	
            No param required.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.ServerReop">
            <summary>
            The channel flag 'r' is only available on channels which name begins
            with the character '!' and MAY only be toggled by the "channel
            creator".
            	
            No param required.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.TopicSettable">
            <summary>
            The channel flag 't' is used to restrict the usage of the TOPIC
            command to channel operators.
            
            No param required.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Password">
            <summary>
            When a channel key is set (by using the mode 'k'), servers MUST
            reject their local users request to join the channel unless this key
            is given.
            	
            Param is the channel password.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.UserLimit">
            <summary>
            A user limit may be set on channels by using the channel flag 'l'.
            When the limit is reached, servers MUST forbid their local users to
            join the channel.
            	
            Param is a whole number indicating the max number of users.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Ban">
            <summary>
            When a user requests to join a channel, his local server checks if
            the user's address matches any of the ban masks set for the channel.
            If a match is found, the user request is denied unless the address
            also matches an exception mask set for the channel.
            
            Param is a nick or user mask.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Exception">
            <summary>
            An error ocurred.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ChannelMode.Invitation">
            <summary>
            For channels which have the invite-only flag set, users whose 
            address matches an invitation mask set for the channel are 
            allowed to join the channel without any invitation.
            
            Param is a nick or user mask.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.StatsQuery">
            <summary>
            The possible stats message query parameters.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.StatsQuery.Connections">
            <summary>
            A list of server connections.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.StatsQuery.CommandUsage">
            <summary>
            The usage count for each of command supported
            by the server.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.StatsQuery.Operators">
            <summary>
            The list of IRC operators.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.StatsQuery.Uptime">
            <summary>
            The server uptime.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.MircColor">
            <summary>
            All recognized mIRC colors.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Identd">
            <summary>
            An Ident daemon is still used by some IRC networks for 
            authentication. It is a simple service which when queried
            by a remote system returns a username. The server is controlled via static
            methods all of which are Thread safe.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Identd.Start(System.String)">
            <summary>
            The Identd server will start listening for queries
            in its own thread. It can be stopped by calling
            <see cref="M:Sharkbite.Irc.Identd.Stop"/>.
            </summary>
            <param name="userName">Should be the same username as the one used
            in the ConnectionArgs object when establishing a connection.</param>
            <exception cref="T:System.Exception">If the server has already been started.</exception>
        </member>
        <member name="M:Sharkbite.Irc.Identd.IsRunning">
            <summary>
            Check if the Identd server is running
            </summary>
            <returns>True if it is running</returns>
        </member>
        <member name="M:Sharkbite.Irc.Identd.Stop">
            <summary>
            Stop the Identd server and close the thread.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.IParser">
            <summary>
            Classes should implement this Interface in order to act as custom
            parsers for the raw messages received from IRC servers.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.IParser.CanParse(System.String)">
            <summary>
            Before a message is passed to the custom parser
            the Connection will check if the IRC message is the right kind.
            </summary>
            <param name="line">The raw message from the IRC server.</param>
            <returns>True if this parser can process the message.</returns>
        </member>
        <member name="M:Sharkbite.Irc.IParser.Parse(System.String)">
            <summary>
            Send the raw IRC message to this custom parser. <i>This
            consumes the message and it will not be processed by the default
            or any other custom parsers after this one.</i>
            </summary>
            <param name="message">The raw message from the IRC server.</param>
        </member>
        <member name="T:Sharkbite.Irc.Listener">
            <summary>
            This class parses messages received from the IRC server and
            raises the appropriate event. 
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.Listener.whoisInfos">
            <summary>
            Table to hold WhoIsInfos while they are being created. The key is the
            nick and the value if the WhoisInfo struct.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Listener.#ctor">
            <summary>
            Create an instance ready to parse
            incoming messages.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Listener.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sharkbite.Irc.Listener.Disconnecting">
            <summary>
            Warn listeners that we are about to close this connection
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Listener.Disconnected">
            <summary>
            Tell listeners that this connection is closed
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Listener.Error(Sharkbite.Irc.ReplyCode,System.String)">
            <summary>
            Tell listeners that an error has been encountered
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Listener.ParseCommand(System.String[])">
            <summary>
            Parse the message and call the callback methods
            on the listeners.
            
            </summary>
            <param name="tokens">The text received from the IRC server</param>
        </member>
        <member name="M:Sharkbite.Irc.Listener.HandleDefaultReply(Sharkbite.Irc.ReplyCode,System.String[])">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="tokens"></param>
        </member>
        <member name="M:Sharkbite.Irc.Listener.LookupInfo(System.String)">
            <summary>
            Find the correct WhoIs object based on the nick name.
            </summary>
            <param name="nick"></param>
            <returns></returns>
        </member>
        <member name="M:Sharkbite.Irc.Listener.CondenseStrings(System.String[],System.Int32)">
            <summary>
            Turn an array of strings back into a single string.
            </summary>
            <param name="strings"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Sharkbite.Irc.Listener.RemoveTrailingQuote(System.String)">
            <summary>
            Strip off the trailing CTCP quote.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnReply">
            <summary>
            Messages that are not handled by other events and are not errors.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnError">
            <summary>
            Error messages from the IRC server.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnAway">
             <summary>
            A <see cref="M:Sharkbite.Irc.Sender.PrivateNotice(System.String,System.String)"/> or <see cref="M:Sharkbite.Irc.Sender.PrivateMessage(System.String,System.String)"/> message was sent to someone who is away.
             </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnInviteSent">
            <summary>
            An <see cref="M:Sharkbite.Irc.Sender.Invite(System.String,System.String)"/> message was successfully sent to another user. 
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnNickError">
            <summary>
            The user tried to change his nick but it failed.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnPing">
            <summary>
            A server keep-alive message.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnRegistered">
            <summary>
            Connection with the IRC server is open and registered.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnDisconnecting">
            <summary>
            This connection is about to be closed. 
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnDisconnected">
            <summary>
            This connection has been closed. 
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnPublicNotice">
            <summary>
            A Notice type message was sent to a channel.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnPrivateNotice">
            <summary>
            A private Notice type message was sent to the user.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnJoin">
            <summary>
            Someone has joined a channel.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnPublic">
            <summary>
            A public message was sent to a channel.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnAction">
            <summary>
            An action message was sent to a channel.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnPrivateAction">
            <summary>
            A private action message was sent to the user.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnNick">
            <summary>
            A user changed his nickname.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnPrivate">
            <summary>
            A private message was sent to the user.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnTopicChanged">
            <summary>
            A channel's topic has changed.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnTopicRequest">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestTopic(System.String)"/> command.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnPart">
            <summary>
            Someone has left a channel. 
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnQuit">
            <summary>
            Someone has quit IRC.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnInvite">
            <summary>
            The user has been invited to a channel.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnKick">
            <summary>
            Someone has been kicked from a channel. 
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnNames">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Names(System.String[])"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnList">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.List(System.String[])"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnIson">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Ison(System.String)"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnWho">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Who(System.String,System.Boolean)"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnWhois">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Whois(System.String)"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnWhowas">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Whowas(System.String)"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnUserModeChange">
            <summary>
            Someone's user mode has changed.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnUserModeRequest">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestUserModes"/> command for this user.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnChannelModeRequest">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.RequestChannelModes(System.String)"/> command.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnChannelModeChange">
            <summary>
            A channel's mode has changed.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnChannelList">
            <summary>
            Response to a <see cref="M:Sharkbite.Irc.Sender.RequestChannelList(System.String,Sharkbite.Irc.ChannelMode)"/> command.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnVersion">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Version"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnMotd">
            <summary>
            A server's 'Message of the Day'
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnTime">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Time"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnInfo">
            <summary>
            The response to an <see cref="M:Sharkbite.Irc.Sender.Info"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnAdmin">
            <summary>
            The response to an <see cref="M:Sharkbite.Irc.Sender.Admin"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnLusers">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Lusers"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnLinks">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Links"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnStats">
            <summary>
            The response to a <see cref="M:Sharkbite.Irc.Sender.Stats(Sharkbite.Irc.StatsQuery)"/> request.
            </summary>
        </member>
        <member name="E:Sharkbite.Irc.Listener.OnKill">
            <summary>
            A User has been disconnected via a Kill message.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.NameGenerator">
            <summary>
            Generates random, made-up names. The names appear to be language neutral (sort of).
            </summary>
            <remarks>This is a port of the orginal Javascript written by John Ahlschwede, ahlschwede@hotmail.com</remarks>
        </member>
        <member name="M:Sharkbite.Irc.NameGenerator.#ctor">
            <summary>
            Create an instance.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.NameGenerator.MakeName">
            <summary>
            Generates a name randomly using certain construction rules. The name
            will be different each time it is called.
            </summary>
            <returns>A name string.</returns>
        </member>
        <member name="T:Sharkbite.Irc.ReplyCode">
            <summary>
            Numeric message codes taken from RFC 2812
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_WELCOME">
            <summary>
            IRC: Welcome to the Internet Relay Networ [nick]![user]@[host]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_YOURHOST">
            <summary>
            IRC: Your host is [servername], running version [ver]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_CREATED">
            <summary>
            IRC: This server was created [date]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_MYINFO">
            <summary>
            IRC: [servername] [version] [available user modes [available channel modes]
            
            Description: The server sends Replies 001 to 004 to a user upon
            successful registration.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_BOUNCE">
            <summary>
            IRC: Try server [server name], port [port number]
            
            Description: Sent by the server to a user to suggest an alternative
            server. This is often used when the connection is
            refused because the server is already full.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_USERHOST">
            <summary>
            IRC: :*1[reply] *( " " [reply] )
            
            Description: Reply format used by USERHOST to list replies to
            the query list. The reply string is composed as
            follows:
            reply = nickname [ "*" ] "=" ( "+" / "-" ) hostname
            The '*' indicates whether the client has registered
            as an Operator. The '-' or '+' characters represent
            whether the client has set an AWAY message or not
            respectively.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ISON">
            <summary>
            IRC: :*1[nick] *( " " [nick] )
            
            Description: Reply format used by ISON to list replies to the
            query list.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_AWAY">
            <summary>
            IRC: [nick] :[away message]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_UNAWAY">
            <summary>
            IRC: :You are no longer marked as being away
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_NOWAWAY">
            <summary>
            IRC: :You have been marked as being away
            
            Description: These replies are used with the AWAY command (if
            allowed). RPL_AWAY is sent to any client sending a
            PRIVMSG to a client which is away. RPL_AWAY is only
            sent by the server to which the client is connected.
            Replies RPL_UNAWAY and RPL_NOWAWAY are sent when the
            client removes and sets an AWAY message.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_WHOISUSER">
            <summary>
            IRC: [nick] [user] [host] * :[real name]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_WHOISSERVER">
            <summary>
            IRC: [nick] [server] :[server info]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_WHOISOPERATOR">
            <summary>
            IRC: [nick] :is an IRC operator
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_WHOISIDLE">
            <summary>
            IRC: [nick] [integer] :seconds idle
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFWHOIS">
            <summary>
            IRC: [nick] :End of WHOIS list
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_WHOISCHANNELS">
            <summary>
            IRC: [nick] :*( ( "@" / "+" ) [channel] " " )
            
            Description: Replies 311 - 313, 317 - 319 are all replies
            generated in response to a WHOIS message. Given that
            there are enough parameters present, the answering
            server MUST either formulate a reply out of the above
            numerics (if the query nick is found) or return an
            error reply. The '*' in RPL_WHOISUSER is there as
            the literal character and not as a wild card. For
            each reply set, only RPL_WHOISCHANNELS may appear
            more than once (for long lists of channel names).
            The '@' and '+' characters next to the channel name
            indicate whether a client is a channel operator or
            has been granted permission to speak on a moderated
            channel. The RPL_ENDOFWHOIS reply is used to mark
            the end of processing a WHOIS message.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_WHOWASUSER">
            <summary>
            IRC: [nick] [user] [host] * :[real name]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFWHOWAS">
            <summary>
            IRC: [nick] :End of WHOWAS
            
            Description: When replying to a WHOWAS message, a server MUST use
            the replies RPL_WHOWASUSER, RPL_WHOISSERVER or
            ERR_WASNOSUCHNICK for each nickname in the presented
            list. At the end of all reply batches, there MUST
            be RPL_ENDOFWHOWAS (even if there was only one reply
            and it was an error).
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LISTSTART">
            <summary>
            
            Description: Obsolete. Not used.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LIST">
            <summary>
            IRC: [channel] [# visible] :[topic]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LISTEND">
            <summary>
            IRC: :End of LIST
            
            Description: Replies RPL_LIST, RPL_LISTEND mark the actual replies
            with data and end of the server's response to a LIST
            command. If there are no channels available to return,
            only the end reply MUST be sent.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_UNIQOPIS">
            <summary>
            IRC: [channel] [nickname]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_CHANNELMODEIS">
            <summary>
            IRC: [channel] [mode] [mode params]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_NOTOPIC">
            <summary>
            IRC: [channel] :No topic is set
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TOPIC">
            <summary>
            IRC: [channel] :[topic]
            
            Description: When sending a TOPIC message to determine the
            channel topic, one of two replies is sent. If
            the topic is set, RPL_TOPIC is sent back else
            RPL_NOTOPIC.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_INVITING">
            <summary>
            IRC: [channel] [nick]
            
            Description: Returned by the server to indicate that the
            attempted INVITE message was successful and is
            being passed onto the end client.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_SUMMONING">
            <summary>
            IRC: [user] :Summoning user to IRC
            
            Description: Returned by a server answering a SUMMON message to
            indicate that it is summoning that user.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_INVITELIST">
            <summary>
            IRC: [channel] [invitemask]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFINVITELIST">
            <summary>
            IRC: [channel] :End of channel invite list
            
            Description: When listing the 'invitations masks' for a given channel,
            a server is required to send the list back using the
            RPL_INVITELIST and RPL_ENDOFINVITELIST messages. A
            separate RPL_INVITELIST is sent for each active mask.
            After the masks have been listed (or if none present) a
            RPL_ENDOFINVITELIST MUST be sent.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_EXCEPTLIST">
            <summary>
            IRC: [channel] [exceptionmask]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFEXCEPTLIST">
            <summary>
            IRC: [channel] :End of channel exception list
            
            Description: When listing the 'exception masks' for a given channel,
            a server is required to send the list back using the
            RPL_EXCEPTLIST and RPL_ENDOFEXCEPTLIST messages. A
            separate RPL_EXCEPTLIST is sent for each active mask.
            After the masks have been listed (or if none present)
            a RPL_ENDOFEXCEPTLIST MUST be sent.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_VERSION">
            <summary>
            IRC: [version].[debuglevel] [server] :[comments]
            
            Description: Reply by the server showing its version details.
            The [version] is the version of the software being
            used (including any patchlevel revisions) and the
            [debuglevel] is used to indicate if the server is
            running in "debug mode".
            The "comments" field may contain any comments about
            the version or further version details.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_WHOREPLY">
            <summary>
            IRC: [channel] [user] [host] [server] [nick ( "H" / "G" ] ["*"] [ ( "@" / "+" ) :[hopcount] [real name]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFWHO">
            <summary>
            IRC: [name] :End of WHO list
            
            Description: The RPL_WHOREPLY and RPL_ENDOFWHO pair are used
            to answer a WHO message. The RPL_WHOREPLY is only
            sent if there is an appropriate match to the WHO
            query. If there is a list of parameters supplied
            with a WHO message, a RPL_ENDOFWHO MUST be sent
            after processing each list item with [name] being
            the item.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_NAMREPLY">
            <summary>
            IRC: ( "=" / "*" / "@" ) [channel :[ "@" / "+" ] [nick] *( " " [ "@" / "+" ] [nick] 
            
            Description: "@" is used for secret channels, "*" for private
            channels, and "=" for others (public channels).
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFNAMES">
            <summary>
            IRC: [channel] :End of NAMES list
            
            Description: To reply to a NAMES message, a reply pair consisting
            of RPL_NAMREPLY and RPL_ENDOFNAMES is sent by the
            server back to the client. If there is no channel
            found as in the query, then only RPL_ENDOFNAMES is
            returned. The exception to this is when a NAMES
            message is sent with no parameters and all visible
            channels and contents are sent back in a series of
            RPL_NAMEREPLY messages with a RPL_ENDOFNAMES to mark
            the end.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LINKS">
            <summary>
            IRC: [mask] [server] :[hopcount] [server info]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFLINKS">
            <summary>
            IRC: [mask] :End of LINKS list
            
            Description: In replying to the LINKS message, a server MUST send
            replies back using the RPL_LINKS numeric and mark the
            end of the list using an RPL_ENDOFLINKS reply.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_BANLIST">
            <summary>
            IRC: [channel] [banmask]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFBANLIST">
            <summary>
            IRC: [channel] :End of channel ban list
            
            Description: When listing the active 'bans' for a given channel,
            a server is required to send the list back using the
            RPL_BANLIST and RPL_ENDOFBANLIST messages. A separate
            RPL_BANLIST is sent for each active banmask. After the
            banmasks have been listed (or if none present) a
            RPL_ENDOFBANLIST MUST be sent.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_INFO">
            <summary>
            IRC: :[string]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFINFO">
            <summary>
            IRC: :End of INFO list
            
            Description: A server responding to an INFO message is required to
            send all its 'info' in a series of RPL_INFO messages
            with a RPL_ENDOFINFO reply to indicate the end of the
            replies.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_MOTDSTART">
            <summary>
            IRC: :- [server] Message of the day - 
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_MOTD">
            <summary>
            IRC: :- [text]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFMOTD">
            <summary>
            IRC: :End of MOTD command
            
            Description: When responding to the MOTD message and the MOTD file
            is found, the file is displayed line by line, with
            each line no longer than 80 characters, using
            RPL_MOTD format replies. These MUST be surrounded
            by a RPL_MOTDSTART (before the RPL_MOTDs) and an
            RPL_ENDOFMOTD (after).
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_YOUREOPER">
            <summary>
            IRC: :You are now an IRC operator
            
            Description: RPL_YOUREOPER is sent back to a client which has
            just successfully issued an OPER message and gained
            operator status.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_REHASHING">
            <summary>
            IRC: [config file] :Rehashing
            
            Description: If the REHASH option is used and an operator sends
            a REHASH message, an RPL_REHASHING is sent back to
            the operator.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_YOURESERVICE">
            <summary>
            IRC: You are service [servicename]
            
            Description: Sent by the server to a service upon successful
            registration.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TIME">
            <summary>
            IRC: [server] :[string showing server's local time]
            
            Description: When replying to the TIME message, a server MUST send
            the reply using the RPL_TIME format above. The string
            showing the time need only contain the correct day and
            time there. There is no further requirement for the
            time string.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_USERSSTART">
            <summary>
            IRC: :UserID Terminal Host
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_USERS">
            <summary>
            IRC: :[username] [ttyline] [hostname]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFUSERS">
            <summary>
            IRC: :End of users
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_NOUSERS">
            <summary>
            IRC: :Nobody logged in
            
            Description: If the USERS message is handled by a server, the
            replies RPL_USERSTART, RPL_USERS, RPL_ENDOFUSERS and
            RPL_NOUSERS are used. RPL_USERSSTART MUST be sent
            first, following by either a sequence of RPL_USERS
            or a single RPL_NOUSER. Following this is
            RPL_ENDOFUSERS.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACELINK">
            <summary>
            IRC: Link [version and debug level] [destination [next server] V[protocol version [link uptime in seconds] [backstream sendq [upstream sendq]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACECONNECTING">
            <summary>
            IRC: Try. [class] [server]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACEHANDSHAKE">
            <summary>
            IRC: H.S. [class] [server]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACEUNKNOWN">
            <summary>
            IRC: ???? [class] [[client IP address in dot form]]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACEOPERATOR">
            <summary>
            IRC: Oper [class] [nick]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACEUSER">
            <summary>
            IRC: User [class] [nick]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACESERVER">
            <summary>
            IRC: Serv [class] [int]S [int]C [server [nick!user|*!*]@[host|server] V[protocol version]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACESERVICE">
            <summary>
            IRC: Service [class] [name] [type] [active type]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACENEWTYPE">
            <summary>
            IRC: [newtype] 0 [client name]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACECLASS">
            <summary>
            IRC: Class [class] [count]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACERECONNECT">
            <summary>
            IRC: Class [class] [count] Unused
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACELOG">
            <summary>
            IRC: File [logfile] [debug level]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRACEEND">
            <summary>
            IRC: [server name] [version and debug level] :End of TRACE
            
            Description: The RPL_TRACE are all returned by the server in
            response to the TRACE message. How many are
            returned is dependent on the TRACE message and
            whether it was sent by an operator or not. There
            is no predefined order for which occurs first.
            Replies RPL_TRACEUNKNOWN, RPL_TRACECONNECTING and
            RPL_TRACEHANDSHAKE are all used for connections
            which have not been fully established and are either
            unknown, still attempting to connect or in the
            process of completing the 'server handshake'.
            RPL_TRACELINK is sent by any server which handles
            a TRACE message and has to pass it on to another
            server. The list of RPL_TRACELINKs sent in
            response to a TRACE command traversing the IRC
            network should reflect the actual connectivity of
            the servers themselves along that path.
            RPL_TRACENEWTYPE is to be used for any connection
            which does not fit in the other categories but is
            being displayed anyway.
            RPL_TRACEEND is sent to indicate the end of the list.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_STATSLINKINFO">
            <summary>
            IRC: [linkname] [sendq] [sent messages [sent Kbytes] [received messages [received Kbytes] [time open]
            
            Description: reports statistics on a connection. [linkname]
            identifies the particular connection, [sendq] is
            the amount of data that is queued and waiting to be
            sent [sent messages] the number of messages sent,
            and [sent Kbytes] the amount of data sent, in
            Kbytes. [received messages] and [received Kbytes]
            are the equivalent of [sent messages] and [sent
            Kbytes] for received data, respectively. [time
            open] indicates how long ago the connection was
            opened, in seconds.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_STATSCOMMANDS">
            <summary>
            IRC: [command] [count] [byte count] [remote count]
            
            Description: reports statistics on commands usage.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ENDOFSTATS">
            <summary>
            IRC: [stats letter] :End of STATS report
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_STATSUPTIME">
            <summary>
            IRC: :Server Up %d days %d:%02d:%02d
            
            Description: reports the server uptime.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_STATSOLINE">
            <summary>
            IRC: O [hostmask] * [name]
            
            Description: reports the allowed hosts from where user may become IRC
            operators.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_UMODEIS">
            <summary>
            IRC: [user mode string]
            
            Description: To answer a query about a client's own mode,
            RPL_UMODEIS is sent back.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_SERVLIST">
            <summary>
            IRC: [name] [server] [mask] [type] [hopcount] [info]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_SERVLISTEND">
            <summary>
            IRC: [mask] [type] :End of service listing
            
            Description: When listing services in reply to a SERVLIST message,
            a server is required to send the list back using the
            RPL_SERVLIST and RPL_SERVLISTEND messages. A separate
            RPL_SERVLIST is sent for each service. After the
            services have been listed (or if none present) a
            RPL_SERVLISTEND MUST be sent.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LUSERCLIENT">
            <summary>
            IRC: :There are [integer] users and [integer services on [integer] servers
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LUSEROP">
            <summary>
            IRC: [integer] :operator(s) online
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LUSERUNKNOWN">
            <summary>
            IRC: [integer] :unknown connection(s)
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LUSERCHANNELS">
            <summary>
            IRC: [integer] :channels formed
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_LUSERME">
            <summary>
            IRC: :I have [integer] clients and [integer servers
            
            Description: In processing an LUSERS message, the server
            sends a set of replies from RPL_LUSERCLIENT,
            RPL_LUSEROP, RPL_USERUNKNOWN,
            RPL_LUSERCHANNELS and RPL_LUSERME. When
            replying, a server MUST send back
            and RPL_LUSERME. The other
            replies are only sent back if a non-zero count
            is found for them.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ADMINME">
            <summary>
            IRC: [server] :Administrative info
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ADMINLOC1">
            <summary>
            IRC: :[admin info]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ADMINLOC2">
            <summary>
            IRC: :[admin info]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_ADMINEMAIL">
            <summary>
            IRC: :[admin info]
            
            Description: When replying to an ADMIN message, a server
            is expected to use replies RPL_ADMINME
            through to RPL_ADMINEMAIL and provide a text
            message with each. For RPL_ADMINLOC1 a
            description of what city, state and country
            the server is in is expected, followed by
            details of the institution (RPL_ADMINLOC2)
            and constly the administrative contact for the
            server (an email address here is REQUIRED)
            in RPL_ADMINEMAIL.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.RPL_TRYAGAIN">
            <summary>
            IRC: [command] :Please wait a while and try again.
            
            Description: When a server drops a command without processing it,
            it MUST use the reply RPL_TRYAGAIN to inform the
            originating client.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOSUCHNICK">
            <summary>
            IRC: [nickname] :No such nick/channel
            
            Description: Used to indicate the nickname parameter supplied to a
            command is currently unused.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOSUCHSERVER">
            <summary>
            IRC: [server name] :No such server
            
            Description: Used to indicate the server name given currently
            does not exist.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOSUCHCHANNEL">
            <summary>
            IRC: [channel name] :No such channel
            
            Description: Used to indicate the given channel name is invalid.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_CANNOTSENDTOCHAN">
            <summary>
            IRC: [channel name] :Cannot send to channel
            
            Description: Sent to a user who is either (a) not on a channel
            which is mode +n or (b) not a chanop (or mode +v) on
            a channel which has mode +m set or where the user is
            banned and is trying to send a PRIVMSG message to
            that channel.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_TOOMANYCHANNELS">
            <summary>
            IRC: [channel name] :You have joined too many channels
            
            Description: Sent to a user when they have joined the maximum
            number of allowed channels and they try to join
            another channel.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_WASNOSUCHNICK">
            <summary>
            IRC: [nickname] :There was no such nickname
            
            Description: Returned by WHOWAS to indicate there is no history
            information for that nickname.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_TOOMANYTARGETS">
            <summary>
            IRC: [target] :[error code] recipients. [abort message]
            
            Description: Returned to a client which is attempting to send a
            PRIVMSG/NOTICE using the user@host destination format
            and for a user@host which has several occurrences.
            Returned to a client which trying to send a
            PRIVMSG/NOTICE to too many recipients.
            Returned to a client which is attempting to JOIN a safe
            channel using the shortname when there are more than one
            such channel.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOSUCHSERVICE">
            <summary>
            IRC: [service name] :No such service
            
            Description: Returned to a client which is attempting to send a SQUERY
            to a service which does not exist.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOORIGIN">
            <summary>
            IRC: :No origin specified
            
            Description: PING or PONG message missing the originator parameter.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NORECIPIENT">
            <summary>
            IRC: :No recipient given ([command])
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOTEXTTOSEND">
            <summary>
            IRC: :No text to send
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOTOPLEVEL">
            <summary>
            IRC: [mask] :No toplevel domain specified
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_WILDTOPLEVEL">
            <summary>
            IRC: [mask] :Wildcard in toplevel domain
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_BADMASK">
            <summary>
            IRC: PRIVMSG $[server]" or "PRIVMSG #[host]" is attempted
            
            Description: 412 - 415 are returned by PRIVMSG to indicate that
            the message wasn't delivered for some reason.
            ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that
            are returned when an invalid use of
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_TOOMANYLINES">
            <summary>
            A query returned too many results.
            This is not an offical part of the RFC but added since it seems to be in use.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_UNKNOWNCOMMAND">
            <summary>
            IRC: [command] :Unknown command
            
            Description: Returned to a registered client to indicate that the
            command sent is unknown by the server.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOMOTD">
            <summary>
            IRC: :MOTD File is missing
            
            Description: Server's MOTD file could not be opened by the server.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOADMININFO">
            <summary>
            IRC: [server] :No administrative info available
            
            Description: Returned by a server in response to an ADMIN message
            when there is an error in finding the appropriate
            information.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_FILEERROR">
            <summary>
            IRC: :File error doing [file op] on [file]
            
            Description: Generic error message used to report a failed file
            operation during the processing of a message.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NONICKNAMEGIVEN">
            <summary>
            IRC: :No nickname given
            
            Description: Returned when a nickname parameter expected for a
            command and isn't found.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_ERRONEUSNICKNAME">
            <summary>
            IRC: [nick] :Erroneous nickname
            
            Description: Returned after receiving a NICK message which contains
            characters which do not fall in the defined set. See
            section 2.3.1 for details on valid nicknames.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NICKNAMEINUSE">
            <summary>
            IRC: [nick] :Nickname is already in use
            
            Description: Returned when a NICK message is processed that results
            in an attempt to change to a currently existing
            nickname.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NICKCOLLISION">
            <summary>
            IRC: [nick] :Nickname collision KILL from [user]@[host]
            
            Description: Returned by a server to a client when it detects a
            nickname collision (registered of a NICK that
            already exists by another server).
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_UNAVAILRESOURCE">
            <summary>
            IRC: [nick/channel] :Nick/channel is temporarily unavailable
            
            Description: Returned by a server to a user trying to join a channel
            currently blocked by the channel delay mechanism.
            Returned by a server to a user trying to change nickname
            when the desired nickname is blocked by the nick delay
            mechanism.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_USERNOTINCHANNEL">
            <summary>
            IRC: [nick] [channel] :They aren't on that channel
            
            Description: Returned by the server to indicate that the target
            user of the command is not on the given channel.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOTONCHANNEL">
            <summary>
            IRC: [channel] :You're not on that channel
            
            Description: Returned by the server whenever a client tries to
            perform a channel affecting command for which the
            client isn't a member.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_USERONCHANNEL">
            <summary>
            IRC: [user] [channel] :is already on channel
            
            Description: Returned when a client tries to invite a user to a
            channel they are already on.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOLOGIN">
            <summary>
            IRC: [user] :User not logged in
            
            Description: Returned by the summon after a SUMMON command for a
            user was unable to be performed since they were not
            logged in.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_SUMMONDISABLED">
            <summary>
            IRC: :SUMMON has been disabled
            
            Description: Returned as a response to the SUMMON command. MUST be
            returned by any server which doesn't implement it.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_USERSDISABLED">
            <summary>
            IRC: :USERS has been disabled
            
            Description: Returned as a response to the USERS command. MUST be
            returned by any server which does not implement it.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOTREGISTERED">
            <summary>
            IRC: :You have not registered
            
            Description: Returned by the server to indicate that the client
            MUST be registered before the server will allow it
            to be parsed in detail.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NEEDMOREPARAMS">
            <summary>
            IRC: [command] :Not enough parameters
            
            Description: Returned by the server by numerous commands to
            indicate to the client that it didn't supply enough
            parameters.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_ALREADYREGISTRED">
            <summary>
            IRC: :Unauthorized command (already registered)
            
            Description: Returned by the server to any link which tries to
            change part of the registered details (such as
            password or user details from second USER message).
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOPERMFORHOST">
            <summary>
            IRC: :Your host isn't among the privileged
            
            Description: Returned to a client which attempts to register with
            a server which does not been setup to allow
            connections from the host the attempted connection
            is tried.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_PASSWDMISMATCH">
            <summary>
            IRC: :Password incorrect
            
            Description: Returned to indicate a failed attempt at registering
            a connection for which a password was required and
            was either not given or incorrect.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_YOUREBANNEDCREEP">
            <summary>
            IRC: :You are banned from this server
            
            Description: Returned after an attempt to connect and register
            yourself with a server which has been setup to
            explicitly deny connections to you.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_YOUWILLBEBANNED">
            <summary>
            IRC: :You are banned from this server
            
            Description: Sent by a server to a user to inform that access to the
            server will soon be denied.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_KEYSET">
            <summary>
            IRC: [channel] :Channel key already set
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_CHANNELISFULL">
            <summary>
            IRC: [channel] :Cannot join channel (+l)
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_UNKNOWNMODE">
            <summary>
            IRC: [char] :is unknown mode char to me for [channel]
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_INVITEONLYCHAN">
            <summary>
            IRC: [channel] :Cannot join channel (+i)
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_BANNEDFROMCHAN">
            <summary>
            IRC: [channel] :Cannot join channel (+b)
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_BADCHANNELKEY">
            <summary>
            IRC: [channel] :Cannot join channel (+k)
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_BADCHANMASK">
            <summary>
            IRC: [channel] :Bad Channel Mask
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOCHANMODES">
            <summary>
            IRC: [channel] :Channel doesn't support modes
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_BANLISTFULL">
            <summary>
            IRC: [channel] [char] :Channel list is full
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOPRIVILEGES">
            <summary>
            IRC: :Permission Denied- You're not an IRC operator
            
            Description: Any command requiring operator privileges to operate
            MUST return this error to indicate the attempt was
            unsuccessful.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_CHANOPRIVSNEEDED">
            <summary>
            IRC: [channel] :You're not channel operator
            
            Description: Any command requiring 'chanop' privileges (such as
            MODE messages) MUST return this error if the client
            making the attempt is not a chanop on the specified
            channel.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_CANTKILLSERVER">
            <summary>
            IRC: :You can't kill a server!
            
            Description: Any attempts to use the KILL command on a server
            are to be refused and this error returned directly
            to the client.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_RESTRICTED">
            <summary>
            IRC: :Your connection is restricted!
            
            Description: Sent by the server to a user upon connection to indicate
            the restricted nature of the connection (user mode "+r").
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_UNIQOPPRIVSNEEDED">
            <summary>
            IRC: :You're not the original channel operator
            
            Description: Any MODE requiring "channel creator" privileges MUST
            return this error if the client making the attempt is not
            a chanop on the specified channel.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_NOOPERHOST">
            <summary>
            IRC: :No O-lines for your host
            
            Description: If a client sends an OPER message and the server has
            not been configured to allow connections from the
            client's host as an operator, this error MUST be
            returned.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_UMODEUNKNOWNFLAG">
            <summary>
            IRC: :Unknown MODE flag
            
            Description: Returned by the server to indicate that a MODE
            message was sent with a nickname parameter and that
            the a mode flag sent was not recognized.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ERR_USERSDONTMATCH">
            <summary>
            IRC: :Cannot change mode for other users
            
            Description: Error sent to any user trying to view or change the
            user mode for a user other than themselves.
            
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.ConnectionFailed">
            <summary>
            When the TCP/IP connection unexpectedly fails.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.IrcServerError">
            <summary>
            The IRC server sent an 'ERROR' message for some
            reason.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.BadDccEndpoint">
            <summary>
            When the socket connection information sent
            by the remote user in a DCC request is bad.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.UnparseableMessage">
            <summary>
            A message from the IRC server that cannot be parsed. This may be because
            the message is intended to cause problems, it may be an unsupported protocol
            such as DCC Voice, or it may be that the Thresher parser simply cannot understand
            it.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.UnableToResume">
            <summary>
            Normally a DCC Resume message is sent in response to
            a DCC Send. This error is signaled when a DCC Resume message is
            received without a previous Send or the Send session has timed out.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.UnknownEncryptionProtocol">
            <summary>
            Signaled when a DCC Get or SEND contains an encryption
            protocol that Thresher does not support.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.BadDccAcceptValue">
            <summary>
            When trying to resume a DCC transfer the remote user is
            supposed to send an Accept message with the same starting position
            in the file. If these numbers differ this error is raised.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.BadResumePosition">
            <summary>
            If the remote user sends a DCC resume request which
            asks for a start position greater than or equals to the file
            size then this error is raised.
            </summary>
        </member>
        <member name="F:Sharkbite.Irc.ReplyCode.DccConnectionRefused">
            <summary>
            When attempting to connect to another
            machine using DCC and the target machine
            refuses the connection this error is raised.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Rfc2812Util">
            <summary>
            RFC 2812 Utility methods.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.#cctor">
            <summary>
            Static initializer 
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.UserInfoFromString(System.String)">
            <summary>
            Converts the user string sent by the IRC server
            into a UserInfo object.
            </summary>
            <param name="fullUserName">The user in nick!user@host form.</param>
            <returns>A UserInfo object.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.ParseUserInfoLine(System.String)">
            <summary>
            Break up an IRC user string into its component
            parts. 
            </summary>
            <param name="fullUserName">The user in nick!user@host form</param>
            <returns>A string array with the first item being nick, then user, and then host.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.IsValidChannelList(System.String[])">
            <summary>
            Using the rules set forth in RFC 2812 determine if
            an array of channel names is valid.
            </summary>
            <returns>True if the channel names are all valid.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.IsValidChannelName(System.String)">
            <summary>
            Using the rules set forth in RFC 2812 determine if
            the channel name is valid.
            </summary>
            <returns>True if the channel name is valid.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.IsValidNick(System.String)">
            <summary>
            Using the rules set forth in RFC 2812 determine if
            the nickname is valid.
            </summary>
            <returns>True is the nickname is valid</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.IsValidNicklList(System.String[])">
            <summary>
            Using the rules set forth in RFC 2812 determine if
            an array of nicknames names is valid.
            </summary>
            <returns>True if the channel names are all valid.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.ModeActionToChar(Sharkbite.Irc.ModeAction)">
            <summary>
            Convert a ModeAction into its RFC2812 character.
            </summary>
            <param name="action">The action enum.</param>
            <returns>Either '+' or '-'.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.CharToModeAction(System.Char)">
            <summary>
            Converts the char received from the IRC server into
            its enum equivalent.
            </summary>
            <param name="action">Either '+' or '-'.</param>
            <returns>An action enum.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.UserModeToChar(Sharkbite.Irc.UserMode)">
            <summary>
            Converts a UserMode into its RFC2812 character.
            </summary>
            <param name="mode">The mode enum.</param>
            <returns>The corresponding char.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.UserModesToArray(System.String)">
            <summary>
            Convert a string of UserModes characters to
            an array of UserMode enums.
            </summary>
            <param name="modes">A string of UserMode chars from the IRC server.</param>
            <returns>An array of UserMode enums. Charactres that are not from RFC2812 will be droppped.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.CharToUserMode(System.Char)">
            <summary>
            Converts the char recived from the IRC server into
            its enum equivalent.
            </summary>
            <param name="mode">One of the IRC mode characters, e.g. 'a','i', etc...</param>
            <returns>An mode enum.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.ChannelModesToArray(System.String)">
            <summary>
            Convert a string of ChannelModes characters to
            an array of ChannelMode enums.
            </summary>
            <param name="modes">A string of ChannelMode chars from the IRC server.</param>
            <returns>An array of ChannelMode enums. Charactres that are not from RFC2812 will be droppped.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.ChannelModeToChar(Sharkbite.Irc.ChannelMode)">
            <summary>
            Converts a ChannelMode into its RFC2812 character.
            </summary>
            <param name="mode">The mode enum.</param>
            <returns>The corresponding char.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.CharToChannelMode(System.Char)">
            <summary>
            Converts the char recived from the IRC server into
            its enum equivalent.
            </summary>
            <param name="mode">One of the IRC mode characters, e.g. 'O','i', etc...</param>
            <returns>An mode enum.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.StatsQueryToChar(Sharkbite.Irc.StatsQuery)">
            <summary>
            Converts a StatQuery enum value to its RFC2812 character.
            </summary>
            <param name="query">The query enum.</param>
            <returns>The corresponding char.</returns>
        </member>
        <member name="M:Sharkbite.Irc.Rfc2812Util.CharToStatsQuery(System.Char)">
            <summary>
            Converts the char recived from the IRC server into
            its enum equivalent.
            </summary>
            <param name="queryType">One of the IRC stats query characters, e.g. 'u','l', etc...</param>
            <returns>An StatsQuery enum.</returns>
        </member>
        <member name="T:Sharkbite.Irc.Sender">
            <summary>
            This class is used to send all the IRC commands except for CTCP and DCC
            messages. Instances of this class are retrieved as properties of the Connection
            object. All methods in this class are thread safe.
            </summary>
            <remarks>
            <para>Due to the asynchronous nature of IRC, none of these commands 
            have a return value. To get that value (or possibly an error) the client must
            handle the corresponding event. For example, to check if a user is online
            the client would send <see cref="M:Sharkbite.Irc.Sender.Ison(System.String)"/> then check the value of the 
            <see cref="F:Sharkbite.Irc.Listener.OnIson"/> event to receive the answer.</para>
            <para>When a command can return an error, the possible error replies
            are listed. An error message will be sent via the <see cref="F:Sharkbite.Irc.Listener.OnError"/> event
            with one of the listed error codes as a parameter. When checking for these 
            errors use the constants from <see cref="T:Sharkbite.Irc.ReplyCode"/>.
            </para> 
            <para>The maximum length of any command string sent to the 
            server is 512 characters.</para>
            </remarks>
            <example><code>
            //Create a Connection object which will automatically create its own Sender
            Connection connection = new Connection( args, false, false );	
            //Send commands using the Connection object and its Sender instance.
            //No need to keep a separate reference to the Sender object
            connection.Sender.PublicMessage("#thresher", "hello");
            </code></example>
        </member>
        <member name="M:Sharkbite.Irc.Sender.#ctor(Sharkbite.Irc.Connection)">
            <summary>
            Create a new Sender for a specific connection.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Truncate(System.String,System.Int32)">
            <summary>
            Truncate parameters which cause a command line
            to be too long.
            </summary>
            <param name="parameter">The command parameter</param>
            <param name="commandLength">The length of the command plus whitespace</param>
            <returns></returns>
        </member>
        <member name="M:Sharkbite.Irc.Sender.User(Sharkbite.Irc.ConnectionArgs)">
            <summary>
            The USER command is only used at the beginning of Connection to specify
            the username, hostname and realname of a new user.
            </summary>
            <param name="args">The user Connection data</param>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Quit(System.String)">
            <summary>
            A client session is terminated with a quit message.
            </summary>
            <remarks> 
            <para>The server
            acknowledges this by sending an ERROR message to the client. 
            </para>
            <para>Before closing the Connection with the IRC server this method
            will call <c>Listener.beforeDisconnect()</c> and after
            the Connection is closed it will call <c> Listener.OnDisconnect()</c>
            </para>
            </remarks>
            <param name="reason">Reason for quitting.</param>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Pong(System.String)">
            <summary>
            A PONG message is a reply to server PING message. Only called by
            the Connection object to keep the Connection alive.
            </summary>
            <remarks>
            Possible Errors
            <list type="bullet">
            			<item><description>ERR_NOORIGIN</description></item>
            			<item><description>ERR_NOSUCHSERVER</description></item>
            </list>
            </remarks>
            <param name="message">The text sent by the IRC server in the PING message.</param>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Pass(System.String)">
            <summary>
            The PASS command is used to set a 'Connection password'. 
            </summary>
            <remarks>
            The optional password can and MUST be set before any attempt to register
            the Connection is made. Currently this requires that user send a
            PASS command before sending the NICK/USER combination.
            </remarks>
        </member>
        <member name="M:Sharkbite.Irc.Sender.RegisterConnection(Sharkbite.Irc.ConnectionArgs)">
            <summary>
            User registration consists of 3 commands:
            1. PASS
            2. NICK
            3. USER
            Pass will rarely fail but the proposed Nick might already be taken in
            which case the client will have to register by manually calling Nick
            and User.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Join(System.String)">
            <summary>
            Join the specified channel. 
            </summary>
            <remarks>
            <para>Once a user has joined a channel, he receives information about
            all commands his server receives affecting the channel. This
            includes JOIN, MODE, KICK, PART, QUIT and of course PRIVMSG/NOTICE.
            This allows channel members to keep track of the other channel
            members, as well as channel modes.</para>
            <para>If a JOIN is successful, the user receives a JOIN message as
            confirmation and is then sent the channel's topic ( <see cref="F:Sharkbite.Irc.Listener.OnTopicRequest"/> and
            the list of users who are on the channel ( <see cref="F:Sharkbite.Irc.Listener.OnNames"/> ), which
            MUST include the user joining.</para>
            
            Possible Errors
            <list type="bullet">
            	<item><description>ERR_NEEDMOREPARAMS</description></item>
            	<item><description>ERR_BANNEDFROMCHAN</description></item>
            	<item><description>ERR_INVITEONLYCHAN</description></item>
            	<item><description>ERR_BADCHANNELKEY</description></item>
            	<item><description>ERR_CHANNELISFULL</description></item>
            	<item><description>ERR_BADCHANMASK</description></item>
            	<item><description>ERR_NOSUCHCHANNEL</description></item>
            	<item><description>ERR_TOOMANYCHANNELS</description></item>
            	<item><description>ERR_TOOMANYTARGETS</description></item>
            	<item><description>ERR_UNAVAILRESOURCE</description></item>
            </list>
            </remarks>
            <param name="channel">The channel to join. Channel names must begin with '&amp;', '#', '+' or '!'.</param>
            <example><code>
            //Most channels you will see begin with the '#'. The others are reserved
            //for special channels and may not even be available on a particular server.
            connection.Sender.Join("#thresher");
            </code></example>
            <exception cref="T:System.ArgumentException">If the channel name is not valid.</exception>
            <seealso cref="F:Sharkbite.Irc.Listener.OnJoin"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Join(System.String,System.String)">
            <summary>
            Join a passworded channel.
            </summary>
            <param name="channel">Channel to join</param>
            <param name="password">The channel's pasword. Cannot be null or empty.</param>
            <exception cref="T:System.ArgumentException">If the channel name is not valid or the password is null.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnJoin"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Nick(System.String)">
            <summary>
            Change the user's nickname.
            </summary>
            <remarks>
            Possible Errors
            	<list type="bullet">
            		<item><description>ERR_NONICKNAMEGIVEN</description></item>
            		<item><description>ERR_ERRONEUSNICKNAME</description></item>
            		<item><description>ERR_NICKNAMEINUSE</description></item>
            		<item><description>ERR_NICKCOLLISION</description></item>
            		<item><description>ERR_UNAVAILRESOURCE</description></item>
            		<item><description>ERR_RESTRICTED</description></item>
            	</list>
            </remarks>
            <param name="newNick"> The new nickname</param>
            <example><code>
            //Make sure and verify that the nick is valid and of the right length
            string nick = GetUserInput();
            if( Rfc2812Util.IsValidNick( connection, nick) ) { 
            connection.Sender.Nick( nick );
            }
            </code></example>
            <exception cref="T:System.ArgumentException">If the nickname is not valid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnNick"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Names(System.String[])">
            <summary> 
            Request a list of all nicknames on a given channel.
            </summary>
            <remarks>
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_TOOMANYMATCHES</description></item>
            </list>
            </remarks>
            <param name="channels">One or more channel names.</param>
            <example><code>
            //Make the request for a single channel
            connection.Sender.Names( "#test" );
            //Make the request for several channels at once
            connection.Sender.Names( "#test","#alpha","#bravo" );
            </code></example>
            <exception cref="T:System.ArgumentException">If any of the channels are not valid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnNames"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.AllNames">
            <summary>
            Request a list of all visible channels along with their users. If the server allows this
            kind of request then expect a rather large reply. 
            </summary>
            <remarks>
            Possible Errors
            	<list type="bullet">
            		<item><description>ERR_TOOMANYMATCHES</description></item>
            	</list>
            </remarks> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnNames"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.List(System.String[])">
            <summary>Request basic information about a channel, i.e. number
            of visible users and topic.</summary>
            <remarks>
            Possible Errors
            	<list type="bullet">
            		<item><description>ERR_TOOMANYMATCHES</description></item>
            </list>
            </remarks> 
            <param name="channels">One or more channel names.</param>
            <example><code>
            //Make the request for a single channel
            connection.Sender.List( "#test" );
            //Make the request for several channels at once
            connection.Sender.List( "#test","#alpha",#"bravo" );
            </code></example>
            <exception cref="T:System.ArgumentException">If any of the channels are not valid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnList"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.AllList">
            <summary>
            Request basic information for all the channels on the current
            network.
            </summary>
            <remarks>
            Possible Errors
            	<list type="bullet">
            		<item><description>ERR_TOOMANYMATCHES</description></item>
            </list>
            </remarks> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnList"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.ChangeTopic(System.String,System.String)">
            <summary>Change the topic of the given channel.</summary>
            <remarks>
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_NEEDMOREPARAMS</description></item>
            		<item><description>ERR_NOTONCHANNEL</description></item>
            		<item><description>ERR_CHANOPRIVSNEEDED</description></item>
            		<item><description>ERR_NOCHANMODES</description></item>
            </list>
            </remarks>
            <param name="channel">The target channel.</param>
            <param name="newTopic">The new topic.</param>
            <example><code>
            connection.Sender.ChangeTopic( "#thresher","Beta 27 Released" );
            </code></example>	
            <exception cref="T:System.ArgumentException">If the channel name is not valid or the topic is null.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnTopicChanged"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.ClearTopic(System.String)">
            <summary>Clear the channel's topic.</summary>
            <remarks>
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_NEEDMOREPARAMS</description></item>
            		<item><description>ERR_NOTONCHANNEL</description></item>
            		<item><description>ERR_CHANOPRIVSNEEDED</description></item>
            		<item><description>ERR_NOCHANMODES</description></item>
            </list>
            </remarks>
            <param name="channel">The target channel.</param>
            <exception cref="T:System.ArgumentException">If the channel name is not valid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnTopicChanged"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.RequestTopic(System.String)">
            <summary>Request the topic for the given channel.</summary>
            <remarks>
            <para>
            The reply will be sent via the <see cref="F:Sharkbite.Irc.Listener.OnTopicRequest"/> event. If there is no topic
            then <see cref="F:Sharkbite.Irc.Listener.OnError"/> will be called with a code of <see cref="F:Sharkbite.Irc.ReplyCode.RPL_NOTOPIC"/>.
            </para>
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_NEEDMOREPARAMS</description></item>
            		<item><description>ERR_NOTONCHANNEL</description></item>
            		<item><description>ERR_CHANOPRIVSNEEDED</description></item>
            		<item><description>ERR_NOCHANMODES</description></item>
            </list>
            </remarks>
            <param name="channel">The target channel.</param>
            <exception cref="T:System.ArgumentException">If the channel name is not valid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnTopicRequest"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Part(System.String,System.String[])">
            <summary>
            Leave the given channel.
            </summary>
            <remarks>
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_NEEDMOREPARAMS</description></item>
            		<item><description>ERR_NOSUCHCHANNEL</description></item>
            		<item><description>ERR_NOTONCHANNEL</description></item>
            </list>
            </remarks>
            <param name="reason">A goodbye message.</param>
            <param name="channels">One or more channels to leave.</param>
            <example><code>
            //Leave a single channel
            connection.Sender.Part("Goodbye", "#test" );
            //Leave several at once
            connection.Sender.Part( "Goodbye", "#test","#alpha",#"bravo" );
            </code></example>
            <exception cref="T:System.ArgumentException">If the channel name is not valid or the reason is null.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnPart"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Part(System.String)">
            <summary>
            Leave a channel without giving a reason.
            </summary>
            <param name="channel">The channel to leave.</param>
            <exception cref="T:System.ArgumentException">If the channel name is not valid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnPart"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.PublicNotice(System.String,System.String)">
            <summary>Send a notice to a channel.</summary>
            <remarks>
            <para>The difference between a notice and a normal message is that 
            automatic replies must never be sent in response to a notice. This rule 
            applies to servers too - they must not send any error reply back to the 
            client on receipt of a notice. The object of this rule is to avoid loops
            between clients automatically sending something in response to
            something it received. See <see cref="M:Sharkbite.Irc.Sender.PublicMessage(System.String,System.String)"/> for possible errors.</para>
            </remarks>
            <param name="channel">The target channel.</param>
            <param name="message">Text message. If the text is too large to be sent in one
            piece it will be broken up into smaller strings which will then
            be sent individually.</param>
            <exception cref="T:System.ArgumentException">If the channel name is not valid or the message is empty or null.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnPublicNotice"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.PrivateNotice(System.String,System.String)">
            <summary>Send a notice to a user.</summary>
            <remarks>
            <para>The difference between a notice and a normal message is that 
            automatic replies must never be sent in response to a notice. This rule 
            applies to servers too - they must not send any error reply back to the 
            client on receipt of a notice. The object of this rule is to avoid loops
            between clients automatically sending something in response to
            something it received. See <see cref="M:Sharkbite.Irc.Sender.PrivateMessage(System.String,System.String)"/> for possible errors.</para>
            </remarks>
            <param name="nick">The target nickname.</param>
            <param name="message">Text message. If the text is too large to be sent in one
            piece it will be broken up into smaller strings which will then
            be sent individually.</param>
            <exception cref="T:System.ArgumentException">If the nick is not valid or the message is empty or null.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivateNotice"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.PublicMessage(System.String,System.String)">
            <summary>
            Send a message to all the users in a channel.</summary>
            <remarks>
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_CANNOTSENDTOCHAN</description></item>
            		<item><description>ERR_NOTEXTTOSEND</description></item>
            </list>
            </remarks>
            <param name="channel">The target channel.</param>
            <param name="message">A message. If the message is too long it will be broken
            up into smaller piecese which will be sent sequentially.</param>
            <exception cref="T:System.ArgumentException">If the channel name is not valid or if the message is null.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnPublic"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.PrivateMessage(System.String,System.String)">
            <summary>
            Send a message to a user.</summary>
            <remarks>
            <para>If the target user status is away, the <see cref="F:Sharkbite.Irc.Listener.OnAway"/> event will be
            called along with the away message if any.
            </para>
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_NORECIPIENT</description></item>
            		<item><description>ERR_NOTEXTTOSEND</description></item>
            		<item><description>ERR_NOSUCHNICK</description></item>
            </list>
            </remarks>
            <param name="nick">The target user.</param>
            <param name="message">A message. If the message is too long it will be broken
            up into smaller piecese which will be sent sequentially.</param>
            <exception cref="T:System.ArgumentException">If the nickname is not valid or if the message is null or empty.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivate"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Invite(System.String,System.String)">
            <summary>
            Invite a user to a channel.</summary>
            <remarks>
            <para>The parameter nickname is the nickname of the person to be invited to
            the target channel channel. There is no requirement that the
            channel the target user is being invited to must exist or be a valid
            channel. However, if the channel exists, only members of the channel
            are allowed to invite other users. When the channel has invite-only
            flag set, only channel operators may an invite.</para>
            
            <para>Only the user inviting and the user being invited will receive
            notification of the invitation. Other channel members are not
            notified. (This is unlike the mode changes, and is occasionally the
            source of trouble for users.)</para>
            
            <para>After the invite is sent the IRC server will signal that it 
            was correctly received by calling <see cref="F:Sharkbite.Irc.Listener.OnInviteSent"/>.
            </para>
            
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_NEEDMOREPARAMS</description></item>
            		<item><description>ERR_NOSUCHNICK</description></item>
            		<item><description>ERR_NOTONCHANNEL</description></item>
            		<item><description>ERR_USERONCHANNEL</description></item>
            		<item><description>ERR_CHANOPRIVSNEEDED</description></item>
            </list>
            </remarks>
            <param name="who">The nick of the person to invite</param>
            <param name="channel">The channel they are invited to join.</param>
            <exception cref="T:System.ArgumentException">If the nickname or channel is not valid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnInviteSent"/> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnInvite"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Kick(System.String,System.String,System.String[])">
            <summary>Kick a user off a channel.</summary>
            <remarks>
            Possible Replies
            <list type="bullet">
            		<item><description>ERR_NEEDMOREPARAMS</description></item>
            		<item><description>ERR_NOSUCHCHANNEL</description></item>
            		<item><description>ERR_BADCHANMASK</description></item>
            		<item><description>ERR_CHANOPRIVSNEEDED</description></item>
            		<item><description>ERR_USERNOTINCHANNEL</description></item>
            		<item><description>ERR_NOTONCHANNEL</description></item>
            	</list>
            </remarks>
            <param name="nicks">One or more users to kick.</param>
            <param name="channel">Which channel to kick the user from.</param>
            <param name="reason">Why.</param>
            <example><code>
            //Kick a single user
            connection.Sender.Kick("#thresher","No Perl please","lwall" );
            //Kicks several users at once
            connection.Sender.Kick( "#thresher", "Bye", "John","Dick","Harry" );
            </code></example>
            <exception cref="T:System.ArgumentException">If the nickname or channel is not valid or the reason is null.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnKick"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Ison(System.String)">
            <summary>
            Request to know if a user is currenlty on IRC.</summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NEEDMOREPARAMS</description></item>
            		</list>
            </remarks>
            <param name="nick">Target user.</param>
            <example><code>
            //Query for a nick
            connection.Sender.Ison( "joe" );
            </code></example>
            <exception cref="T:System.ArgumentException">If the nickname is not valid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnIson"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Who(System.String,System.Boolean)">
            <summary>
            Request a list of users who match a given query.</summary>
            <remarks>
            Possible Errors
            <list type="bullet">
            		<item><description>ERR_TOOMANYLINES</description></item>
            </list>
            </remarks>
            <param name="mask">The mask passed to Who is matched against a users' host, 
            real name or nickname. It uses the wildcard system of matching
            where the '*' can stand for any number of characters and '?' stands for any single
            character. The query will only match against one component so it is not possible
            to match against both nick and host for example.
            </param>
            <param name="operatorsOnly"> True if the query should only try to match the mask
            to users designated operators.</param>
            <example><code>
            //Find all users from Russia, i.e. who have .ru in their hostnames
            connection.Sender.Who("*.ru", false );
            //Find all users from clan [DX], i.e. have '[DX]' in their nick
            connection.Sender.Who("[DX]*", false );
            </code></example>
            <exception cref="T:System.ArgumentException">If the mask is null,empty, or too long.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnWho"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.AllWho">
            <summary>
            Request a list all visible users (whose mode is not +i) and those 
            who don't have a common channel with the requesting 
            client are listed. 
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnWho"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Whois(System.String)">
            <summary>
            Request detailed information about a given user.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHNICK</description></item>
            		</list>
            </remarks>
            <param name="nick">The nick of the query subject.</param>
            <exception cref="T:System.ArgumentException">If the nick is invalid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnWhois"/> 
            <seealso cref="T:Sharkbite.Irc.WhoisInfo"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Away(System.String)">
            <summary>
            Set the user status to away and set an automatic reply 
            to any private message.
            </summary>
            <remarks>
            This functions as a kind of IRC answering machine. It is normally used
            to indicate that the user is away from IRC.
            </remarks>
            <param name="message">The message that will be sent back to others when you
            are away. Overly long message will be truncated.</param>
            <exception cref="T:System.ArgumentException">If the message is null or empty.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnAway"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.UnAway">
            <summary>
            Turns off the away status and the accompanying message.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Whowas(System.String)">
            <summary>
            Request information about a user who is no longer on IRC.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NONICKNAMEGIVEN</description></item>
            			<item><description>ERR_WASNOSUCHNICK</description></item>
            		</list>
            </remarks>
            <param name="nick">Target nick</param>
            <exception cref="T:System.ArgumentException">If the nick is invalid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnWhowas"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Whowas(System.String,System.Int32)">
            <summary>
            Request information about a user who is no longer on IRC
            but with a maximum number of responses.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NONICKNAMEGIVEN</description></item>
            			<item><description>ERR_WASNOSUCHNICK</description></item>
            		</list>
            </remarks>
            <param name="count">The maximum number of replies the IRC server
            should send back.</param>
            <param name="nick">Target nick</param>
            <exception cref="T:System.ArgumentException">If the nick is invalid or if count is less 
            than or equal to zero.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnWhowas"/> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.RequestUserModes">
            <summary>
            Request the modes set for this user.
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnUserModeRequest"/>
            <seealso cref="T:Sharkbite.Irc.UserMode"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.ChangeUserMode(Sharkbite.Irc.ModeAction,Sharkbite.Irc.UserMode)">
            <summary>Changes this client's mode. To change another nick's mode
            use <see cref="M:Sharkbite.Irc.Sender.ChangeChannelMode(System.String,Sharkbite.Irc.ModeAction,Sharkbite.Irc.ChannelMode,System.String)"/>.</summary>
            <remarks>
            Away cannot be set here but should be set using <see cref="M:Sharkbite.Irc.Sender.Away(System.String)"/> 
            or removed using <see cref="M:Sharkbite.Irc.Sender.UnAway"/>.
            </remarks>
            <param name="action">Add or remove a mode.</param>
            <param name="mode">The mode to be changed.</param>
            <example><code>
            //Turn off invisibility
            connection.Sender.ChangeUserMode( ModeAction.Remove, UserMode.Invisible );
            //Turn on wallops (and get a lot of IRC garbage)
            connection.Sender.ChangeUserMode( ModeAction.Add, UserMode.Wallops );
            </code></example>
            <exception cref="T:System.ArgumentException">If the UserMode parameter is Away.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnUserModeChange"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.ChangeChannelMode(System.String,Sharkbite.Irc.ModeAction,Sharkbite.Irc.ChannelMode,System.String)">
            <summary>
            Change a channel's mode.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NEEDMOREPARAMS</description></item>
            			<item><description>ERR_KEYSET</description></item>
            			<item><description>ERR_NOCHANMODES</description></item>
            			<item><description>ERR_CHANOPRIVSNEEDED</description></item>
            			<item><description>ERR_USERNOTINCHANNEL</description></item>
            			<item><description>ERR_UNKNOWNMODE</description></item>
            		</list>
            </remarks>
            <param name="channel">The target channel.</param>
            <param name="action">Add or remove.</param>
            <param name="mode">The target mode.</param>
            <param name="param">An optional parameter for certain modes. If the mode 
            does not require one this should be null.</param>
            <example><code>
            //Give 'nick' the ability to talk on a moderated channel, i.e. add Voice
            connection.Sender.ChangeChannelMode("#thresher", ModeAction.Add, ChannelMode.Voice,"nick" );
            //Make a channel private
            connection.Sender.ChangeChannelMode( "#thresher", ModeAction.Add, ChannelMode.Private, null );
            </code></example>
            <exception cref="T:System.ArgumentException">If the channel name is invalid.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelModeChange"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.RequestChannelList(System.String,Sharkbite.Irc.ChannelMode)">
            <summary>
            Request the list of users that a channel keeps for the given mode.. 
            </summary>
            <remarks>
            Each channel maintains a list of those banned, those excepted from a ban,
            those on automatic invite, and the channel creator. Use this method to retreieve one
            of those lists.
            </remarks>
            <param name="channel">The taregt channel.</param>
            <param name="mode">Must be one of:
            Ban, Exception, Invitation, or ChannelCreator.
            </param>
            <example><code>
            //Request the channel's banned list
            connection.Sender.RequestChannelList("#thresher", ChannelMode.Ban );
            </code></example>
            <exception cref="T:System.ArgumentException">If the channel is invalid or the ChannelMode is
            not one of the 4 allowed types.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelList"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.RequestChannelModes(System.String)">
            <summary>
            Request the modes of a channel.
            </summary>
            <param name="channel">The target channel.</param>
            <exception cref="T:System.ArgumentException">If the channel is invalid, null, or empty.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnChannelModeRequest"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Action(System.String,System.String)">
            <summary>
            Send an action message to a channel.
            </summary>
            <remarks>
            This is actually a CTCP command but it is so widely used
            that it is included here. These are the '\me Laughs' type messages. 
            </remarks>
            <param name="channel">The target channel.</param>
            <param name="description">A description of the action. If this is too long it will
            be truncated.</param>
            <example><code>
            //Express an emotion...
            connection.Sender.Action("#thresher", "Kicks down the door" );
            </code></example>
            <exception cref="T:System.ArgumentException">If the channel name is not valid. Will
            also be thrown if the description is null or empty.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnAction"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.PrivateAction(System.String,System.String)">
            <summary>
            Send an action message to a user instead of a channel.
            </summary>
            <param name="nick">The target user.</param>
            <param name="description">A description of the action. If this is too long it will
            be truncated.</param>
            <exception cref="T:System.ArgumentException">If the nickname is not valid. Will
            also be thrown if the description is null or empty.</exception>
            <seealso cref="F:Sharkbite.Irc.Listener.OnPrivateAction"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Register(System.String)">
            <summary>Register this connection with the IRC server.</summary>
            <remarks>
            This method should be called when the initial attempt
            to register with the IRC server fails because the nick is already
            taken. To be informed when this fails you must be subscribed
            to <see cref="F:Sharkbite.Irc.Listener.OnNickError"/>. If <see cref="P:Sharkbite.Irc.Connection.HandleNickTaken"/>
            is set to true (which is its default value) then Thresher will automatically
            create an alternate nick and use that. The new nick can be retrieved
            by calling <see cref="P:Sharkbite.Irc.Connection.ConnectionData"/>.
            </remarks>
            <param name="newNick">The changed nick name.</param>
            <seealso cref="T:Sharkbite.Irc.NameGenerator"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Raw(System.String)">
            <summary>
            Send an arbitrary text message to the IRC server.
            </summary>
            <remarks>
            Messages that are too long will be truncated. There is no corresponding 
            events so it will be necessary to check for standard reply codes and possibly
            errors.
            </remarks>
            <param name="message">A text message.</param>
            <exception cref="T:System.ArgumentException">If the message is null or empty.</exception> 
        </member>
        <member name="M:Sharkbite.Irc.Sender.Version">
            <summary>
            Request the version of the IRC server program.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <seealso cref="F:Sharkbite.Irc.Listener.OnVersion"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Version(System.String)">
            <summary>
            Used to query the version of the IRC server program.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <param name="targetServer">The FQDN of the IRC server to query. Wildcards are allowed.
            Must be a server part of the same IRC network this connection is connected to.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnVersion"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Motd">
            <summary>
            Request the "Message Of The Day" from the current server.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOMOTD</description></item>
            		</list>
            </remarks>
            <seealso cref="F:Sharkbite.Irc.Listener.OnMotd"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Motd(System.String)">
            <summary>
            Request the "Message Of The Day" from the given server.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOMOTD</description></item>
            		</list>
            </remarks>
            <param name="targetServer">The FQDN of the IRC server to query. Wildcards are allowed.
            Must be a server part of the same IRC network this connection is connected to.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnMotd"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Time">
            <summary>
            Request the local time from the current server.
            </summary>
            <seealso cref="F:Sharkbite.Irc.Listener.OnTime"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Time(System.String)">
            <summary>
            Request the local time from the given server.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <param name="targetServer">The FQDN of the IRC server to query. Wildcards are allowed.
            Must be a server part of the same IRC network this connection is connected to.</param>
            <seealso cref="F:Sharkbite.Irc.Listener.OnTime"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Wallops(System.String)">
            <summary>
            Send a message to all users who have the 'w' user mode set.</summary>
            <remarks>
            This will likely be forbidden to all but IRC
            OPS.
            </remarks>
            <param name="message">Any text message.</param>
            <exception cref="T:System.ArgumentException">If the message is empty or null.</exception>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Info">
            <summary>
            Request information about the software
            of the current IRC server.
            </summary>
            <remarks>
            This returns information describing the
            server: its version, when it was compiled, the patchlevel, when it
            was started, and any other miscellaneous information which may be
            	considered relevant.
            </remarks>
            <seealso cref="F:Sharkbite.Irc.Listener.OnInfo"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Info(System.String)">
            <summary>
            Request information about the software
            of the target IRC server.
            </summary>
            <remarks>
            <para>This returns information describing the
            server: its version, when it was compiled, the patchlevel, when it
            was started, and any other miscellaneous information which may be
            	considered relevant.</para>
            	
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <param name="target">Either a user nickname or a specific IRC server connected
            to the current network. If it is a nickname then return the information about
            the server to which 'nick' is connected. Can include wildcards.</param>
            <example><code>
            //Query a specific server
            connection.Sender.Info( "sunray.sharkbite.org" );
            //Query the server Bob is connected to
            connection.Sender.Info("Bob");
            </code></example>
            <seealso cref="F:Sharkbite.Irc.Listener.OnInfo"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Admin">
            <summary>
            Request information about the administrator
            of the current IRC server.
            </summary>
            <remarks>
            This returns information such as the administrator's
            email address, geographical location and whatever else
            the IRC is configured to send as a response.
            </remarks>
            <seealso cref="F:Sharkbite.Irc.Listener.OnAdmin"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Admin(System.String)">
            <summary>
            Request information about the administrator
            of the target IRC server.
            </summary>
            <remarks>
            <para> This returns information such as the administrator's
            email address, geographical location and whatever else
            the IRC is configured to send as a response.
            </para>
            	
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <param name="target">Either a user nickname or a specific IRC server connected
            to the current network. If it is a nickname then return the information about
            the server to which 'nick' is connected. Can include wildcards.</param>
            <example><code>
            //Request info about the administrator of the specified server
            connection.Sender.Admin( "sunray.sharkbite.org" );
            //Request info about the administrator of the server Bob is connected to
            connection.Sender.Admin("Bob");
            </code></example>
            <seealso cref="F:Sharkbite.Irc.Listener.OnAdmin"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Lusers">
            <summary>
            Request statistics about the size of the IRC network.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <seealso cref="F:Sharkbite.Irc.Listener.OnLusers"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Lusers(System.String,System.String)">
            <summary>
            Request statistics about the size of the IRC network.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <param name="hostMask">Limits the kinds of servers included in the response by
            specifiying a hostname string. Can include wildcards.</param>
            <param name="targetServer">Specifies the server that should process the request. Can be null
            to indicate that the current server should handle the request. Can include wildcards.</param>
            <example><code>
            //Request stats from the current server
            connection.Sender.Lusers();
            //Request stats about all servers ending in '.net' from the current server
            connection.Sender.Lusers("*.net", null );
            //Request stats about all servers ending in '.net' from 'west.gamesnet.net'
            connection.Sender.Lusers("*.net", "west.gamesnet.net");
            </code></example>
            <exception cref="T:System.ArgumentException">If the host mask and server names are too long.</exception>
            <seealso cref="F:Sharkbite.Irc.Listener.OnLusers"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Links">
            <summary>
            Request all server names which are known by the current server.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <seealso cref="F:Sharkbite.Irc.Listener.OnLinks"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Links(System.String[])">
            <summary>
            Request all server names which are known by the target server
            and which match a given host mask.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <param name="masks">Either a single string which acts as a host
            mask filter for the query. Or two strings with the first as host mask
            and the second a target server. Any other arguments will be ignored.</param>
            <example><code>
            //Request names from the current server
            connection.Sender.Links();
            //Request names of all servers ending in '.net' from the current server
            connection.Sender.Links("*.edu" );
            //Request names of all servers ending in '.edu' from '*.gnome.org' servers
            connection.Sender.Links("*.edu", "*.gnome.org");
            </code></example>
            <exception cref="T:System.ArgumentException">If the masks are too long.</exception>
            <seealso cref="F:Sharkbite.Irc.Listener.OnLinks"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Stats(Sharkbite.Irc.StatsQuery)">
            <summary>
            Request certain kinds of statistics about the current server.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <param name="query">The type of query to send. See <see cref="T:Sharkbite.Irc.StatsQuery"/> for choice.</param>
            <example><code>
            //Request server link stats
            connection.Sender.Stats( StatsQuery.Connections );
            </code></example>
            <seealso cref="F:Sharkbite.Irc.Listener.OnStats"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Stats(Sharkbite.Irc.StatsQuery,System.String)">
            <summary>
            Request certain kinds of statistics about the current server.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOSUCHSERVER</description></item>
            		</list>
            </remarks>
            <param name="query">The type of query to send. See <see cref="T:Sharkbite.Irc.StatsQuery"/> for choice.</param>
            <param name="targetServer">Specifies the server that should process the request. Can include wildcards.</param>
            <example><code>
            //Request list of Operators from the server 'irc.gnome.org'
            connection.Sender.Stats( StatsQuery.Operators, "irc.gnome.org" );
            </code></example>
            <exception cref="T:System.ArgumentException">If the target server name is too long.</exception>
            <seealso cref="F:Sharkbite.Irc.Listener.OnStats"/>
        </member>
        <member name="M:Sharkbite.Irc.Sender.Kill(System.String,System.String)">
            <summary>
            Forcefully disconnect a user form the IRC server. This can only be used
            by Operators.
            </summary>
            <remarks>
            Possible Errors
            		<list type="bullet">
            			<item><description>ERR_NOPRIVILEGES</description></item>
            			<item><description>ERR_NEEDMOREPARAMS</description></item>
            			<item><description>ERR_NOSUCHNICK</description></item>
            			<item><description>ERR_CANTKILLSERVER</description></item>
            		</list>
            </remarks>
            <param name="nick">User to kill</param>
            <param name="reason">The reason for disconnecting the user.</param>
            <exception cref="T:System.ArgumentException">If the nick is not valid or the reason is null.</exception> 
            <seealso cref="F:Sharkbite.Irc.Listener.OnKill"/>
        </member>
        <member name="T:Sharkbite.Irc.ServerProperties">
            <summary>
            Encapsulates the collection of properties sent by the IRC server
            after registration.
            </summary>
            <remarks>See the server_properties.pdf file for a list of comon properties.</remarks>
            <example><code>
            //This will only be non null if the connection has already received
            //a '005' reply and that such a reply is actually sent by the server.
            //This will happen right after registration.
            //Instances are only retrieved from a Connection and not instantiated directly.
            ServerProperties properties = connection.ServerProperties;
            //It should always be tested for null
            if( properties != null ) {
            Console.Writeline("NICKLEN is" + properties["NICKLEN"] );
            }
            //Only a handful of properties will ever be available.
            </code></example>
        </member>
        <member name="M:Sharkbite.Irc.ServerProperties.#ctor">
            <summary>
            Instances should only be created by the Connection class.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.ServerProperties.SetProperty(System.String,System.String)">
            <summary>
            Add a property retrieved from the IRC 
            server.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.ServerProperties.GetEnumerator">
            <summary>
            Get a read-only enumeration of all the elements
            in this object.
            </summary>
            <returns>An IDictionaryEnumerator type enumeration.</returns>
            <example><code>
            //To loop over all the values	
            foreach( DictionaryEntry entry in connection.ServerProperties ) 
            {
            Console.WriteLine("Key:" + entry.Key + " Value:" + entry.Value );
            }
            </code></example>
        </member>
        <member name="M:Sharkbite.Irc.ServerProperties.ContainsKey(System.String)">
            <summary>
            Test if this instance contains a given key.
            </summary>
            <param name="key">The server properties key to test.</param>
            <returns>True if it is present.</returns>
        </member>
        <member name="P:Sharkbite.Irc.ServerProperties.Item(System.String)">
            <summary>
            Read-only indexer for the various server
            property strings.
            </summary>
            <returns>The string sent by the server or <see cref="F:System.String.Empty"/> if not present..</returns>
        </member>
        <member name="T:Sharkbite.Irc.TextColor">
            <summary>
            This class conatins a set of methods for adding and removing mIRC color
            and other control codes.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.TextColor.StripControlChars(System.String)">
            <summary>
            Removes all mIRC control codes from the string.
            </summary>
            <param name="text">Dirty text.</param>
            <returns>Cleaned text.</returns>
        </member>
        <member name="M:Sharkbite.Irc.TextColor.MakeBold(System.String)">
            <summary>
            Add Bold control codes.
            </summary>
            <param name="text">A piece of text.</param>
            <returns>The text with the added control codes.</returns>
        </member>
        <member name="M:Sharkbite.Irc.TextColor.MakePlain(System.String)">
            <summary>
            Add Plain control codes.
            </summary>
            <param name="text">A piece of text.</param>
            <returns>The text with the added control codes.</returns>
        </member>
        <member name="M:Sharkbite.Irc.TextColor.MakeUnderline(System.String)">
            <summary>
            Add Underline control codes.
            </summary>
            <param name="text">A piece of text.</param>
            <returns>The text with the added control codes.</returns>
        </member>
        <member name="M:Sharkbite.Irc.TextColor.MakeReverseVideo(System.String)">
            <summary>
            Add Rverse Video control codes.
            </summary>
            <param name="text">A piece of text.</param>
            <returns>The text with the added control codes.</returns>
        </member>
        <member name="M:Sharkbite.Irc.TextColor.MakeColor(System.String,Sharkbite.Irc.MircColor)">
            <summary>
            Add Color control codes.
            </summary>
            <param name="text">A piece of text.</param>
            <param name="textColor">The color of the text taken from one of the mIRC color enums.</param>
            <returns>The text with the added control codes.</returns>
        </member>
        <member name="M:Sharkbite.Irc.TextColor.MakeColor(System.String,Sharkbite.Irc.MircColor,Sharkbite.Irc.MircColor)">
            <summary>
            Add Color control codes.
            </summary>
            <param name="text">A piece of text.</param>
            <param name="textColor">The color of the text taken from one of the mIRC color enums.</param>
            <param name="backgroundColor">The background of the designated text.</param>
            <returns>The text with the added control codes.</returns>
        </member>
        <member name="T:Sharkbite.Irc.WhoisInfo">
            <summary>
            The collection of information about a user 
            returned by a Whois query. Instances of this class
            are created internally.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.WhoisInfo.#ctor">
            <summary>
            Create an empty instance where the operator
            property defaults to false.
            </summary>
        </member>
        <member name="M:Sharkbite.Irc.WhoisInfo.GetChannels">
            <summary>
            An array of channel names. Names may have =,@, or + prefixed to them.
            </summary>
            <returns>A string array.</returns>
        </member>
        <member name="P:Sharkbite.Irc.WhoisInfo.User">
            <summary>
            A user's nick, logon, and hostname.
            </summary>
            <value>A UserInfo instance.</value>
        </member>
        <member name="P:Sharkbite.Irc.WhoisInfo.RealName">
            <summary>
            A user's real name.
            </summary>
            <value>A string</value>
        </member>
        <member name="P:Sharkbite.Irc.WhoisInfo.Server">
            <summary>
            The name of IRC server.
            </summary>
            <value>The IRC server FQDN hostname string.</value>
        </member>
        <member name="P:Sharkbite.Irc.WhoisInfo.ServerDescription">
            <summary>
            Text describing the IRC server.
            </summary>
            <value>A string describing the IRC network this server is a member of.</value>
        </member>
        <member name="P:Sharkbite.Irc.WhoisInfo.IdleTime">
            <summary>
            User's idle time in seconds.
            </summary>
            <value>Seconds as a long.</value>
        </member>
        <member name="P:Sharkbite.Irc.WhoisInfo.Operator">
            <summary>
            Whether the user is an operator or not.
            </summary>
            <value>True if the user is an IRC operator.</value>
        </member>
        <member name="T:Sharkbite.Irc.Test.CtcpListenerTest">
            <summary>
            Summary description for listenerTest.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.CtcpSenderTest">
            <summary>
            Summary description for CtcpSenderTest.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.CtcpSenderTest.RequestParam">
            <summary>
            A delegate that wraps mosts Ctcp requests
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.CtcpSenderTest.ReplyParam">
            <summary>
            A delegate that wraps mosts Ctcp replies
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.DccChatSessionTest">
            <summary>
            Test DccChatTest.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.DccListenerTest">
            <summary>
            Summary description for DccListenerTest.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.DccUtilTest">
            <summary>
            Test DccUtilTest.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.IdentdTest">
            <summary>
            Summary description for IdentdTest.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.ListenerTest">
            <summary>
            Test Listener
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.Rfc2812UtilTest">
            <summary>
            Test Rfc2812Util
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.SenderTest">
            <summary>
            Test Sender
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.SenderTest.SingleParam">
            <summary>
            A delegate that wraps a single param no colon method
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.SenderTest.SingleOptionalParam">
            <summary>
            A delegate that wraps a single optional param method
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.SenderTest.SingleColonParam">
            <summary>
            A delegate wrapping a command which takes some text prefaced by a colon.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.SenderTest.DoubleColonParam">
            <summary>
            A delegate wrapping a command which takes a single
            parameter and then some text prefaced by a colon.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.SenderTest.DoubleParam">
            <summary>
            A delegate wrapping a command which takes two
            parameters separated by a space.
            </summary>
        </member>
        <member name="T:Sharkbite.Irc.Test.TextColorTest">
            <summary>
            Test DccUtilTest.
            </summary>
        </member>
    </members>
</doc>
